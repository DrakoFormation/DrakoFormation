import{aj as l,ak as o,am as n,an as p,ao as t,ar as a,al as i,ap as c,aq as r}from"./app-BkblVdII.js";const u={},d={class:"table-of-contents"};function k(v,s){const e=c("router-link");return r(),o("div",null,[s[7]||(s[7]=n("h1",{id:"tests-et-boucles",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tests-et-boucles"},[n("span",null,"Tests et boucles")])],-1)),n("nav",d,[n("ul",null,[n("li",null,[p(e,{to:"#conditions"},{default:t(()=>s[0]||(s[0]=[a("Conditions")])),_:1}),n("ul",null,[n("li",null,[p(e,{to:"#condition-ternaire"},{default:t(()=>s[1]||(s[1]=[a("Condition ternaire")])),_:1})]),n("li",null,[p(e,{to:"#operateur-de-fusion-null"},{default:t(()=>s[2]||(s[2]=[a("Opérateur de fusion Null")])),_:1})]),n("li",null,[p(e,{to:"#operateurs-courants"},{default:t(()=>s[3]||(s[3]=[a("Opérateurs courants")])),_:1})])])]),n("li",null,[p(e,{to:"#boucles"},{default:t(()=>s[4]||(s[4]=[a("Boucles")])),_:1}),n("ul",null,[n("li",null,[p(e,{to:"#foreach"},{default:t(()=>s[5]||(s[5]=[a("foreach")])),_:1})]),n("li",null,[p(e,{to:"#for-et-while"},{default:t(()=>s[6]||(s[6]=[a("for et while")])),_:1})])])])])]),s[8]||(s[8]=n("p",null,[a("La "),n("a",{href:"https://www.php.net/manual/fr/language.control-structures.php",target:"_blank",rel:"noopener noreferrer"},"documentation PHP")],-1)),s[9]||(s[9]=n("p",null,"En vidéo :",-1)),s[10]||(s[10]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/e378ba3c78a145f9b75d814f71eb02af",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[11]||(s[11]=i(`<h2 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions"><span>Conditions</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$variable</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$variable</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$variable</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok aussi&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;pourquoi pas ?&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Equivalent à :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$variable</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$variable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok aussi&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;pourquoi pas ?&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="condition-ternaire" tabindex="-1"><a class="header-anchor" href="#condition-ternaire"><span>Condition ternaire</span></a></h3><p>Une variante &quot;courte&quot; existe pour les conditions simples.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Avant le ?, on met notre condition (les parenthèses ne sont pas obligatoires)</span></span>
<span class="line"><span class="token comment">// Après le ?, l&#39;instruction à exécuter si la condition est vraie</span></span>
<span class="line"><span class="token comment">// Après le :, l&#39;instruction à exécuter si la condition est fausse</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token variable">$variable</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok&#39;</span> <span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;pas ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Le code ci-dessus est équivalent à cette structure if/else </span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$variable</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;pas ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ Attention, les conditions ternaires peuvent très vite devenir difficile à relire.</p><h3 id="operateur-de-fusion-null" tabindex="-1"><a class="header-anchor" href="#operateur-de-fusion-null"><span>Opérateur de fusion Null</span></a></h3><p>Cet opérateur permet de vérifier l&#39;existence d&#39;une variable et, si elle n&#39;est pas définie, de lui donner une valeur par défaut.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Si $tab[&#39;uneCle&#39;] est définie, $action prendra sa valeur, sinon, $action aura la valeur &quot;default&quot;</span></span>
<span class="line"><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$tab</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;uneCle&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Le code ci-dessus est équivalent à cette structure if/else </span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$tab</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;uneCle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$tab</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;uneCle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operateurs-courants" tabindex="-1"><a class="header-anchor" href="#operateurs-courants"><span>Opérateurs courants</span></a></h3><ul><li><code>a == b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont égales</li><li><code>a === b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont égales <strong>et</strong> de même type</li><li><code>a != b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont différentes</li><li><code>a !== b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont différentes <strong>ou</strong> de type différent</li><li><code>a &gt; b</code> pour tester si la valeur de <code>a</code> est strictement supérieure à celle de <code>b</code></li><li><code>a &gt;= b</code> pour tester si la valeur de <code>a</code> est supérieure ou égale à celle de <code>b</code></li><li><code>a &lt; b</code> pour tester si la valeur de <code>a</code> est strictement inférieure à celle de <code>b</code></li><li><code>a &lt;= b</code> pour tester si la valeur de <code>a</code> est inférieure ou égale à celle de <code>b</code></li><li><code>a instanceof Object</code> pour tester si <code>a</code> est un Objet de type <code>Object</code></li></ul><h2 id="boucles" tabindex="-1"><a class="header-anchor" href="#boucles"><span>Boucles</span></a></h2><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h3><p>Une boucle particulière, permettant de facilement parcourir un tableau (ou un objet <code>iterable</code>).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"></span>
<span class="line"><span class="token variable">$elements</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$elements</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 0 : 1 pour la première itération</span></span>
<span class="line">    <span class="token comment">// 1 : 3 pour la deuxième</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39; : &#39;</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour modifier <code>$value</code> et voir ces modifications appliquer dans le tableau <code>$elements</code>, il suffit d&#39;un passage par référence.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$elements</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$elements</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ce qui est équivalent à</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$elements</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$elements</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$elements</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affichera [3, 5, 14, 44]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-et-while" tabindex="-1"><a class="header-anchor" href="#for-et-while"><span>for et while</span></a></h3><p>Ces deux boucles sont assez classiques et fonctionnent comme dans beaucoup d&#39;autres langages</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$elements</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$elements</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$elements</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$elements</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affichera [3, 5, 14, 44]</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$elements</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$elements</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$elements</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affichera [5, 7, 16, 46]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22))])}const m=l(u,[["render",k],["__file","02-tests-et-boucles.html.vue"]]),h=JSON.parse('{"path":"/php/02-tests-et-boucles.html","title":"Tests et boucles","lang":"fr-FR","frontmatter":{"date":"2023-01-11T00:00:00.000Z"},"headers":[{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[{"level":3,"title":"Condition ternaire","slug":"condition-ternaire","link":"#condition-ternaire","children":[]},{"level":3,"title":"Opérateur de fusion Null","slug":"operateur-de-fusion-null","link":"#operateur-de-fusion-null","children":[]},{"level":3,"title":"Opérateurs courants","slug":"operateurs-courants","link":"#operateurs-courants","children":[]}]},{"level":2,"title":"Boucles","slug":"boucles","link":"#boucles","children":[{"level":3,"title":"foreach","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"for et while","slug":"for-et-while","link":"#for-et-while","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/02-tests-et-boucles.md"}');export{m as comp,h as data};
