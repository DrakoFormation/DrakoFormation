import{aj as t,ak as o,am as e,ar as n,al as s,aq as r}from"./app-BkblVdII.js";const a={};function l(d,i){return r(),o("div",null,i[0]||(i[0]=[e("h1",{id:"enregistrer-des-changements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#enregistrer-des-changements"},[e("span",null,"Enregistrer des changements")])],-1),e("h2",{id:"status-voir-l-etat-du-depot-local",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#status-voir-l-etat-du-depot-local"},[e("span",null,"Status - Voir l'état du dépôt local")])],-1),e("p",null,"En vidéo :",-1),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/14f386d48da142d5bcc2f27a85fd691c",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),e("p",null,[e("code",null,"git status"),n(" :")],-1),e("p",null,"Cette commande nous permet de voir les modifications depuis la dernière version enregistrée (le dernier commit). On peut y voir les fichiers créés, modifiés ou supprimés, et s'ils sont en attente de validation ou non (ajoutés à l'index, ou non).",-1),e("h2",{id:"diff-voir-les-modifications-en-attente",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#diff-voir-les-modifications-en-attente"},[e("span",null,"Diff - Voir les modifications en attente")])],-1),e("p",null,"En vidéo :",-1),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/b285ee8b7aac487e8e37ebb17179f73e",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s('<p><code>git diff</code> affiche l&#39;ensemble des modifications sur les fichiers déjà versionnés par Git. Cette commande présente tous les fichiers modifiés et les changements à l&#39;intérieur (les lignes commençant par <code>+</code> sont ajoutées, celles commençant par <code>-</code> sont supprimées par rapport à la version précédemment enregistrée).</p><p>Pour voir uniquement les modifications d&#39;un ou plusieurs fichiers, utiliser <code>git diff nomDuFichier nomDUnAutreFichier</code>.</p><h2 id="gitignore-ne-pas-versionner-des-fichiers" tabindex="-1"><a class="header-anchor" href="#gitignore-ne-pas-versionner-des-fichiers"><span>.gitignore - Ne pas versionner des fichiers</span></a></h2><p>En vidéo :</p>',4),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/cbf45501b82c480eb911f3d3834f0281",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s(`<p>Très souvent dans vos projets, vous ne voulez pas versionner certains fichiers (librairies externes qui sont téléchargées avec des gestionnaires de paquets (npm, composer, etc.), fichiers de cache, liés à l&#39;IDE, etc.). Pour cela, on peut créer/modifier un fichier <code>.gitignore</code> à la racine du projet pour indiquer à Git les fichiers et dossiers à ignorer.</p><div class="language-gitignore line-numbers-mode" data-highlighter="prismjs" data-ext="gitignore" data-title="gitignore"><pre><code><span class="line"><span class="token entry string"><span class="token punctuation">/</span>node_modules<span class="token punctuation">/</span> # le dossier node_modules<span class="token punctuation">/</span> ne sera pas versionné</span></span>
<span class="line"><span class="token entry string">.vuepress<span class="token punctuation">/</span>dist<span class="token punctuation">/</span> # Le sous-dossier dist<span class="token punctuation">/</span> du dossier .vuepress<span class="token punctuation">/</span> est ignoré (le reste du dossier .vuepress<span class="token punctuation">/</span> est versionné)</span></span>
<span class="line"><span class="token entry string"><span class="token operator">*</span>.sublime-<span class="token operator">*</span> # tous les fichiers qui contiennent .sublime- dans leur nom sont ignorés</span></span>
<span class="line"><span class="token entry string">.idea<span class="token punctuation">/</span> # Si vous utilisez PhpStorm, je vous recommande d&#39;ignorer ce dossier également</span></span>
<span class="line"><span class="token entry string">.vscode<span class="token punctuation">/</span> # Si vous utilisez Visual Studio, je vous recommande d&#39;ignorer ce dossier également</span></span>
<span class="line"><span class="token entry string">test.md # Le fichier test.md sera ignoré</span></span>
<span class="line"><span class="token entry string"><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.cache # les fichiers terminant par .cache seront ignorés (dans les sous-dossiers, quel que soit leur niveau)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-preparer-un-commit" tabindex="-1"><a class="header-anchor" href="#add-preparer-un-commit"><span>Add - Préparer un commit</span></a></h2><p>En vidéo :</p>`,4),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/3067a76b00c6455daa22a7dc2fc3c132",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s('<p><code>git add</code> permet d&#39;ajouter des modifications à l&#39;index. L&#39;idée de cette commande est de préparer la création d&#39;un commit (version signée contenant un ensemble cohérent de modifications) et de dire à Git quelles modifications nous allons vouloir valider par la suite.</p><p>Quelques usages courants :</p><ul><li><code>git add .</code> ajoute à l&#39;index toutes les modifications, ainsi que les nouveaux fichiers et les fichiers supprimés</li><li><code>git add nomDuFichier nomDUnAutreFichier</code> ajoute uniquement à l&#39;index les modifications des fichiers <code>nomDuFichier</code> et <code>nomDUnAutreFichier</code></li><li><code>git add -p</code> ouvre un mode interactif permettant de choisir quelles modifications ajouter à l&#39;index dans vos fichiers <strong>modifiés</strong> (n&#39;affiche pas les nouveaux fichiers ou les fichiers supprimés).</li></ul><h2 id="reset-sortir-des-elements-de-l-index" tabindex="-1"><a class="header-anchor" href="#reset-sortir-des-elements-de-l-index"><span>Reset - Sortir des éléments de l&#39;index</span></a></h2><p>Si vous avez ajouté des fichiers à l&#39;index, avec <code>git add</code>, mais que vous voulez les sortir de l&#39;index, la commande <code>git reset</code> permet de revenir en arrière.</p><p>Quelques usages courants :</p><ul><li><code>git reset</code> pour sortir <strong>tous</strong> les fichiers de l&#39;index (vous conservez les modifications)</li><li><code>git reset nomDuFichier</code> pour sortir <strong>uniquement</strong> le fichier <code>nomDuFichier</code> de l&#39;index (vous conservez les modifications)</li><li><code>git reset --hard</code> pour sortir <strong>tous</strong> les fichiers de l&#39;index <strong>et supprimer toutes les modifications</strong></li></ul><h2 id="commit-valider-des-modifications" tabindex="-1"><a class="header-anchor" href="#commit-valider-des-modifications"><span>Commit - Valider des modifications</span></a></h2><p>En vidéo :</p>',9),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/dfec002e50714c2d8007e67670b9ca51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s('<p><code>git commit</code> enregistre les modifications de l&#39;index et leur associe un auteur (avec un nom et un email) et un message (obligatoire). On peut dire que <code>git commit</code> créer une nouvelle version ou valide les modifications.</p><p>Quelques usages courants :</p><ul><li><code>git commit -m &quot;Votre message de commit&quot;</code> vous permet de créer un commit et d&#39;y associer directement un message</li><li><code>git commit</code> vous permet de créer un commit et ouvre l&#39;éditeur de texte par défaut pour entrer un message</li></ul><p>⚠️ Dans tous les cas, si vous laissez un message vide, le commit ne sera pas enregistré.</p><p>Vous pouvez également <a href="https://gitmoji.dev/" target="_blank" rel="noopener noreferrer">ajouter des emojis dans vos messages</a>, si vous le souhaitez.</p><h2 id="log-voir-l-historique-des-commits" tabindex="-1"><a class="header-anchor" href="#log-voir-l-historique-des-commits"><span>Log - Voir l&#39;historique des commits</span></a></h2><p>En vidéo :</p>',7),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/a39d82c5d5f84b0e8df96af56d3f9ad7",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s('<p>Pour voir l&#39;historique des commits, avec leurs auteurs, les dates, etc. on utilise la commande <code>git log</code>.</p><p>Quelques usages courants :</p><ul><li><code>git log</code> affiche toutes les informations des commits, sous forme de liste (un peu rude à lire parfois)</li><li><code>git log --graph</code> les affiche sous forme d&#39;arbre (très pratique lorsque votre dépôt a des branches)</li><li><code>git log --oneline</code> les affiche sous forme courte (identifiant de commit + message uniquement)</li><li><code>git log -p nom-du-fichier</code> pour voir l&#39;historique et les modifications d&#39;<strong>un</strong> fichier</li></ul><h2 id="stash-remiser-des-modifications" tabindex="-1"><a class="header-anchor" href="#stash-remiser-des-modifications"><span>Stash - Remiser des modifications</span></a></h2><p>En vidéo :</p>',5),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/e29607cf9a0741058e526192214573aa",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),s("<p>Il se peut que, pour une raison ou une autre, vous ayez besoin de mettre des modifications de côté (changement de ticket, une fonctionnalité à décaler / annuler, etc.). Les stash, ou remisages, permettent de revenir au commit précédent et faire disparaitre les modifications en cours sur vos fichiers, en les sauvegardant ailleurs.</p><p>Quelques usages courants :</p><ul><li><code>git stash</code> pour mettre de côté toutes les modifications en cours (⚠️ ne remise pas les nouveaux fichiers, <code>git stash -u</code> permet de le faire)</li><li><code>git stash pop</code> pour appliquer les modifications du dernier stash enregistré et le <strong>supprimer</strong> du remisage</li><li><code>git stash apply</code> pour appliquer les modifications du dernier stash enregistré et le <strong>conserver</strong> dans le remisage</li></ul><p>Quelques usages moins courants (avec plusieurs stashes) :</p><ul><li><code>git stash list</code> pour afficher la liste des stashes</li><li><code>git stash save &quot;Un message pour se souvenir&quot;</code> pour créer un stash avec un message associé. Très pratique pour se rappeler du but ou du contexte de ce stash</li><li><code>git stash pop stash@{1}</code> pop le stash avec l&#39;identifiant 1 (voir le retour de <code>git stash list</code>)</li><li><code>git stash show</code> pour afficher le contenu du stash (<code>git stash show -p</code> pour voir le diff)</li><li><code>git stash drop stash@{1}</code> supprime le stash avec l&#39;identifiant 1 (⚠️ ces modifications sont perdues)</li><li><code>git stash clear</code> supprime <strong>tous</strong> les stashes</li></ul>",5)]))}const u=t(a,[["render",l],["__file","3-record_changes.html.vue"]]),p=JSON.parse(`{"path":"/git/3-record_changes.html","title":"Enregistrer des changements","lang":"fr-FR","frontmatter":{"date":"2021-10-08T00:00:00.000Z"},"headers":[{"level":2,"title":"Status - Voir l'état du dépôt local","slug":"status-voir-l-etat-du-depot-local","link":"#status-voir-l-etat-du-depot-local","children":[]},{"level":2,"title":"Diff - Voir les modifications en attente","slug":"diff-voir-les-modifications-en-attente","link":"#diff-voir-les-modifications-en-attente","children":[]},{"level":2,"title":".gitignore - Ne pas versionner des fichiers","slug":"gitignore-ne-pas-versionner-des-fichiers","link":"#gitignore-ne-pas-versionner-des-fichiers","children":[]},{"level":2,"title":"Add - Préparer un commit","slug":"add-preparer-un-commit","link":"#add-preparer-un-commit","children":[]},{"level":2,"title":"Reset - Sortir des éléments de l'index","slug":"reset-sortir-des-elements-de-l-index","link":"#reset-sortir-des-elements-de-l-index","children":[]},{"level":2,"title":"Commit - Valider des modifications","slug":"commit-valider-des-modifications","link":"#commit-valider-des-modifications","children":[]},{"level":2,"title":"Log - Voir l'historique des commits","slug":"log-voir-l-historique-des-commits","link":"#log-voir-l-historique-des-commits","children":[]},{"level":2,"title":"Stash - Remiser des modifications","slug":"stash-remiser-des-modifications","link":"#stash-remiser-des-modifications","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"git/3-record_changes.md"}`);export{u as comp,p as data};
