import{aj as c,ak as o,am as s,an as e,ao as t,ar as a,al as u,ap as l,aq as r}from"./app-BkblVdII.js";const d={},k={class:"table-of-contents"};function m(v,n){const p=l("router-link"),i=l("RouteLink");return r(),o("div",null,[n[18]||(n[18]=s("h1",{id:"connexion-et-securisation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#connexion-et-securisation"},[s("span",null,"Connexion et s√©curisation")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[e(p,{to:"#pour-resumer"},{default:t(()=>n[0]||(n[0]=[a("Pour r√©sumer")])),_:1})]),s("li",null,[e(p,{to:"#installation-et-preparation"},{default:t(()=>n[1]||(n[1]=[a("Installation et pr√©paration")])),_:1})]),s("li",null,[e(p,{to:"#configuration"},{default:t(()=>n[2]||(n[2]=[a("Configuration")])),_:1})]),s("li",null,[e(p,{to:"#connecter-un-utilisateur"},{default:t(()=>n[3]||(n[3]=[a("Connecter un utilisateur")])),_:1})]),s("li",null,[e(p,{to:"#utiliser-les-droits"},{default:t(()=>n[4]||(n[4]=[a("Utiliser les droits")])),_:1}),s("ul",null,[s("li",null,[e(p,{to:"#security-yaml"},{default:t(()=>n[5]||(n[5]=[a("Security.yaml")])),_:1})]),s("li",null,[e(p,{to:"#isgranted-et-is-granted"},{default:t(()=>n[6]||(n[6]=[a("IsGranted() et is_granted()")])),_:1})])])]),s("li",null,[e(p,{to:"#recuperer-le-user-connecte"},{default:t(()=>n[7]||(n[7]=[a("R√©cup√©rer le User connect√©")])),_:1}),s("ul",null,[s("li",null,[e(p,{to:"#dans-un-controleur"},{default:t(()=>n[8]||(n[8]=[a("Dans un contr√¥leur")])),_:1})]),s("li",null,[e(p,{to:"#dans-un-service"},{default:t(()=>n[9]||(n[9]=[a("Dans un service")])),_:1})]),s("li",null,[e(p,{to:"#dans-un-template"},{default:t(()=>n[10]||(n[10]=[a("Dans un template")])),_:1})])])]),s("li",null,[e(p,{to:"#inscription"},{default:t(()=>n[11]||(n[11]=[a("Inscription")])),_:1})]),s("li",null,[e(p,{to:"#gerer-les-droits-avec-les-voters"},{default:t(()=>n[12]||(n[12]=[a("G√©rer les droits avec les Voters")])),_:1})])])]),n[19]||(n[19]=s("p",null,[a("La "),s("a",{href:"https://symfony.com/doc/current/security.html",target:"_blank",rel:"noopener noreferrer"},"documentation officielle"),a(", que l'on va suivre / reprendre.")],-1)),n[20]||(n[20]=s("p",null,[a("‚ö†Ô∏è Cette partie a √©t√© √©crite pour Symfony 5.3 et plusieurs choses ont √©t√© modifi√©es depuis la version 5.2 (le fonctionnement reste le m√™me, mais plusieurs √©l√©ments √©taient plus complexes). Vous trouverez une "),s("a",{href:"https://www.loom.com/embed/c35c8ab1e4614a4ebf0eeffd0f8fad94",target:"_blank",rel:"noopener noreferrer"},"version de pr√©sentation de la version 5.2 de Symfony dans cette vid√©o"),a(".")],-1)),n[21]||(n[21]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/2539a55e6a2e4d1a9e829b195268377c",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[22]||(n[22]=u(`<h2 id="pour-resumer" tabindex="-1"><a class="header-anchor" href="#pour-resumer"><span>Pour r√©sumer</span></a></h2><ul><li><code>php bin/console make:user</code> pour cr√©er une classe servant √† la connexion</li><li><code>php bin/console make:auth</code> pour cr√©er le syst√®me de connexion et mettre en place la s√©curisation de base</li><li>Mettre √† jour l&#39;Authenticator cr√©√©, ainsi que la page de connexion</li><li>Pour s&#39;assurer des droits d&#39;un utilisateur, on peut utiliser : <ul><li>L&#39;annotation <code>@IsGranted()</code> (Controllers)</li><li>La fonction <code>is_granted()</code> (Twig)</li><li>La m√©thode <code>isGranted()</code> du service <code>Symfony\\Component\\Security\\Core\\Security</code> (services)</li></ul></li><li>On peut r√©cup√©rer l&#39;utilisateur connect√© avec : <ul><li><code>$this-&gt;getUser()</code> dans un controller √©tendant <code>AbstractController</code></li><li><code>$this-&gt;security-&gt;getUser()</code> dans un service o√π le service <code>Security</code> a √©t√© inject√©</li><li><code>app.user</code> dans une vue Twig</li></ul></li><li><code>php bin/console make:registration-form</code> pour cr√©er automatiquement un formulaire d&#39;inscription</li></ul><h2 id="installation-et-preparation" tabindex="-1"><a class="header-anchor" href="#installation-et-preparation"><span>Installation et pr√©paration</span></a></h2><p>Tout d&#39;abord, installer le bundle n√©cessaire (il est inclus par d√©faut, sur les projets initialis√©s avec <code>--webapp</code>) :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">composer</span> require symfony/security-bundle</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Il faut alors cr√©er une entit√© pour g√©rer les utilisateurs (la plupart du temps, on l&#39;appelle <code>User</code>, mais vous pouvez adapter le nom √† votre besoin). On utilise la commande <code>make:user</code> pour g√©n√©rer cette entit√© particuli√®re.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console make:user</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Dans la plupart des cas, nous voulons stocker notre entit√© <code>User</code> en base (c&#39;est pour cela que je parle d&#39;entit√© üòâ ), mais sachez que √ßa n&#39;est pas obligatoire.</p><p>Il faut alors d√©terminer une propri√©t√© qui nous servira d&#39;identifiant (une propri√©t√© dont la valeur sera unique et que nous afficherons √† nos utilisateurs). En g√©n√©ral, on cr√©e une propri√©t√© <code>username</code> ou <code>email</code> pour cela.</p><p>Et bien s√ªr, si nous stockons les informations en base, il faut demander √† Symfony de hacher (hasher en franglais) les mots de passe.</p><p>La commande va nous ajouter / modifier plusieurs fichiers :</p><ul><li><code>src/Entity/User.php</code> notre entit√© User</li><li><code>src/Repository/UserRepository.php</code> le repository associ√© (noter la m√©thode <code>upgradePassword()</code>)</li><li><code>config/packages/security.yaml</code> met √† jour la configuration sur la s√©curit√©, pour prendre en compte notre entit√© User</li></ul><p>Si besoin d&#39;ajouter plus de champs, on peut utiliser la commande <code>make:entity</code>. Il s&#39;agit ensuite de cr√©er une migration, de la v√©rifier et de la lancer.</p><p>On obtient alors une entit√© <code>User</code> comme celle-ci (je n&#39;ai pas ajout√© de propri√©t√©s et ma propri√©t√© identifiant est <code>email</code>) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Repository<span class="token punctuation">\\</span>UserRepository</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>User<span class="token punctuation">\\</span>PasswordAuthenticatedUserInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>User<span class="token punctuation">\\</span>UserInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">repositoryClass</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">UserRepository</span><span class="token operator">::</span><span class="token constant">class</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">UserInterface</span><span class="token punctuation">,</span> PasswordAuthenticatedUserInterface</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Id</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>GeneratedValue</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;integer&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">length</span><span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">unique</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">true</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$email</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;json&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$roles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">int</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setEmail</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span> <span class="token operator">=</span> <span class="token variable">$email</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * A visual identifier that represents this user.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@see</span> UserInterface</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getUserIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@deprecated</span> since Symfony 5.3, use getUserIdentifier instead</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@see</span> UserInterface</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$roles</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">roles</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// guarantee every user at least has ROLE_USER</span></span>
<span class="line">        <span class="token variable">$roles</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;ROLE_USER&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">array_unique</span><span class="token punctuation">(</span><span class="token variable">$roles</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setRoles</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$roles</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">roles</span> <span class="token operator">=</span> <span class="token variable">$roles</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@see</span> PasswordAuthenticatedUserInterface</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPassword</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Returning a salt is only needed, if you are not using a modern</span>
<span class="line">     * hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@see</span> UserInterface</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@see</span> UserInterface</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// If you store any temporary, sensitive data on the user, clear it here</span></span>
<span class="line">        <span class="token comment">// $this-&gt;plainPassword = null;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Je vous conseille ensuite de cr√©er des fixtures (fausses donn√©es) pour entrer un ou plusieurs <code>User</code> dans votre base (utiliser la commande <code>make:fixtures</code> de <a href="https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html" target="_blank" rel="noopener noreferrer">DoctrineFixturesBundle</a>). Pour que les mots de passe soient encod√©s dans vos Fixtures, il faut bien penser √† :</p><ul><li>injecter le service <code>UserPasswordHasherInterface</code> et l&#39;utiliser pour encoder le mot de passe</li><li>ou encoder vos mots de passe avec la commande <code>security:encode-password</code> de Symfony avant de les mettre dans vos <code>User</code></li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>La configuration se fait dans le fichier <code>config/packages/security.yaml</code>. D√©taillons-le (j&#39;ai √©galement ajout√© des √©l√©ments utiles pour plus tard) :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">security</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Pour activer certaines fonctionnalit√©s (exp√©rimentales) de Symfony </span></span>
<span class="line">    <span class="token key atrule">enable_authenticator_manager</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token comment"># https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords</span></span>
<span class="line">    <span class="token comment"># On d√©finit ici les diff√©rents moyens de hasher </span></span>
<span class="line">    <span class="token comment"># nos mots de passe, en fonction des entit√©s</span></span>
<span class="line">    <span class="token key atrule">password_hashers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface</span><span class="token punctuation">:</span> <span class="token string">&#39;auto&#39;</span></span>
<span class="line">        <span class="token comment"># On dit au composant de Symfony de choisir </span></span>
<span class="line">        <span class="token comment"># l&#39;algorithme (le plus efficace)</span></span>
<span class="line">        <span class="token comment"># pour encoder les mots de passe de l&#39;entit√© User.</span></span>
<span class="line">        <span class="token comment"># On pourrait avoir plusieurs entit√©s, avec des encodeurs diff√©rents</span></span>
<span class="line">        <span class="token key atrule">App\\Entity\\User</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">algorithm</span><span class="token punctuation">:</span> auto</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># On d√©fini des providers (fournisseurs) pour dire quels entit√©s </span></span>
<span class="line">    <span class="token comment"># nous servent √† d√©finir un utilisateur</span></span>
<span class="line">    <span class="token comment"># et quelle propri√©t√© nous permet de l&#39;identifier</span></span>
<span class="line">    <span class="token comment"># https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers</span></span>
<span class="line">    <span class="token key atrule">providers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># used to reload user from session &amp; other features (e.g. switch_user)</span></span>
<span class="line">        <span class="token key atrule">app_user_provider</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">entity</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">class</span><span class="token punctuation">:</span> App\\Entity\\User</span>
<span class="line">                <span class="token key atrule">property</span><span class="token punctuation">:</span> email</span>
<span class="line">                </span>
<span class="line">    <span class="token comment"># Les firewalls vont nous permettre de d√©finir diff√©rentes r√®gles</span></span>
<span class="line">    <span class="token comment"># de s√©curit√© (avec des mani√®res de fonctionner diff√©rentes)</span></span>
<span class="line">    <span class="token comment"># Dans notre cas, le firewall main va √™tre appliqu√© lors de l&#39;appel </span></span>
<span class="line">    <span class="token comment"># de toutes nos routes et va v√©rifier si l&#39;utilisateur</span></span>
<span class="line">    <span class="token comment"># peut ou non acc√©der √† une page avec ses autorisations en cours</span></span>
<span class="line">    <span class="token comment"># (par exemple, s&#39;il peut acc√©der √† une page sans √™tre connect√©)</span></span>
<span class="line">    <span class="token key atrule">firewalls</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">dev</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">pattern</span><span class="token punctuation">:</span> ^/(_(profiler<span class="token punctuation">|</span>wdt)<span class="token punctuation">|</span>css<span class="token punctuation">|</span>images<span class="token punctuation">|</span>js)/</span>
<span class="line">            <span class="token key atrule">security</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">        <span class="token key atrule">main</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">anonymous</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">            <span class="token key atrule">lazy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">            <span class="token key atrule">provider</span><span class="token punctuation">:</span> app_user_provider</span>
<span class="line">            </span>
<span class="line">            <span class="token comment"># On pr√©cise, au composant de s√©curit√©, l&#39;authenticator </span></span>
<span class="line">            <span class="token comment"># √† utiliser pour g√©rer notre connexion</span></span>
<span class="line">            <span class="token key atrule">custom_authenticator</span><span class="token punctuation">:</span> App\\Security\\Authenticator</span>
<span class="line">            <span class="token comment"># Plus de d√©tails sur la fonctionnalit√© &quot;se souvenir de moi&quot; ici : </span></span>
<span class="line">            <span class="token comment"># https://symfony.com/doc/current/security/remember_me.html</span></span>
<span class="line">            <span class="token key atrule">remember_me</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">secret</span><span class="token punctuation">:</span>   <span class="token string">&#39;%kernel.secret%&#39;</span></span>
<span class="line">                <span class="token key atrule">lifetime</span><span class="token punctuation">:</span> <span class="token number">604800</span> <span class="token comment"># 1 semaine, en secondes</span></span>
<span class="line">                <span class="token key atrule">path</span><span class="token punctuation">:</span>     /</span>
<span class="line">                <span class="token comment"># Par d√©faut, cette fonctionnalit√© n&#39;est activ√© que si l&#39;utilisateur coche une case</span></span>
<span class="line">                <span class="token comment"># Vous pouvez faire en sorte que tout utilisateur connect√© le reste 1 semaine</span></span>
<span class="line">                <span class="token comment"># en d√©-commentant la ligne ci-dessous</span></span>
<span class="line">                <span class="token comment">#always_remember_me: true</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment"># Le nom de la route g√©rant la d√©connexion</span></span>
<span class="line">            <span class="token comment"># Symfony se charge de d√©terminer s&#39;il s&#39;agit du nom d&#39;une route ou d&#39;un chemin</span></span>
<span class="line">            <span class="token comment"># (j&#39;aurais pu mettre /deconnexion, par exemple)</span></span>
<span class="line">            <span class="token key atrule">logout</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">path</span><span class="token punctuation">:</span> app_logout</span>
<span class="line">                <span class="token comment"># Vous pouvez √©galement choisir une route o√π envoyer votre utilisateur apr√®s d√©connexion</span></span>
<span class="line">                <span class="token comment"># target: app_any_route</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># activate different ways to authenticate</span></span>
<span class="line">            <span class="token comment"># https://symfony.com/doc/current/security.html#firewalls-authentication</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># https://symfony.com/doc/current/security/impersonating_user.html</span></span>
<span class="line">            <span class="token comment"># switch_user: true</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Ici, on donne des r√®gles pour demander des r√¥les pr√©cis aux utilisateurs</span></span>
<span class="line">    <span class="token comment"># selon une expression r√©guli√®re sur les chemins demand√©s.</span></span>
<span class="line">    <span class="token comment"># L&#39;int√©r√™t est de demander des droits pr√©cis pour acc√©der √† des zones du site</span></span>
<span class="line">    <span class="token comment"># (toute la partie admin, ou la gestion du compte, par exemple)</span></span>
<span class="line">    <span class="token comment"># Si l&#39;utilisateur n&#39;a pas les bons droits, nous pouvons l&#39;envoyer</span></span>
<span class="line">    <span class="token comment"># vers le formulaire de connexion, par exemple</span></span>
<span class="line">    <span class="token key atrule">access_control</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># On demande √† l&#39;utilisateur d&#39;avoir le r√¥le ROLE_ADMIN, </span></span>
<span class="line">        <span class="token comment"># pour toutes les routes commen√ßant par /admin</span></span>
<span class="line">        <span class="token comment"># - { path: ^/admin, roles: ROLE_ADMIN } </span></span>
<span class="line">        <span class="token comment"># On demande √† l&#39;utilisateur d&#39;avoir le r√¥le ROLE_USER, </span></span>
<span class="line">        <span class="token comment"># pour toutes les routes commen√ßant par /profile</span></span>
<span class="line">        <span class="token comment"># - { path: ^/profile, roles: ROLE_USER }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ce fichier est le c≈ìur de la s√©curisation de votre site, mais beaucoup d&#39;autres √©l√©ments peuvent venir le compl√©ter et le raffiner.</p><h2 id="connecter-un-utilisateur" tabindex="-1"><a class="header-anchor" href="#connecter-un-utilisateur"><span>Connecter un utilisateur</span></a></h2><p><a href="https://symfony.com/doc/current/security/auth_providers.html" target="_blank" rel="noopener noreferrer">Les diff√©rents Authentication Providers fournis par Symfony</a></p><p>Des bundles comme le <a href="https://github.com/hwi/HWIOAuthBundle" target="_blank" rel="noopener noreferrer">HWIOAuthBundle</a> compl√®tent encore cette liste.</p><p>L&#39;un des moyens les plus classiques, le formulaire de connexion, est le cas que nous allons voir. Si vous voulez apprendre en d√©tail comment cr√©er un syst√®me de connexion, je vous recommande chaudement <a href="https://symfony.com/doc/current/security/guard_authentication.html" target="_blank" rel="noopener noreferrer">la documentation de Symfony sur la cr√©ation d&#39;une authentification par token d&#39;API</a>.</p><p>Pour cr√©er notre syst√®me de connexion, nous allons utiliser la commande <code>make:auth</code> qui va nous pr√©parer le travail.</p><p><code>php bin/console make:auth</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">What style of authentication do you want? [Empty authenticator]:</span>
<span class="line"> [0] Empty authenticator</span>
<span class="line"> [1] Login form authenticator</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ici, on fait le choix 1.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">The class name of the authenticator to create (e.g. AppCustomAuthenticator):</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Si on suit la documentation, on va entrer <code>LoginFormAuthenticator</code>, mais vous pouvez le nommer comme bon vous semble.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Choose a name for the controller class (e.g. SecurityController) [SecurityController]:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Le nom de <code>SecurityController</code> est le plus courant, et vous le verrez dans beaucoup de projets Symfony.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Do you want to generate a &#39;/logout&#39; URL? (yes/no) [yes]:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Je vous conseille de toujours cr√©er un moyen pour vos utilisateurs de se d√©connecter. Ils appr√©cieront üòâ .</p><p>On obtient alors plusieurs fichiers, dont le <code>SecurityController</code> suivant :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/SecurityController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authentication<span class="token punctuation">\\</span>AuthenticationUtils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SecurityController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/login&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;app_login&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AuthenticationUtils</span> <span class="token variable">$authenticationUtils</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// if ($this-&gt;getUser()) {</span></span>
<span class="line">        <span class="token comment">//     return $this-&gt;redirectToRoute(&#39;target_path&#39;);</span></span>
<span class="line">        <span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// get the login error if there is one</span></span>
<span class="line">        <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token variable">$authenticationUtils</span><span class="token operator">-&gt;</span><span class="token function">getLastAuthenticationError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// last username entered by the user</span></span>
<span class="line">        <span class="token variable">$lastUsername</span> <span class="token operator">=</span> <span class="token variable">$authenticationUtils</span><span class="token operator">-&gt;</span><span class="token function">getLastUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;security/login.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;last_username&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$lastUsername</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;error&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$error</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/logout&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;app_logout&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>LogicException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;This method can be blank - it will be intercepted by the logout key on your firewall.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Je vous conseille de personnaliser les chemins et les noms des routes, pour correspondre √† <em>vos</em> conventions de nommage. Par exemple, je mettrai les chemins en fran√ßais et renommerai les routes <code>security_login </code>et<code> security_logout</code>. Il faudra bien s√ªr modifier ces noms √† plusieurs endroits (<code>login.html.twig</code> et <code>security.yaml</code>, notamment).</p><p>Notez que le fichier <code>login.html.twig</code> contient un formulaire html et non un formulaire Symfony. C&#39;est ici voulu et rien ne vous emp√™che d&#39;en cr√©er un, si ce n&#39;est de faire extr√™mement attention aux noms des champs. Il contient √©galement une section √† d√©-commenter si vous souhaitez activer la fonctionnalit√© &quot;Se souvenir de moi&quot;.</p><p>Il nous reste maintenant √† d√©cortiquer / expliquer le <code>LoginFormAuthenticator</code> qui a √©t√© g√©n√©r√© :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">// src/Security/LoginFormAuthenticator.php</span>
<span class="line"></span>
<span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Security</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>RedirectResponse</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Generator<span class="token punctuation">\\</span>UrlGeneratorInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Authentication<span class="token punctuation">\\</span>Token<span class="token punctuation">\\</span>TokenInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Security</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>AbstractLoginFormAuthenticator</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>Passport<span class="token punctuation">\\</span>Badge<span class="token punctuation">\\</span>CsrfTokenBadge</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>Passport<span class="token punctuation">\\</span>Badge<span class="token punctuation">\\</span>UserBadge</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>Passport<span class="token punctuation">\\</span>Credentials<span class="token punctuation">\\</span>PasswordCredentials</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>Passport<span class="token punctuation">\\</span>Passport</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Authenticator<span class="token punctuation">\\</span>Passport<span class="token punctuation">\\</span>PassportInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Util<span class="token punctuation">\\</span>TargetPathTrait</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Authenticator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoginFormAuthenticator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">TargetPathTrait</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// La route de login par d√©faut. √Ä adapter √† vos besoins (ici, je remplace par security_login, personnellement)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token constant">LOGIN_ROUTE</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;app_login&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Service de g√©n√©ration d&#39;URL / de chemins</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name type-declaration">UrlGeneratorInterface</span> <span class="token variable">$urlGenerator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// On pourrait injecter ici d&#39;autres services qui nous seraient utiles lors de la connexion (un service qui v√©rifierait si nous nous connectons depuis une nouvelle IP, par exemple)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">UrlGeneratorInterface</span> <span class="token variable">$urlGenerator</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">urlGenerator</span> <span class="token operator">=</span> <span class="token variable">$urlGenerator</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authenticate</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">PassportInterface</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On r√©cup√®re les donn√©es envoy√©es via POST</span></span>
<span class="line">        <span class="token comment">// Si vous modifiez les noms des champs de votre formulaire,</span></span>
<span class="line">        <span class="token comment">// c&#39;est dans cette m√©thode qu&#39;il faudra faire les modifications n√©cessaires</span></span>
<span class="line">        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">request</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Security</span><span class="token operator">::</span><span class="token constant">LAST_USERNAME</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Passport</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">UserBadge</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token class-name">PasswordCredentials</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">request</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">[</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">CsrfTokenBadge</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;authenticate&#39;</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">request</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;_csrf_token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Cette m√©thode permet de d√©finir le comportement</span></span>
<span class="line">    <span class="token comment">// apr√®s une connexion r√©ussie.</span></span>
<span class="line">    <span class="token comment">// Par d√©faut, on redirige l&#39;utilisateur vers la page demand√©e au d√©part</span></span>
<span class="line">    <span class="token comment">// ou une page d√©finie par d√©faut (souvent, la page d&#39;accueil</span></span>
<span class="line">    <span class="token comment">// ou du compte)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">TokenInterface</span> <span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$firewallName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Par d√©faut, un utilisateur est renvoy√© vers la page o√π il souhaitait aller.</span></span>
<span class="line">        <span class="token comment">// Par exemple, s&#39;il avait demand√© la page /admin, sans √™tre connect√©, la page de connexion apparait. Une fois ses identifiants entr√©s et v√©rifi√©s, il sera renvoy√© vers cette page /admin, automatiquement</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$targetPath</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getTargetPath</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$firewallName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedirectResponse</span><span class="token punctuation">(</span><span class="token variable">$targetPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// For example:</span></span>
<span class="line">        <span class="token comment">//return new RedirectResponse($this-&gt;urlGenerator-&gt;generate(&#39;some_route&#39;));</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;TODO: provide a valid redirect inside &#39;</span><span class="token operator">.</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Pour r√©cup√©rer l&#39;url (le chemin) de la route de login</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getLoginUrl</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">urlGenerator</span><span class="token operator">-&gt;</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">LOGIN_ROUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>‚ö†Ô∏è Ne pas oublier de compl√©ter la m√©thode <code>onAuthenticationSuccess</code> de notre authenticator et lui donner une url pour rediriger l&#39;utilisateur.</p><h2 id="utiliser-les-droits" tabindex="-1"><a class="header-anchor" href="#utiliser-les-droits"><span>Utiliser les droits</span></a></h2><p>Nos <code>User</code> ont toujours au moins le <code>ROLE_USER</code> (voir leur m√©thode <code>getRoles()</code>), donc un utilisateur connect√© a au moins ce r√¥le. Voir √©galement la section <code>role_hierarchy</code>dans le <code>security.yaml</code> de ce chapitre.</p><h3 id="security-yaml" tabindex="-1"><a class="header-anchor" href="#security-yaml"><span>Security.yaml</span></a></h3><p>Avec Symfony, il y a de nombreux moyens de v√©rifier si un utilisateur peut r√©aliser une action. Le premier, dans le fichier <code>security.yaml</code>, permet de d√©finir une s√©curisation pour des plages d&#39;urls :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">    <span class="token key atrule">access_control</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># On demande √† l&#39;utilisateur d&#39;avoir le r√¥le ROLE_ADMIN, </span></span>
<span class="line">        <span class="token comment"># pour toutes les routes commen√ßant par /admin</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> ^/admin<span class="token punctuation">,</span> <span class="token key atrule">roles</span><span class="token punctuation">:</span> ROLE_ADMIN <span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cet exemple basique contient l&#39;essentiel, mais vous pouvez <a href="https://symfony.com/doc/current/security/access_control.html" target="_blank" rel="noopener noreferrer">aller beaucoup plus loin dans la pr√©cision</a>.</p><h3 id="isgranted-et-is-granted" tabindex="-1"><a class="header-anchor" href="#isgranted-et-is-granted"><span>IsGranted() et is_granted()</span></a></h3><p>Dans un contr√¥leur :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token comment">// src/Controller/AdminController.php</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">Sensio<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkExtraBundle<span class="token punctuation">\\</span>Configuration<span class="token punctuation">\\</span>IsGranted</span><span class="token punctuation">;</span></span>
<span class="line">   </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Pour acc√©der √† TOUTES les m√©thodes de ce contr√¥leur, il faut avoir le ROLE_ADMIN</span>
<span class="line">     */</span></span>
<span class="line">     <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">IsGranted</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;ROLE_ADMIN&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name-definition class-name">AdminController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       <span class="token doc-comment comment">/**</span>
<span class="line">        * Il faut avoir le r√¥le ROLE_ADMIN pour cette m√©thode seulement</span>
<span class="line">        */</span></span>
<span class="line">        <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">IsGranted</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;ROLE_ADMIN&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">adminDashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Fait exactement la m√™me chose que l&#39;annotation au-dessus.</span></span>
<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">denyAccessUnlessGranted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ROLE_ADMIN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans un template :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> is_granted<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>ROLE_ADMIN<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token comment">{# Seuls les admins peuvent voir ceci #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endif</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vous pouvez √©galement utiliser cette fonctionnalit√© dans un service, en injectant le service <code>Symfony\\Component\\Security\\Core\\Security</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Newsletter/NewsletterManager.php</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Exception<span class="token punctuation">\\</span>AccessDeniedException</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Security</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SalesReportManager</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$security</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Security</span> <span class="token variable">$security</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">security</span> <span class="token operator">=</span> <span class="token variable">$security</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNewsletter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$salesData</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">security</span><span class="token operator">-&gt;</span><span class="token function">isGranted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ROLE_SALES_ADMIN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token variable">$salesData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;top_secret_numbers&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recuperer-le-user-connecte" tabindex="-1"><a class="header-anchor" href="#recuperer-le-user-connecte"><span>R√©cup√©rer le <code>User</code> connect√©</span></a></h2><h3 id="dans-un-controleur" tabindex="-1"><a class="header-anchor" href="#dans-un-controleur"><span>Dans un contr√¥leur</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Renvoie votre utilisateur (ou null s&#39;il n&#39;est pas connect√©)</span></span>
<span class="line">    <span class="token comment">// Il est conseill√© d&#39;ajouter un commentaire pour que l&#39;IDE connaisse</span></span>
<span class="line">    <span class="token comment">// la classe exacte utilis√©e (par d√©faut, il voir un objet UserInterface, sans vos m√©thodes)</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">User</span> <span class="token parameter">$user</span> */</span>    </span>
<span class="line">    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dans-un-service" tabindex="-1"><a class="header-anchor" href="#dans-un-service"><span>Dans un service</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Service/ExampleService.php</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Security</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$security</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Security</span> <span class="token variable">$security</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Il vaut mieux √©viter d&#39;appeler le User directement</span></span>
<span class="line">        <span class="token comment">// dans le constructeur d&#39;un service.</span></span>
<span class="line">        <span class="token comment">// Il pourrait ne pas √™tre correctement initialis√© √† ce moment-l√†</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">security</span> <span class="token operator">=</span> <span class="token variable">$security</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Retourne le User (ou null si pas connect√©)</span></span>
<span class="line">        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">security</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dans-un-template" tabindex="-1"><a class="header-anchor" href="#dans-un-template"><span>Dans un template</span></a></h3><p><code>app.user</code> Retourne le User (ou null si pas connect√©)</p><h2 id="inscription" tabindex="-1"><a class="header-anchor" href="#inscription"><span>Inscription</span></a></h2>`,63)),s("p",null,[n[14]||(n[14]=a("Pour cr√©er un formulaire d'inscription, vous pouvez ")),e(i,{to:"/symfony/25-formulaires.html"},{default:t(()=>n[13]||(n[13]=[a("cr√©er un formulaire classique")])),_:1}),n[15]||(n[15]=a(" ou utiliser la commande : ")),n[16]||(n[16]=s("code",null,"php bin/console make:registration-form",-1)),n[17]||(n[17]=a(" (cette solution est recommand√©e, car plus simple üòâ )"))]),n[23]||(n[23]=s("h2",{id:"gerer-les-droits-avec-les-voters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#gerer-les-droits-avec-les-voters"},[s("span",null,"G√©rer les droits avec les Voters")])],-1)),n[24]||(n[24]=s("p",null,"Une fonctionnalit√© tr√®s avanc√©e, les Voters, vous permet de g√©rer les droits aussi finement que vous le souhaitez. Bien que les r√¥les permettent d√©j√† beaucoup de puissance, il arrive que des droits plus pr√©cis soient n√©cessaires. Par exemple, si vous cr√©ez un site pour une grosse entreprise, avec un service marketing et un autre commercial, il se peut que chaque service (et chaque utilisateur de ces services) aient acc√®s seulement √† des fonctionnalit√©s pr√©cises.",-1)),n[25]||(n[25]=s("p",null,[a("Pour ces cas, bien plus complexes, de gestion des ACL (Access Control Lists), je vous recommande tr√®s fortement "),s("a",{href:"https://symfony.com/doc/current/security/voters.html",target:"_blank",rel:"noopener noreferrer"},"la documentation Symfony sur les voters"),a(" et vous pouvez aller encore plus loin, avec "),s("a",{href:"https://symfony.com/doc/current/components/security/authorization.html",target:"_blank",rel:"noopener noreferrer"},"la documentation sur le processus d'autorisation de Symfony")],-1))])}const y=c(d,[["render",m],["__file","30-user.html.vue"]]),g=JSON.parse('{"path":"/symfony/30-user.html","title":"Connexion et s√©curisation","lang":"fr-FR","frontmatter":{"date":"2021-03-08T00:00:00.000Z"},"headers":[{"level":2,"title":"Pour r√©sumer","slug":"pour-resumer","link":"#pour-resumer","children":[]},{"level":2,"title":"Installation et pr√©paration","slug":"installation-et-preparation","link":"#installation-et-preparation","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Connecter un utilisateur","slug":"connecter-un-utilisateur","link":"#connecter-un-utilisateur","children":[]},{"level":2,"title":"Utiliser les droits","slug":"utiliser-les-droits","link":"#utiliser-les-droits","children":[{"level":3,"title":"Security.yaml","slug":"security-yaml","link":"#security-yaml","children":[]},{"level":3,"title":"IsGranted() et is_granted()","slug":"isgranted-et-is-granted","link":"#isgranted-et-is-granted","children":[]}]},{"level":2,"title":"R√©cup√©rer le User connect√©","slug":"recuperer-le-user-connecte","link":"#recuperer-le-user-connecte","children":[{"level":3,"title":"Dans un contr√¥leur","slug":"dans-un-controleur","link":"#dans-un-controleur","children":[]},{"level":3,"title":"Dans un service","slug":"dans-un-service","link":"#dans-un-service","children":[]},{"level":3,"title":"Dans un template","slug":"dans-un-template","link":"#dans-un-template","children":[]}]},{"level":2,"title":"Inscription","slug":"inscription","link":"#inscription","children":[]},{"level":2,"title":"G√©rer les droits avec les Voters","slug":"gerer-les-droits-avec-les-voters","link":"#gerer-les-droits-avec-les-voters","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/30-user.md"}');export{y as comp,g as data};
