import{aj as c,ak as r,am as s,an as a,ao as t,al as i,ap as p,aq as u,ar as l}from"./app-BkblVdII.js";const d={},m={class:"table-of-contents"};function g(k,n){const e=p("router-link"),o=p("Mermaid");return u(),r("div",null,[n[23]||(n[23]=s("h1",{id:"twig",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#twig"},[s("span",null,"Twig")])],-1)),s("nav",m,[s("ul",null,[s("li",null,[a(e,{to:"#pour-resumer"},{default:t(()=>n[0]||(n[0]=[l("Pour résumer")])),_:1})]),s("li",null,[a(e,{to:"#definition"},{default:t(()=>n[1]||(n[1]=[l("Définition")])),_:1})]),s("li",null,[a(e,{to:"#syntaxe"},{default:t(()=>n[2]||(n[2]=[l("Syntaxe")])),_:1})]),s("li",null,[a(e,{to:"#transmettre-des-parametres"},{default:t(()=>n[3]||(n[3]=[l("Transmettre des paramètres")])),_:1})]),s("li",null,[a(e,{to:"#les-tags"},{default:t(()=>n[4]||(n[4]=[l("Les tags")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#conditions"},{default:t(()=>n[5]||(n[5]=[l("Conditions")])),_:1})]),s("li",null,[a(e,{to:"#boucles"},{default:t(()=>n[6]||(n[6]=[l("Boucles")])),_:1})]),s("li",null,[a(e,{to:"#extends-et-block"},{default:t(()=>n[7]||(n[7]=[l("extends et block")])),_:1})]),s("li",null,[a(e,{to:"#include"},{default:t(()=>n[8]||(n[8]=[l("include")])),_:1})])])]),s("li",null,[a(e,{to:"#les-filtres"},{default:t(()=>n[9]||(n[9]=[l("Les filtres")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#date"},{default:t(()=>n[10]||(n[10]=[l("date")])),_:1})]),s("li",null,[a(e,{to:"#format-date"},{default:t(()=>n[11]||(n[11]=[l("format_date")])),_:1})]),s("li",null,[a(e,{to:"#length"},{default:t(()=>n[12]||(n[12]=[l("length")])),_:1})])])]),s("li",null,[a(e,{to:"#les-fonctions"},{default:t(()=>n[13]||(n[13]=[l("Les fonctions")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#asset"},{default:t(()=>n[14]||(n[14]=[l("asset()")])),_:1})]),s("li",null,[a(e,{to:"#path"},{default:t(()=>n[15]||(n[15]=[l("path()")])),_:1})]),s("li",null,[a(e,{to:"#url"},{default:t(()=>n[16]||(n[16]=[l("url()")])),_:1})]),s("li",null,[a(e,{to:"#is-granted"},{default:t(()=>n[17]||(n[17]=[l("is_granted()")])),_:1})]),s("li",null,[a(e,{to:"#include-fonction"},{default:t(()=>n[18]||(n[18]=[l("include() (fonction)")])),_:1})])])]),s("li",null,[a(e,{to:"#factoriser-le-code-avec-des-macros"},{default:t(()=>n[19]||(n[19]=[l("Factoriser le code avec des macros")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#personnaliser-les-pages-d-erreur"},{default:t(()=>n[20]||(n[20]=[l("Personnaliser les pages d'erreur")])),_:1})]),s("li",null,[a(e,{to:"#de-buguer"},{default:t(()=>n[21]||(n[21]=[l("Dé-buguer")])),_:1})])])]),s("li",null,[a(e,{to:"#exercice"},{default:t(()=>n[22]||(n[22]=[l("Exercice")])),_:1})])])]),n[24]||(n[24]=s("div",{style:{position:"relative","padding-bottom":"52.916666666666664%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/03f9d867c736446caddf9c542a070c3d",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[25]||(n[25]=i(`<h2 id="pour-resumer" tabindex="-1"><a class="header-anchor" href="#pour-resumer"><span>Pour résumer</span></a></h2><ul><li>Twig est un moteur de template, il permet d&#39;écrire du HTML plus confortablement, avec de nombreux outils dans nos fichiers <code>.twig</code><ul><li>l&#39;héritage de templates (un template peut hériter d&#39;un autre, et modifier des <code>block</code>)</li><li>les tags <code>{% %}</code> pour des calculs (dont <code>{% extends &#39;nomDUneAutreVue.twig&#39; %}</code>)</li><li>les moustaches <code>{{}}</code> pour afficher des éléments</li><li>les filtres <code>|unFiltre()</code></li><li>les fonctions <code>uneFonction()</code></li><li>des tests</li><li>les macros</li></ul></li><li>Pour utiliser Twig, il faut utiliser <code>$this-&gt;render(&#39;nomDuTemplate.twig&#39;, [])</code> dans un controller ou appeler le service de rendu de Twig</li></ul><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Définition</span></a></h2><p><a href="https://twig.symfony.com/doc/" target="_blank" rel="noopener noreferrer">La documentation officielle de Twig</a> (qui présente également séparément ce qui vient de Twig ou qui est présent uniquement pour Symfony)</p><p>Twig est un moteur de rendu (avec Symfony, vous pouvez tout aussi bien continuer à utiliser PHP, comme nous l&#39;avons vu jusqu&#39;à maintenant) dont le but est de vous simplifier la vie dans la gestion de votre HTML.</p><h2 id="syntaxe" tabindex="-1"><a class="header-anchor" href="#syntaxe"><span>Syntaxe</span></a></h2><p>Twig a sa propre syntaxe, basée sur 5 éléments :</p><ul><li>les tags <code>{% unExempleDeTag %}{% endunExempleDeTag %}</code> qui vont vous permettre de faire divers calculs</li><li>les moustaches (appellation non-officielle) <code>{{}}</code> qui sont là pour afficher du contenu (le contenu d&#39;une variable, le retour d&#39;une fonction ou d&#39;un filtre, etc.)</li><li>les filtres <code>uneValeurOuVariable | unFiltre(unParamètreDuFiltre)</code> sont des fonctions dont le premier paramètre se trouve avant le <code>|</code> et les suivants dans les parenthèses</li><li>les fonctions <code>uneFonction(unParamètreDeLaFonction, unSecondParamètre)</code> plus classiques</li><li>les tests <code>if uneValeur is unTest(unParamètreDuTest)</code> vont servir dans des conditions (ainsi que les divers opérateurs, que je vous invite à aller voir par vous-même dans la documentation)</li></ul><h2 id="transmettre-des-parametres" tabindex="-1"><a class="header-anchor" href="#transmettre-des-parametres"><span>Transmettre des paramètres</span></a></h2><p>Depuis un controller, vous pouvez transmettre un tableau de paramètres à la vue.</p><p>L&#39;index dans ce tableau correspondra au nom de la variable dans le fichier Twig, la valeur à sa valeur.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$listeDesArticles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/index.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;page&#39;</span>     <span class="token operator">=&gt;</span> <span class="token variable">$page</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Ici, la vue Twig aura un paramètre articles,</span></span>
<span class="line">        <span class="token comment">// indépendant du nom de la variable dans le controller</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;articles&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$listeDesArticles</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="les-tags" tabindex="-1"><a class="header-anchor" href="#les-tags"><span>Les tags</span></a></h2><p>Les tags servent à faire des calculs dans nos vues. On peut les voir comme un équivalent de la balise <code>&lt;?php ?&gt;</code> en PHP classique.</p><h3 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions"><span>Conditions</span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/tags/if.html" target="_blank" rel="noopener noreferrer">documentation pour le tag if</a></p><p>Un exemple de condition :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> condition <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Du contenu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">elseif</span> autreCondition <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Un contenu alternatif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">else</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Un autre contenu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endif</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour écrire les conditions, vous pouvez utiliser les opérations suivantes :</p><ul><li><a href="https://twig.symfony.com/doc/3.x/templates.html#comparisons" target="_blank" rel="noopener noreferrer">Les opérateurs classiques</a> <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;=</code> pour comparer des éléments,</li><li>mais aussi <code>starts with</code>, <code>ends with</code>, <code>has some</code>, <code>has every</code>, <code>matches</code></li></ul><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> <span class="token string"><span class="token punctuation">&#39;</span>Rémi<span class="token punctuation">&#39;</span></span> <span class="token operator">starts with</span> <span class="token string"><span class="token punctuation">&#39;</span>R<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> <span class="token string"><span class="token punctuation">&#39;</span>Rémi<span class="token punctuation">&#39;</span></span> end with <span class="token string"><span class="token punctuation">&#39;</span>i<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> phone <span class="token operator">matches</span> <span class="token string"><span class="token punctuation">&#39;</span>/^[\\\\d\\\\.]+$/<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">set</span> sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> sizes has every v <span class="token operator">=</span><span class="token operator">&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">38</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# false #}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> sizes has some v <span class="token operator">=</span><span class="token operator">&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">38</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# true #}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>in</code> pour vérifier si un élément est dans un tableau <code>{% if 1 in [1, 2, 3] %}</code></li><li><code>is</code> en conjonction avec d&#39;autres tests (<code>empty</code>, <code>defined</code>, etc.) :</li></ul><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"> <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> sizes <span class="token operator">is</span> empty <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"> <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> sizes <span class="token operator">is</span> defined <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>same as</code> est équivalent au <code>===</code> de PHP</li></ul><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"> <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> test <span class="token operator">is</span> same as<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="boucles" tabindex="-1"><a class="header-anchor" href="#boucles"><span>Boucles</span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/tags/for.html" target="_blank" rel="noopener noreferrer">documentation du tag for</a></p><p>Avec Twig, il n&#39;existe qu&#39;un type de boucle : <code>for</code>.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">for</span> i <span class="token operator">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> i <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour récupérer les clés et les valeurs du tableau :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">for</span> key<span class="token punctuation">,</span> i <span class="token operator">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> key <span class="token delimiter punctuation">}}</span></span> : <span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> i <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="la-variable-loop" tabindex="-1"><a class="header-anchor" href="#la-variable-loop"><span>La variable <code>loop</code></span></a></h4><p>Dans les boucles, une variable <code>loop</code> est définie (et uniquement dans la boucle) et contient un ensemble d&#39;informations :</p><ul><li><code>loop.index</code> l&#39;itération en cours de la boucle (commençant par 1)</li><li><code>loop.index0</code> l&#39;itération en cours de la boucle (commençant par 0)</li><li><code>loop.revindex</code> le nombre d&#39;itérations depuis la fin de la boucle (commençant par 1)</li><li><code>loop.revindex0</code> le nombre d&#39;itérations depuis la fin de la boucle (commençant par 0)</li><li><code>loop.first</code> true si c&#39;est la première itération</li><li><code>loop.last</code> true si c&#39;est la dernière itération</li><li><code>loop.length</code> le nombre d&#39;itérations dans la boucle</li><li><code>loop.parent</code> le contexte parent</li></ul><h3 id="extends-et-block" tabindex="-1"><a class="header-anchor" href="#extends-et-block"><span><code>extends</code> et <code>block</code></span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/tags/extends.html" target="_blank" rel="noopener noreferrer">documentation de extends</a></p><p>Ces deux tags permettent de créer un héritage entre deux vues/templates. Il convient alors de voir nos fichiers <code>twig</code> comme des objets, avec une vue parente et des enfants potentiels. Les blocs sont ainsi équivalent aux propriétés que l&#39;on peut surcharger dans les enfants.</p><p>Cela permet d&#39;avoir, dans un premier fichier :</p><ul><li>Une structure HTML complète (avec le doctype, <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, etc.)</li><li>Des <code>block</code>, permettant de créer des emplacements qui pourront être modifiés (surchargés) par les vues enfants.</li></ul><p>Un exemple <code>templates/base.html.twig</code> :</p><div class="language-Twig line-numbers-mode" data-highlighter="prismjs" data-ext="Twig" data-title="Twig"><pre><code><span class="line">&lt;!DOCTYPE html&gt;</span>
<span class="line">&lt;html dir=&quot;ltr&quot; lang=&quot;fr&quot;&gt;</span>
<span class="line">    &lt;body&gt;</span>
<span class="line">        {# Ici, nous définissons un ensemble de blocs, qui seront modifiables dans les templates qui héritent de templates/base.html.twig #}</span>
<span class="line">        {% block bodyHeader %}</span>
<span class="line">            Une valeur par défaut de bodyHeader</span>
<span class="line">        {% endblock %}</span>
<span class="line">        </span>
<span class="line">        {% block body %}{% endblock %}</span>
<span class="line">        </span>
<span class="line">        {% block bodyFooter %}</span>
<span class="line">            Une valeur par défaut de bodyFooter</span>
<span class="line">        {% endblock %}</span>
<span class="line">        </span>
<span class="line">        {% block javascripts %}{% endblock %}</span>
<span class="line">    &lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans un second fichier :</p><ul><li>Une extension de notre vue de base, pour <strong>récupérer toute la structure HTML</strong>, grâce au tag <code>extends</code></li><li>Un appel des différents blocs que l&#39;on <strong>souhaite modifier</strong></li></ul><p>Un exemple, <code>templates/test/test.html.twig</code> :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">extends</span> <span class="token string"><span class="token punctuation">&#39;</span>base.html.twig<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">block</span> bodyFooter <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">  Du contenu dans le block bodyFooter</span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endblock</span> bodyFooter <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">block</span> body <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">  Du contenu dans le block body</span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endblock</span> body <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ Il est à noter que, dans ce second fichier, on ne surcharge pas le bloc <code>bodyHeader</code>. C&#39;est donc le contenu présent dans <code>base.html.twig</code> qui sera affiché (car non surchargé).</p><p>On peut représenter cet héritage avec ce schéma :</p>`,51)),a(o,{id:"mermaid-283",code:"eJxLzkksLnbJTEwvSszlUgCCpMTiVAWbGl1dhZLU4hKwEFgNRKIaLAAC2kn5KZUeqYkpqUWoYqg8t/z8EqiKWiTDQGajG4ZHIwDhnivC"}),n[26]||(n[26]=i(`<h3 id="include" tabindex="-1"><a class="header-anchor" href="#include"><span>include</span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/tags/include.html" target="_blank" rel="noopener noreferrer">documentation du tag include</a></p><p>⚠️ Il existe également une <a href="https://twig.symfony.com/doc/3.x/functions/include.html" target="_blank" rel="noopener noreferrer">fonction include</a>, qui est recommandée et qui a le même fonctionnement.</p><p>Ce tag permet d&#39;inclure un template dans un autre. Son fonctionnement est assez similaire au <code>include</code> ou au <code>require</code> de PHP.</p><p>Son utilisation de base (le fichier <code>test.html.twig</code> est à la racine du dossier templates) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">include</span> <span class="token string"><span class="token punctuation">&#39;</span>test.html.twig<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Par défaut, include récupère les variables définies dans le template qui inclut. On peut changer ce comportement :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">set</span> uneVariable <span class="token operator">=</span> <span class="token string"><span class="token punctuation">&#39;</span>truc<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">include</span> <span class="token string"><span class="token punctuation">&#39;</span>test.html.twig<span class="token punctuation">&#39;</span></span> with <span class="token punctuation">{</span> <span class="token string"><span class="token punctuation">&#39;</span>foo<span class="token punctuation">&#39;</span></span><span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">}</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Le mot-clé <code>with</code> indique à <code>include</code> qu&#39;on va créer des variables qu&#39;il devrait utiliser</li><li><code>{ &#39;foo&#39;: &#39;bar&#39; }</code> est un tableau associatif, dont la clé <code>foo</code> va être le nom d&#39;une variable disponible dans le fichier inclut, et <code>&#39;bar&#39;</code> sa valeur.</li><li>Dans le cas, la variable <code>uneVariable</code> sera également disponible dans <code>test.html.twig</code>, car déclarée avant le <code>include</code></li></ul><p>Pour aller plus loin, il est possible de ne transmettre <strong>que les variables que l&#39;on déclare</strong> au template inclut, grâce au mot-clé <code>only</code> :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">set</span> uneVariable <span class="token operator">=</span> <span class="token string"><span class="token punctuation">&#39;</span>truc<span class="token punctuation">&#39;</span></span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">include</span> <span class="token string"><span class="token punctuation">&#39;</span>test.html.twig<span class="token punctuation">&#39;</span></span> with <span class="token punctuation">{</span> <span class="token string"><span class="token punctuation">&#39;</span>foo<span class="token punctuation">&#39;</span></span><span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">}</span> only <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Le mot-clé <code>with</code> indique à <code>include</code> qu&#39;on va créer des variables qu&#39;il devrait utiliser</li><li><code>{ &#39;foo&#39;: &#39;bar&#39; }</code> est un tableau associatif, dont la clé <code>foo</code> va être le nom d&#39;une variable disponible dans le fichier inclut, et <code>&#39;bar&#39;</code> sa valeur.</li><li>Le mot-clé <code>only</code> indique qu&#39;il ne faut rien transmettre d&#39;autre au template inclut (la variable <code>uneVariable</code>, définie avant le <code>include</code> ne sera donc pas présente dans <code>test.html.twig</code>)</li></ul><h2 id="les-filtres" tabindex="-1"><a class="header-anchor" href="#les-filtres"><span>Les filtres</span></a></h2><p>Les filtres sont des fonctions particulières, s&#39;appliquant sur des chaines de caractères (mais aussi des objets ou des tableaux). On l&#39;ajoute après la valeur que l&#39;on souhaite transformer et il est séparé de ce dernier par une barre verticale <code>|</code>.</p><p>Un exemple avec le filtre <code>capitalize</code> (qui met en majuscule le premier caractère de chaque mot) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>mon premier filtre<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>capitalize <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# Affiche &#39;Mon Premier Filtre&#39; #}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span><code>date</code></span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/filters/date.html" target="_blank" rel="noopener noreferrer">documentation de date</a></p><p>Lorsque vous avez un objet <code>DateTime</code> à afficher, il faut donner un format d&#39;affichage (sous peine d&#39;avoir une erreur &quot;object of type DateTime could not be converted to string&quot;). Le filtre <code>date</code> permet entre autre de régler ce souci.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# Depuis un objet #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> article<span class="token punctuation">.</span>createdAt<span class="token operator">|</span>date<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&quot;</span>d/m/Y<span class="token punctuation">&quot;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# Depuis une chaine de caractères #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>now<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>date<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&quot;</span>d/m/Y<span class="token punctuation">&quot;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="format-date" tabindex="-1"><a class="header-anchor" href="#format-date"><span><code>format_date</code></span></a></h3><p>la <a href="https://twig.symfony.com/doc/3.x/filters/format_datetime.html" target="_blank" rel="noopener noreferrer">documentation de format_datetime</a></p><p>Ce filtre (pourtant bien pratique) n&#39;est pas fourni par défaut dans Symfony. Il nous faut installer quelques outils supplémentaires :</p><p><code>composer require twig/intl-extra</code><code>composer require twig/extra-bundle</code></p><p>Il existe également les variantes</p><ul><li><a href="https://twig.symfony.com/doc/3.x/filters/format_date.html" target="_blank" rel="noopener noreferrer">format_date</a></li><li><a href="https://twig.symfony.com/doc/3.x/filters/format_time.html" target="_blank" rel="noopener noreferrer">format_time</a></li></ul><p>Ce filtre permet de formater l&#39;affichage d&#39;une date (depuis un objet DateTime ou une chaine de caractères) en fonction d&#39;une langue et d&#39;utiliser des formats standards.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>2019-08-07 23:39:12<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>format_datetime<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>full<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token string"><span class="token punctuation">&#39;</span>full<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> locale<span class="token operator">=</span><span class="token string"><span class="token punctuation">&#39;</span>fr<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# Affiche : mercredi 7 août 2019 23:39:12 UTC #}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="length" tabindex="-1"><a class="header-anchor" href="#length"><span><code>length</code></span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/filters/length.html" target="_blank" rel="noopener noreferrer">documentation de length</a></p><p>Ce filtre permet de récupérer la longueur d&#39;une chaine de caractères, le nombre d&#39;éléments dans un tableau.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>Une chaine de caractères<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>length <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# Affiche : 24 #}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">|</span>length <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="les-fonctions" tabindex="-1"><a class="header-anchor" href="#les-fonctions"><span>Les fonctions</span></a></h2><h3 id="asset" tabindex="-1"><a class="header-anchor" href="#asset"><span><code>asset()</code></span></a></h3><p><code>asset()</code> permet de récupérer un fichier (css, image, javascript, etc.) dans le dossier <code>public</code> ou l&#39;un de ses sous-dossiers</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# Ici, on charge l&#39;image qui se trouve dans le dossier public/chemin/vers/une/image.jpg. L&#39;avantage est que nous n&#39;avons plus à gérer le dossier dans lequel nous nous trouvons, Symfony le fait pour nous #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> asset<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>/chemin/vers/une/image.jpg<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span><code>path()</code></span></a></h3><p><code>path()</code> permet d&#39;avoir l&#39;URi vers une de vos routes</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# path prend en premier paramètre le nom d&#39;une route, et en second un &quot;objet&quot; avec les paramètres de la route #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> path<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>blog_show<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> slug<span class="token punctuation">:</span> article<span class="token punctuation">.</span>slug <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span><code>url()</code></span></a></h3><p><code>url()</code> permet d&#39;avoir une url (complète, avec le http(s), le nom de domaine, etc.)</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# url prend en premier paramètre le nom d&#39;une route, et en second un &quot;objet&quot; avec les paramètres de la route #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> url<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>blog_show<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> slug<span class="token punctuation">:</span> article<span class="token punctuation">.</span>slug <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="is-granted" tabindex="-1"><a class="header-anchor" href="#is-granted"><span><code>is_granted()</code></span></a></h3><p><a href="https://symfony.com/doc/current/security.html#security-template" target="_blank" rel="noopener noreferrer"><code>is_granted()</code> permet de vérifier si l&#39;utilisateur connecté a des droits</a>.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# Si l&#39;utilisateur connecté a le rôle d&#39;administrateur, on affiche un bouton de suppression #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">if</span> is_granted<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>ROLE_ADMIN<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endif</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="include-fonction" tabindex="-1"><a class="header-anchor" href="#include-fonction"><span><code>include()</code> (fonction)</span></a></h3><p>La <a href="https://twig.symfony.com/doc/3.x/functions/include.html" target="_blank" rel="noopener noreferrer">documentation de la fonction include</a>.</p><p>Il s&#39;agit d&#39;une autre manière d&#39;écrire les includes, sous forme de fonction, plutôt que de tag. Cette approche est recommandée par Symfony, car plus souple.</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# On inclut un template (qui se trouve à la racine du dossier templates) #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> include<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>template.html.twig<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# On donne un paramètre &quot;foo&quot; à notre template (qui contient la valeur &quot;bar&quot;) #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> include<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>template.html.twig<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# On s&#39;assure que notre template ne reçoive que la variable foo (et les variables définies globalement) #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> include<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>template.html.twig<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> with_context <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="factoriser-le-code-avec-des-macros" tabindex="-1"><a class="header-anchor" href="#factoriser-le-code-avec-des-macros"><span>Factoriser le code avec des macros</span></a></h2><p><a href="https://twig.symfony.com/doc/3.x/tags/macro.html" target="_blank" rel="noopener noreferrer">Documentation sur les macros</a></p><p>Les macros sont des fonctions, écrites en Twig, permettant de simplifier l&#39;affichage de fragments de code.</p><p>L&#39;exemple suivant est directement récupéré de la documentation.</p><p>Une déclaration de macro (fichier <code>forms.html.twig</code> par exemple) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# On déclare la macro en tant que tag, on lui donne un nom et des paramètres #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">macro</span> input<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string"><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line">    <span class="token twig language-twig"><span class="token comment">{# Le contenu va être un twig classique, utilisant les paramètres de la macro uniquement #}</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> type <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> name <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> value<span class="token operator">|</span>e <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> size <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">endmacro</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour appeler une macro, il faut inclure son fichier dans le fichier où l&#39;on souhaite l&#39;appeler (un exemple dans <code>index.html.twig</code>, dans le même dossier) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token comment">{# On importe toutes les macros du fichier et on les met dans une variable forms #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">import</span> <span class="token string"><span class="token punctuation">&quot;</span>forms.html<span class="token punctuation">&quot;</span></span> as forms <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# ... #}</span></span></span>
<span class="line"></span>
<span class="line"><span class="token twig language-twig"><span class="token comment">{# On appelle notre macro, depuis la variable forms (la macro fonctionne ici comme une méthode de forms) #}</span></span></span>
<span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{%</span> <span class="token tag-name keyword">forms</span><span class="token punctuation">.</span>input<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>unNom<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token string"><span class="token punctuation">&#39;</span>uneValeur<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">%}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Il y a de nombreuses manières d&#39;appeler une macro, je vous conseille de vous référer à <a href="https://twig.symfony.com/doc/3.x/tags/macro.html" target="_blank" rel="noopener noreferrer">la documentation sur les macros</a> pour plus d&#39;informations.</p><h3 id="personnaliser-les-pages-d-erreur" tabindex="-1"><a class="header-anchor" href="#personnaliser-les-pages-d-erreur"><span>Personnaliser les pages d&#39;erreur</span></a></h3><p><a href="https://symfony.com/doc/current/controller/error_pages.html" target="_blank" rel="noopener noreferrer">La documentation officielle sur le sujet</a></p><p>Pendant le développement (mode <code>dev</code> de Symfony), les pages d&#39;erreur sont gérées par Symfony et vous affichent les détails de l&#39;erreur. Bien pratique pour le développement, mais loin de la réalité en production.</p><p>Vous pouvez tester le mode <code>prod</code> en modifiant la variable <code>APP_ENV</code> de votre <code>.env</code>. Vous verrez ainsi le site comme vous le verriez sur un serveur, y compris les erreurs.</p><p>Il est plus simple de le tester en mode <code>dev</code> (changer de mode peut être pénible, surtout pour des questions de cache), et Symfony a tout prévu :</p><p>Créez un fichier <code>config/routes/dev/framework.yaml</code> avec le contenu suivant :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">_errors</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token string">&#39;@FrameworkBundle/Resources/config/routing/errors.xml&#39;</span></span>
<span class="line">    <span class="token key atrule">prefix</span><span class="token punctuation">:</span>   /_error</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour tester, aller sur <code>_error/{statusCode}</code> où <code>{statusCode}</code> est le numéro d&#39;erreur de vous voulez tester (404, 500, etc.).</p><p>Pour personnaliser les vues, nous pouvons créer des fichiers comme ci-dessous :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">templates/</span>
<span class="line">└─ bundles/</span>
<span class="line">   └─ TwigBundle/</span>
<span class="line">      └─ Exception/</span>
<span class="line">         ├─ error404.html.twig</span>
<span class="line">         ├─ error403.html.twig</span>
<span class="line">         └─ error.html.twig      # Toutes les autres erreurs HTML (dont les 500)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notez que ce rangement nous permet de <a href="https://symfony.com/doc/current/bundles/override.html#override-templates" target="_blank" rel="noopener noreferrer">surcharger/modifier les templates de n&#39;importe quel bundle</a>.</p><h3 id="de-buguer" tabindex="-1"><a class="header-anchor" href="#de-buguer"><span>Dé-buguer</span></a></h3><p>Dans les vues Twig, vous disposez d&#39;une fonction <code>dump()</code> qui vous permet d&#39;afficher le contenu d&#39;une variable et d&#39;en voir le détail (un peu comme un <code>var_dump</code>, mais plus complet et mieux mis en forme). Utilisée sans paramètre, la fonction <code>dump()</code> affiche toutes es variables disponibles dans la vue.</p><p>Il existe également une commande pour vérifier la validité de vos vues Twig</p><h2 id="exercice" tabindex="-1"><a class="header-anchor" href="#exercice"><span>Exercice</span></a></h2><p>Maintenant, il est temps de passer à l&#39;affichage ! Même si nous n&#39;allons pas utiliser des données réelles, nous allons préparer l&#39;affichage général de nos vues.</p><p>Toutes ces vues vont étendre <code>base.html.twig</code>.</p><ul><li>Modifier <code>base.html.twig</code> pour : <ul><li>inclure Bootstrap (css et js)</li><li>Créer une navbar avec des liens vers <ul><li>La page d&#39;accueil</li><li>La liste des articles</li></ul></li></ul></li><li>Pour la page de liste des articles, nous allons créer une liste d&#39;articles fictifs, identiques : <ul><li>Créer un fichier <code>_article.html.twig</code> que l&#39;on va inclure dans la liste, qui affichera : <ul><li>Un titre</li><li>Un nom d&#39;utilisateur</li><li>Un texte (Lorem Ipsum par exemple)</li><li>Une date (date du jour, au format français)</li><li>Un lien vers l&#39;article (avec un id arbitraire, comme <code>12</code>)</li></ul></li><li>Inclure ce fichier en 5 exemplaires, grâce à une boucle <code>for</code></li></ul></li><li>Pour la page d&#39;un article : <ul><li>Créer un contenu, comme précédemment, mais avec un texte plus long et sans le lien. Est-il nécessaire de créer un nouveau fichier pour ça ? Peut-on utiliser le fichier créé auparavant ?</li></ul></li><li>Pour la page d&#39;accueil : <ul><li>Ajouter des liens vers des articles, dont les identifiants vont de 32 à 64</li></ul></li></ul><p>Nous allons ignorer les pages de création et modification des articles pour le moment.</p>`,77))])}const b=c(d,[["render",g],["__file","22-twig.html.vue"]]),h=JSON.parse(`{"path":"/symfony/22-twig.html","title":"Twig","lang":"fr-FR","frontmatter":{"date":"2021-02-22T00:00:00.000Z"},"headers":[{"level":2,"title":"Pour résumer","slug":"pour-resumer","link":"#pour-resumer","children":[]},{"level":2,"title":"Définition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Syntaxe","slug":"syntaxe","link":"#syntaxe","children":[]},{"level":2,"title":"Transmettre des paramètres","slug":"transmettre-des-parametres","link":"#transmettre-des-parametres","children":[]},{"level":2,"title":"Les tags","slug":"les-tags","link":"#les-tags","children":[{"level":3,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":3,"title":"Boucles","slug":"boucles","link":"#boucles","children":[]},{"level":3,"title":"extends et block","slug":"extends-et-block","link":"#extends-et-block","children":[]},{"level":3,"title":"include","slug":"include","link":"#include","children":[]}]},{"level":2,"title":"Les filtres","slug":"les-filtres","link":"#les-filtres","children":[{"level":3,"title":"date","slug":"date","link":"#date","children":[]},{"level":3,"title":"format_date","slug":"format-date","link":"#format-date","children":[]},{"level":3,"title":"length","slug":"length","link":"#length","children":[]}]},{"level":2,"title":"Les fonctions","slug":"les-fonctions","link":"#les-fonctions","children":[{"level":3,"title":"asset()","slug":"asset","link":"#asset","children":[]},{"level":3,"title":"path()","slug":"path","link":"#path","children":[]},{"level":3,"title":"url()","slug":"url","link":"#url","children":[]},{"level":3,"title":"is_granted()","slug":"is-granted","link":"#is-granted","children":[]},{"level":3,"title":"include() (fonction)","slug":"include-fonction","link":"#include-fonction","children":[]}]},{"level":2,"title":"Factoriser le code avec des macros","slug":"factoriser-le-code-avec-des-macros","link":"#factoriser-le-code-avec-des-macros","children":[{"level":3,"title":"Personnaliser les pages d'erreur","slug":"personnaliser-les-pages-d-erreur","link":"#personnaliser-les-pages-d-erreur","children":[]},{"level":3,"title":"Dé-buguer","slug":"de-buguer","link":"#de-buguer","children":[]}]},{"level":2,"title":"Exercice","slug":"exercice","link":"#exercice","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/22-twig.md"}`);export{b as comp,h as data};
