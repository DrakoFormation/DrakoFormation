import{aj as t,ak as l,al as a,am as e,ar as n,an as o,ao as c,ap as i,aq as r}from"./app-BkblVdII.js";const u={};function d(k,s){const p=i("RouteLink");return r(),l("div",null,[s[5]||(s[5]=a(`<h1 id="programmation-orientee-objet" tabindex="-1"><a class="header-anchor" href="#programmation-orientee-objet"><span>Programmation orientée objet</span></a></h1><p>Jusqu&#39;ici, nous avons codé nos programmes de manière procédurale. C&#39;est-à-dire que le code se trouve dans l&#39;ordre de son exécution (le code est exécuté ligne par ligne). En POO (Programmation Orientée Objet), tout s&#39;articule autour de la notions d&#39;objets : des éléments indépendants ayant leurs caractéristiques (appelées propriétés) et leurs fonctionnalités ( appelées méthodes).</p><h2 id="pourquoi-la-poo" tabindex="-1"><a class="header-anchor" href="#pourquoi-la-poo"><span>Pourquoi la POO ?</span></a></h2><p>La programmation orientée objet permet plusieurs choses :</p><ul><li>une plus grande flexibilité du code (modifier une classe permet de modifier le comportement de tous les objets d&#39;un coup)</li><li>une meilleure lisibilité (un objet regroupe toutes les caractéristiques et les fonctionnalités dont il a besoin)</li><li>une meilleure maintenabilité (pas besoin de copier-coller des éléments à plusieurs endroits du code et la logique est plus facile à retrouver)</li></ul><h2 id="mise-en-pratique" tabindex="-1"><a class="header-anchor" href="#mise-en-pratique"><span>Mise en pratique</span></a></h2><p>Dans certains exercices de ce cours, j&#39;ai utilisé ce qu&#39;on appelle des objets littéraux. Un exemple d&#39;<strong>objet littéral</strong>, qui va nous servir d&#39;exemple pour la suite :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">hp</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// On a ici une propriété de notre objet</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Dreeckan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">strength</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">defense</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">isAlive</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Et ici une méthode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creer-une-classe-et-des-objets" tabindex="-1"><a class="header-anchor" href="#creer-une-classe-et-des-objets"><span>Créer une classe et des objets</span></a></h3><p>Maintenant, si nous voulons créer d&#39;autres objets <code>Player</code>, basés sur le même modèle, nous pouvons créer une <strong>classe</strong>, un <strong>plan de fabrication</strong> pour des objets. Pour définir cette classe, commençons par l&#39;essentiel : son nom. On l&#39;écrit en <code>PascalCase</code> (c’est-à-dire sans espace entre les mots, avec une majuscule à chaque mot).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Définition d&#39;une classe</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ici, nous ajouterons nos propriétés et méthodes</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Une fois que nous avons notre classe, nous pouvons créer des objets (on parle d&#39;instances de la classe <code>Player</code>) à partir de ce plan de fabrication. Pour le faire, nous allons utiliser le mot-clé <code>new</code> :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructeur-et-proprietes" tabindex="-1"><a class="header-anchor" href="#constructeur-et-proprietes"><span>Constructeur et propriétés</span></a></h3><p>Les propriétés sont les caractéristiques de notre objet. Dans le cas de notre <code>Player</code>, cela peut être :</p><ul><li>ses points de vie,</li><li>son nom,</li><li>sa force,</li><li>sa défense,</li><li>toute autre caractéristique qui nous permettrait de le définir pour notre programme...</li></ul><p>Nous pouvons définir ce qu&#39;il se passe lors de l&#39;appel de ce <code>new</code> et, si on le souhaite, lui donner des paramètres. Pour cela, nous ajoutons une méthode spéciale, <strong>le constructeur</strong>. Cette méthode est appelée <strong>automatiquement</strong> dès que l&#39;on crée un nouvel objet avec <code>new</code>.</p><p>Attention, il ne faut pas confondre une propriété et une variable. Une propriété est toujours précédée d&#39;un objet (ou de <code>this</code>) et ne peut être appelée sans.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Un exemple de constructeur pour notre objet Player, sans paramètres</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Ici this équivaut à demande l&#39;objet Player en cours (celui qu&#39;on a créé/instancié avec new)</span></span>
<span class="line">        <span class="token comment">// On définit des propriétés et des valeurs par défaut</span></span>
<span class="line">        <span class="token comment">// et on peut alors donner n&#39;importe quelle valeurs à nos propriétés</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>strength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>defense <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si on fait un new, sans paramètre, les propriétés sont bien définies et contiennent les valeurs demandées</span></span>
<span class="line"><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// On peut accéder à une propriété de la même manière que nous l&#39;avons vu avec les objets littéraux</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche Player {name: &quot;&quot;, hp: 100, strength:5, defense: 10}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On peut aussi accéder aux propriétés ou les modifier</span></span>
<span class="line">player1<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player1<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 110</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour pouvoir créer un objet avec des valeurs, on donne des paramètres au constructeur :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Un exemple de constructeur pour notre objet Player, avec des paramètres</span></span>
<span class="line"><span class="token comment">// Les 3 derniers ont des valeurs par défaut </span></span>
<span class="line"><span class="token comment">// (si on ne leur donne pas de valeur, ils prennent leur valeur par défaut)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> hp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> strength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> defense <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Attention à ne pas confondre this.name et name</span></span>
<span class="line">        <span class="token comment">// La première est une propriété de l&#39;objet Player qu&#39;on instancie</span></span>
<span class="line">        <span class="token comment">// La seconde est une variable : le paramètre du constructeur</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>strength <span class="token operator">=</span> strength<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>defense <span class="token operator">=</span> defense<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si on fait un new, sans paramètre, les propriétés sont bien définies et contiennent les valeurs demandées</span></span>
<span class="line"><span class="token keyword">let</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&#39;Test&#39;</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;Test&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player2<span class="token punctuation">.</span>strength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 11</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="les-methodes" tabindex="-1"><a class="header-anchor" href="#les-methodes"><span>Les méthodes</span></a></h3><p>Les méthodes correspondent aux capacités ou aux actions que peut réaliser notre objet, c&#39;est une fonction, dans une classe, même si elle ne porte pas le mot-clé <code>function</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> hp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> strength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> defense <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>strength <span class="token operator">=</span> strength<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>defense <span class="token operator">=</span> defense<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Notre Player sait s&#39;il est en vie. C&#39;est utile à notre programme ;) .</span></span>
<span class="line">    <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Une méthode peut également avoir des paramètres, </span></span>
<span class="line">    <span class="token comment">// comme n&#39;importe quelle fonction</span></span>
<span class="line">    <span class="token function">isStrongerThan</span><span class="token punctuation">(</span><span class="token parameter">strengthToCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Strength <span class="token operator">&gt;</span> strengthToCompare<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Une méthode nous permet de réaliser divers calculs,</span></span>
<span class="line">    <span class="token comment">// et contenir la logique de notre objet.</span></span>
<span class="line">    <span class="token comment">// Ici, on peut dire ce qu&#39;il se passe quand notre joueur prend un coup</span></span>
<span class="line">    <span class="token function">takeHit</span><span class="token punctuation">(</span><span class="token parameter">strength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> damage <span class="token operator">=</span> strength <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defense<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>damage <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">-=</span> damage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> damage<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">attack</span><span class="token punctuation">(</span><span class="token parameter">otherPlayer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On peut utiliser les méthodes d&#39;un autre objet Player, </span></span>
<span class="line">        <span class="token comment">// s&#39;il est passé en paramètre</span></span>
<span class="line">        <span class="token keyword">let</span> damageDealt <span class="token operator">=</span> otherPlayer<span class="token punctuation">.</span><span class="token function">takeHit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>strength<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> damageDealt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un petit exemple de programme, utilisant notre objet <code>Player</code> précédent :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Un premier joueur, avec toutes les valeurs par défaut</span></span>
<span class="line"><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&#39;Joueur1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Un second joueur, dont on définit les propriétés à l&#39;aide du constructeur</span></span>
<span class="line"><span class="token keyword">let</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">&#39;Joueur2&#39;</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> damage <span class="token operator">=</span> player1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; inflige &#39;</span> <span class="token operator">+</span> damage <span class="token operator">+</span> <span class="token string">&#39; points de dégats à &#39;</span> <span class="token operator">+</span> player2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setters" tabindex="-1"><a class="header-anchor" href="#setters"><span>Setters</span></a></h4><p>Dans beaucoup de langages de programmation, vous entendrez parler de méthodes dites <code>setters</code>. Il s&#39;agit de méthodes permettant de manipuler une propriété d&#39;un objet. Idéalement, pour mettre à jour une propriété, il faut passer par un <code>setter</code>. L&#39;intérêt est de pouvoir appliquer des traitements (mettre du texte en majuscule, modifier une autre propriété en même temps, etc.) dès que l&#39;on souhaite mettre à jour la propriété.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">hp <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHp</span><span class="token punctuation">(</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// On appelle notre setter dès le constructeur</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">setHp</span><span class="token punctuation">(</span><span class="token parameter">hp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Notre setter va nous permettre d&#39;ajouter une vérification</span></span>
<span class="line">        <span class="token comment">// Ici, notre joueur ne peut pas avoir plus de 100 points de vie</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>hp <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            hp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="le-mot-cle-this" tabindex="-1"><a class="header-anchor" href="#le-mot-cle-this"><span>Le mot-clé this</span></a></h3><p>Dans les méthodes de vos classes, vous pouvez renvoyer la valeur de l&#39;objet (l&#39;instance) avec le mot-clé <code>this</code>. C&#39;est ce que l&#39;on fait dans le constructeur et différentes méthodes.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">hp <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Ici this vaut l&#39;objet en cours (peut être la valeur contenue dans player1 ou dans player2, par exemple)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ Attention toutefois au contexte des variables ! Dans une fonction anonyme, <code>this</code> va avoir une autre valeur.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>something <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">// Ici, this ne correspond pas à notre objet !</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour éviter ce problème :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">test</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>something <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">// Avec une fonction fléchée, this correspond bien à notre objet</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Une autre solution : on déclare une variable intermédiaire qu&#39;on utilisera dans la fonction</span></span>
<span class="line">        <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        tests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            self<span class="token punctuation">.</span>something <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">// On utilise notre variable intermédiaire pour contourner le problème</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Vous pouvez également utiliser .bind(), comme indiqué dans la première partie du cours ;)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercices" tabindex="-1"><a class="header-anchor" href="#exercices"><span>Exercices</span></a></h2><h3 id="conception-et-utilisation-de-classes" tabindex="-1"><a class="header-anchor" href="#conception-et-utilisation-de-classes"><span>Conception et utilisation de classes</span></a></h3><p>Nous allons créer deux classes <code>Book</code> et <code>Author</code> pour représenter des livres et leurs auteurs.</p>`,39)),e("p",null,[s[1]||(s[1]=n("Pour cet exercice, vous allez également avoir besoin de ")),s[2]||(s[2]=e("a",{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Date",target:"_blank",rel:"noopener noreferrer"},"l'objet Date de Javascript",-1)),s[3]||(s[3]=n(", dont vous pourrez également trouver ")),o(p,{to:"/js/98-outils.html"},{default:c(()=>s[0]||(s[0]=[n("des exemples dans le cours")])),_:1}),s[4]||(s[4]=n("."))]),s[6]||(s[6]=a(`<p>Nous allons créer un fichier par classe : <code>Book.js</code> et <code>Author.js</code>. Ne pas oublier d&#39;inclure ces deux fichiers dans votre HTML :</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Book.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Les propriétés d&#39;un livre :</p><ul><li>un ISBN (chaine de caractères)</li><li>un titre</li><li>un ou des auteurs (tableau d&#39;objets <code>Author</code>)</li><li>une date de parution (objet <code>Date</code>)</li><li>un résumé (4ème de couverture)</li></ul><p>Les propriétés d&#39;un auteur :</p><ul><li>un prénom</li><li>un nom</li><li>un ou des livres (tableau d&#39;objets <code>Book</code>)</li><li>une date de naissance (objet <code>Date</code>)</li></ul><p>Créer au moins 2 instances de chacun de ces objets (<a href="https://www.babelio.com/decouvrir.php?p=2" target="_blank" rel="noopener noreferrer">Si vous avez besoin d&#39;inspiration</a>)</p>`,7))])}const v=t(u,[["render",d],["__file","6-poo.html.vue"]]),b=JSON.parse('{"path":"/js/6-poo.html","title":"Programmation orientée objet","lang":"fr-FR","frontmatter":{"date":"2021-04-02T00:00:00.000Z"},"headers":[{"level":2,"title":"Pourquoi la POO ?","slug":"pourquoi-la-poo","link":"#pourquoi-la-poo","children":[]},{"level":2,"title":"Mise en pratique","slug":"mise-en-pratique","link":"#mise-en-pratique","children":[{"level":3,"title":"Créer une classe et des objets","slug":"creer-une-classe-et-des-objets","link":"#creer-une-classe-et-des-objets","children":[]},{"level":3,"title":"Constructeur et propriétés","slug":"constructeur-et-proprietes","link":"#constructeur-et-proprietes","children":[]},{"level":3,"title":"Les méthodes","slug":"les-methodes","link":"#les-methodes","children":[]},{"level":3,"title":"Le mot-clé this","slug":"le-mot-cle-this","link":"#le-mot-cle-this","children":[]}]},{"level":2,"title":"Exercices","slug":"exercices","link":"#exercices","children":[{"level":3,"title":"Conception et utilisation de classes","slug":"conception-et-utilisation-de-classes","link":"#conception-et-utilisation-de-classes","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"js/6-poo.md"}');export{v as comp,b as data};
