import{aj as i,ak as o,am as s,an as t,ao as p,ar as a,al as l,ap as c,aq as r}from"./app-BkblVdII.js";const u={},d={class:"table-of-contents"};function k(m,n){const e=c("router-link");return r(),o("div",null,[n[20]||(n[20]=s("h1",{id:"doctrine-et-la-bdd",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#doctrine-et-la-bdd"},[s("span",null,"Doctrine et la BdD")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[t(e,{to:"#pour-resumer"},{default:p(()=>n[0]||(n[0]=[a("Pour résumer")])),_:1})]),s("li",null,[t(e,{to:"#configurer-la-bdd"},{default:p(()=>n[1]||(n[1]=[a("Configurer la BdD")])),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#debug-pour-mac-et-mamp"},{default:p(()=>n[2]||(n[2]=[a("Débug pour Mac et Mamp")])),_:1})])])]),s("li",null,[t(e,{to:"#configurer-doctrine"},{default:p(()=>n[3]||(n[3]=[a("Configurer Doctrine")])),_:1})]),s("li",null,[t(e,{to:"#creer-des-entites"},{default:p(()=>n[4]||(n[4]=[a("Créer des entités")])),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#gerer-les-heritages-entre-les-objets"},{default:p(()=>n[5]||(n[5]=[a("Gérer les héritages entre les objets")])),_:1})])])]),s("li",null,[t(e,{to:"#les-migrations"},{default:p(()=>n[6]||(n[6]=[a("Les migrations")])),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#annuler-une-migration"},{default:p(()=>n[7]||(n[7]=[a("Annuler une migration")])),_:1})])])]),s("li",null,[t(e,{to:"#l-entitymanager-pour-sauvegarder"},{default:p(()=>n[8]||(n[8]=[a("L'EntityManager pour sauvegarder")])),_:1})]),s("li",null,[t(e,{to:"#le-paramconverter-de-doctrine"},{default:p(()=>n[9]||(n[9]=[a("Le ParamConverter de Doctrine")])),_:1})]),s("li",null,[t(e,{to:"#le-repository-pour-recuperer-des-entites"},{default:p(()=>n[10]||(n[10]=[a("Le Repository pour récupérer des entités")])),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#findall"},{default:p(()=>n[11]||(n[11]=[a("findAll()")])),_:1})]),s("li",null,[t(e,{to:"#find-id"},{default:p(()=>n[12]||(n[12]=[a("find($id)")])),_:1})]),s("li",null,[t(e,{to:"#findoneby-array-criteria-array-orderby-null"},{default:p(()=>n[13]||(n[13]=[a("findOneBy(array $criteria, array $orderBy = null)")])),_:1})]),s("li",null,[t(e,{to:"#findby-array-criteria-array-orderby-null-limit-null-offset-null"},{default:p(()=>n[14]||(n[14]=[a("findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)")])),_:1})]),s("li",null,[t(e,{to:"#le-querybuilder-construire-ses-propres-requetes"},{default:p(()=>n[15]||(n[15]=[a("Le QueryBuilder : construire ses propres requêtes")])),_:1})]),s("li",null,[t(e,{to:"#les-jointures"},{default:p(()=>n[16]||(n[16]=[a("Les jointures")])),_:1})]),s("li",null,[t(e,{to:"#les-differentes-methodes-du-querybuilder"},{default:p(()=>n[17]||(n[17]=[a("Les différentes méthodes du QueryBuilder")])),_:1})])])]),s("li",null,[t(e,{to:"#tester-nos-requetes"},{default:p(()=>n[18]||(n[18]=[a("Tester nos requêtes")])),_:1})]),s("li",null,[t(e,{to:"#creer-de-fausses-donnees-fixtures"},{default:p(()=>n[19]||(n[19]=[a("Créer de fausses données (fixtures)")])),_:1})])])]),n[21]||(n[21]=s("p",null,[s("a",{href:"https://symfony.com/doc/current/doctrine.html",target:"_blank",rel:"noopener noreferrer"},"La documentation officielle"),a(" que nous allons suivre.")],-1)),n[22]||(n[22]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/02251e40b02349dd8bd34775a05a4e2c",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[23]||(n[23]=l(`<h2 id="pour-resumer" tabindex="-1"><a class="header-anchor" href="#pour-resumer"><span>Pour résumer</span></a></h2><ul><li>Pour mettre en place la base, <ul><li>créer/modifier la variable <code>DATABASE_URL</code> dans <code>.env</code></li><li>Lancer la commande <code>doctrine:database:create</code></li></ul></li><li>Exécuter les migrations <code>doctrine:migrations:migrate</code> pour mettre à jour la <abbr title="Base de Données">BdD</abbr></li><li>Créer des entités avec <code>make:entity</code></li><li>Créer une ou des migrations avec <code>make:migration</code> (ou <code>doctrine:migrations:diff</code>) (⚠️ pensez à les exécuter avec <code>doctrine:migrations:migrate</code>)</li><li>Créer de fausses données avec <code>DoctrineFixturesBundle</code> et les charger avec <code>doctrine:fixtures:load</code></li><li>Pour insérer des données dans la base, injecter le service <code>EntityManagerInterface</code> et utiliser les méthodes <code>persist()</code> et <code>flush()</code></li><li>Pour récupérer des données de la base, injecter le repository correspondant à la table et utiliser ses méthodes <ul><li>Si besoin de requêtes plus complexes, créer des méthodes en utilisant le <code>QueryBuilder</code></li></ul></li></ul><h2 id="configurer-la-bdd" tabindex="-1"><a class="header-anchor" href="#configurer-la-bdd"><span>Configurer la BdD</span></a></h2><p>Pour travailler avec Doctrine, pas besoin de créer une base de données, nous allons voir comment le faire simplement avec la ligne de commande.</p><p>D&#39;abord, configurer l&#39;accès à la base. Pour cela, modifier le fichier <code>.env</code> :</p><div class="language-dotenv line-numbers-mode" data-highlighter="prismjs" data-ext="dotenv" data-title="dotenv"><pre><code><span class="line"># In all environments, the following files are loaded if they exist,</span>
<span class="line"># the latter taking precedence over the former:</span>
<span class="line">#</span>
<span class="line"># * .env                contains default values for the environment variables needed by the app</span>
<span class="line"># * .env.local          uncommitted file with local overrides</span>
<span class="line"># * .env.$APP_ENV       committed environment-specific defaults</span>
<span class="line"># * .env.$APP_ENV.local uncommitted environment-specific overrides</span>
<span class="line">#</span>
<span class="line"># Real environment variables win over .env files.</span>
<span class="line">#</span>
<span class="line"># DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.</span>
<span class="line">#</span>
<span class="line"># Run &quot;composer dump-env prod&quot; to compile .env files for production use (requires symfony/flex &gt;=1.2).</span>
<span class="line"># https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration</span>
<span class="line"></span>
<span class="line"># ##&gt; symfony/framework-bundle ###</span>
<span class="line">APP_ENV=dev</span>
<span class="line">APP_SECRET=e194910b102ef1a834e9967fb13ec881</span>
<span class="line"># ##&lt; symfony/framework-bundle ###</span>
<span class="line"></span>
<span class="line"># ##&gt; symfony/mailer ###</span>
<span class="line"># MAILER_DSN=smtp://localhost</span>
<span class="line"># ##&lt; symfony/mailer ###</span>
<span class="line"></span>
<span class="line"># ##&gt; doctrine/doctrine-bundle ###</span>
<span class="line"># Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url</span>
<span class="line"># IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml</span>
<span class="line">#</span>
<span class="line"># DATABASE_URL=&quot;sqlite:///%kernel.project_dir%/var/data.db&quot;</span>
<span class="line"># DATABASE_URL=&quot;mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7&quot;</span>
<span class="line">DATABASE_URL=&quot;mysql://root:@127.0.0.1:3306/test-symfony?serverVersion=5.7&quot;</span>
<span class="line"># ##&lt; doctrine/doctrine-bundle ###</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La ligne qui nous intéresse est celle-ci :</p><div class="language-dotenv line-numbers-mode" data-highlighter="prismjs" data-ext="dotenv" data-title="dotenv"><pre><code><span class="line">DATABASE_URL=&quot;mysql://root:pass@127.0.0.1:3306/test-symfony?serverVersion=5.7&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Si vous utilisez MariaDB, il est plus probable qu&#39;une variante comme celle-ci vous convienne mieux :</p><div class="language-dotenv line-numbers-mode" data-highlighter="prismjs" data-ext="dotenv" data-title="dotenv"><pre><code><span class="line">DATABASE_URL=&quot;mysql://root:pass@127.0.0.1:3307/test-symfony?serverVersion=mariadb-10.4.13&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Décomposons-la pour comprendre ce qu&#39;elle fait et comment :</p><ul><li><code>mysql://</code> est le protocole à utiliser (le type de BdD qu&#39;on utilise, si vous préférez). Ici, mysql</li><li><code>root:pass</code> est la combinaison <code>identifiant:motDePasse</code> à utiliser pour se connecter à notre BdD. Avec Wamp, nous allons plutôt avoir <code>root:</code> et pour Mamp <code>root:root</code></li><li><code>127.0.0.1:3306</code> est l&#39;adresse IP de notre BdD, suivi du port. Tant que nous travaillons en local, nous n&#39;avons pas besoin de les changer. Noter que <code>127.0.0.1</code> peut être remplacé par <code>localhost</code>, les deux sont équivalent.</li><li><code>/test-symfony</code> est le nom de la BdD que l&#39;on va utiliser. Pas besoin de la créer avant, nous la créerons juste après.</li></ul><p>Pour des exemples avec d&#39;autres types de BdD, je vous invite à regarder la <a href="https://symfony.com/doc/current/doctrine.html#configuring-the-database" target="_blank" rel="noopener noreferrer">section dédiée de la doc officielle</a></p><p>Une fois configurée, lancer la commande <code>php bin/console doctrine:database:create</code> dans votre terminal pour créer la BdD. Bien sûr, pas besoin de le faire si votre BdD existe déjà.</p><p>Si vous souhaitez afficher la liste des commandes disponibles avec Doctrine, lancer la commande <code>php bin/console list doctrine</code>.</p><h3 id="debug-pour-mac-et-mamp" tabindex="-1"><a class="header-anchor" href="#debug-pour-mac-et-mamp"><span>Débug pour Mac et Mamp</span></a></h3><p>Si vous êtes sur Mac avec Mamp, la configuration est différente :</p><div class="language-dotenv line-numbers-mode" data-highlighter="prismjs" data-ext="dotenv" data-title="dotenv"><pre><code><span class="line">DATABASE_URL=&quot;mysql://root:root@localhost:8889/exo-symfony?serverVersion=5.7&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Vous pouvez également avoir des soucis de version de php. Le conflit est entre la version de php de votre Mac et celle de Mamp.</p><p>Pour les régler, voici une manipulation qui peut vous aider :</p><ul><li>Trouver votre version de PHP dans Mamp (disons 7.4.12 pour la suite)</li><li>Trouver la version de PHP sur votre Mac (ouvrir un terminal et taper <code>php -v</code>). Si elle est différente de celle de Mamp, faire ce qui suit.</li><li><code>sudo ln -s /Applications/MAMP/bin/php/php7.4.12/bin/php /usr/local/bin/php</code> (remplacer <code>php7.4.12</code> par votre version de PHP dans Mamp, ex <code>php7.4.9</code>)</li><li>Ouvrir un nouveau terminal et lancer la commande <code>php -v</code> pour vérifier que le changement a été effectué</li></ul><h2 id="configurer-doctrine" tabindex="-1"><a class="header-anchor" href="#configurer-doctrine"><span>Configurer Doctrine</span></a></h2><p>Regardons le fichier <code>config/packages/doctrine.yaml</code>. Nous n&#39;avons normalement rien besoin de modifier.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># le premier niveau nous indique que nous configurons Doctrine (logique ;) )</span></span>
<span class="line"><span class="token key atrule">doctrine</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Cette section sert à configurer l&#39;accès à la BdD</span></span>
<span class="line">    <span class="token key atrule">dbal</span><span class="token punctuation">:</span> </span>
<span class="line">        <span class="token comment"># Ici, nous récupérons notre variable d&#39;environnement DATABASE_URL (définie dans .env)</span></span>
<span class="line">        <span class="token comment"># pour nous en servir dans Doctrine.</span></span>
<span class="line">        <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&#39;%env(resolve:DATABASE_URL)%&#39;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># IMPORTANT: You MUST configure your server version,</span></span>
<span class="line">        <span class="token comment"># either here or in the DATABASE_URL env var (see .env file)</span></span>
<span class="line">        <span class="token comment">#server_version: &#39;13&#39;</span></span>
<span class="line">    <span class="token comment"># Cette section va configurer l&#39;ORM (Object-Relational mapping ou Mapping objet-relationnel).</span></span>
<span class="line">    <span class="token comment"># C&#39;est à dire l&#39;outil faisant le lien entre nos objets PHP et nos tables (le coeur de Doctrine en somme)</span></span>
<span class="line">    <span class="token key atrule">orm</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># Doctrine va générer des classes &quot;proxy&quot; servant à gérer plus rapidement les objets (en ajoutant des méthodes spécifiques pour son usage, comme gérer le cache par exemple)</span></span>
<span class="line">        <span class="token key atrule">auto_generate_proxy_classes</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">        <span class="token comment"># Ce paramètre défini comment Doctrine convertit le nom d&#39;une classe en un nom de table (et même chose pour les noms de propriétés en noms de champs)</span></span>
<span class="line">        <span class="token key atrule">naming_strategy</span><span class="token punctuation">:</span> doctrine.orm.naming_strategy.underscore_number_aware</span>
<span class="line">        <span class="token comment"># On indique à Doctrine qu&#39;on veut qu&#39;il détecte nos entités (objets à convertir en tables) automatiquement</span></span>
<span class="line">        <span class="token key atrule">auto_mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">        <span class="token comment"># On lui indique quand même sur quels dossiers il doit travailler et comment les lire</span></span>
<span class="line">        <span class="token key atrule">mappings</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># Ici, nous pouvons donner à Doctrine plusieurs dossiers où se trouvent des entités</span></span>
<span class="line">            <span class="token comment"># Cette section sert surtout si vous utilisez une structure personnalisée (ce que nous n&#39;allons pas faire ;) ).</span></span>
<span class="line">            <span class="token key atrule">App</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># Un paramètre historique de Symfony, nous n&#39;en tiendrons pas compte. Il servait en Symfony 2 et 3 (nous voyons la version 5)</span></span>
<span class="line">                <span class="token key atrule">is_bundle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">                <span class="token comment"># Nous indiquons que notre mapping (les indications des types des champs par exemple) est fait à l&#39;aide d&#39;annotations (il est possible de le faire en Yaml ou en Xml, mais ces méthodes sont dépréciées)</span></span>
<span class="line">                <span class="token key atrule">type</span><span class="token punctuation">:</span> annotation</span>
<span class="line">                <span class="token comment"># Nous indiquons dans quel dossier chercher nos entités. %kernel.project_dir% est un paramètre, toujours défini dans Symfony, vous permettant de récupérer le chemin vers la racine du projet. On s&#39;en sert surtout dans les configurations des packages (dépendances ou librairies que l&#39;on charge avec Composer dans notre projet)</span></span>
<span class="line">                <span class="token key atrule">dir</span><span class="token punctuation">:</span> <span class="token string">&#39;%kernel.project_dir%/src/Entity&#39;</span></span>
<span class="line">                <span class="token key atrule">prefix</span><span class="token punctuation">:</span> <span class="token string">&#39;App\\Entity&#39;</span></span>
<span class="line">                <span class="token key atrule">alias</span><span class="token punctuation">:</span> App</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creer-des-entites" tabindex="-1"><a class="header-anchor" href="#creer-des-entites"><span>Créer des entités</span></a></h2><p>Une entité est une classe PHP (rangée, dans notre cas, dans le dossier <code>src/Entity</code>) qui va correspondre à une table de notre BdD. Chaque ligne de cette table correspondra à un objet.</p><p>Pour faire schématique :</p><ul><li>Classe = table</li><li>Objet = ligne de cette table</li></ul><p>Nous allons créer 2 entités :</p><ul><li><code>Article</code> un article de blog, contenant un titre (string de 255 caractères), un contenu (text) et une catégorie (Tag)</li><li><code>Tag</code> une catégorie, contenant un nom (string de 128 caractères), qui peut être liée à plusieurs articles</li></ul><p>Pour créer ces objets, nous avons 2 choix :</p><ul><li>les écrire nous-même</li><li>les générer à l&#39;aide de la commande <code>php bin/console make:entity</code></li></ul><p>Je vous conseille toujours le second choix 😉.</p><p>Dans un premier temps, créons la classe <code>Article</code>.</p><ul><li>On exécute la commande</li><li>On précise le nom de la classe qu&#39;on veut créer : <code>Article</code></li><li>Puis on ajoute nos champs <ul><li><code>title</code> de type string, longueur 255 et non <code>null</code></li><li><code>content</code> de type text et non <code>null</code></li></ul></li><li>Arrêtons-nous ici pour cette entité. Nous ajouterons la relation avec Tag en créant cette entité.</li></ul><p>Créons la classe <code>Tag</code></p><ul><li>On exécute la commande</li><li>On précise le nom de la classe qu&#39;on veut créer : <code>Tag</code></li><li>Puis on ajoute nos champs <ul><li><code>name</code> de type string, longueur 128 et non <code>null</code></li><li><code>articles</code> de type relation (nous serons ainsi guidés pour choisir le type de relation, ici nous voulons du <code>OneToMany</code> : 1 Tag lié à n Articles) <ul><li>La commande nous propose également de créer un champ <code>tag</code> dans <code>Article</code>. Profitons-en, ça pourra nous servir !</li><li>La commande nous demande également si la propriété <code>tag</code> de <code>Article</code> peut être null. Disons que non (nos articles doivent obligatoirement avoir une catégorie).</li><li>Contrairement à la vidéo, à la question d&#39;activer <code>orphanRemoval</code> sur cette relation, dire non.</li><li>La relation est ajoutée !</li><li>Valider une dernière fois pour terminer les modifications</li></ul></li></ul></li></ul><p>Nous avons maintenant 4 fichiers créés, dont ces 2 entités : <code>src/Entity/Tag.php</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Repository<span class="token punctuation">\\</span>TagRepository</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>ArrayCollection</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Collections<span class="token punctuation">\\</span>Collection</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">repositoryClass</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">TagRepository</span><span class="token operator">::</span><span class="token constant">class</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Tag</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Id</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>GeneratedValue</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;integer&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">length</span><span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>OneToMany</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">targetEntity</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">Article</span><span class="token operator">::</span><span class="token constant">class</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">mappedBy</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;tag&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$articles</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">articles</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">int</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setName</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name">Collection<span class="token punctuation">|</span>Article<span class="token punctuation">[</span><span class="token punctuation">]</span></span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Collection</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">articles</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">addArticle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Article</span> <span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">articles</span><span class="token operator">-&gt;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">articles</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$article</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">removeArticle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Article</span> <span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">articles</span><span class="token operator">-&gt;</span><span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// set the owning side to null (unless already changed)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/Entity/Article.php</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Repository<span class="token punctuation">\\</span>ArticleRepository</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">repositoryClass</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">ArticleRepository</span><span class="token operator">::</span><span class="token constant">class</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Article</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Id</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>GeneratedValue</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;integer&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">length</span><span class="token punctuation">:</span> <span class="token number">255</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$title</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;text&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$content</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>ManyToOne</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">targetEntity</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">Tag</span><span class="token operator">::</span><span class="token constant">class</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">inversedBy</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;articles&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>JoinColumn</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">nullable</span><span class="token punctuation">:</span> <span class="token attribute-class-name class-name">false</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$tag</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">int</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">title</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$title</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">content</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setContent</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">content</span> <span class="token operator">=</span> <span class="token variable">$content</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">Tag</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">tag</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setTag</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token class-name type-declaration">Tag</span> <span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token variable">$tag</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gerer-les-heritages-entre-les-objets" tabindex="-1"><a class="header-anchor" href="#gerer-les-heritages-entre-les-objets"><span>Gérer les héritages entre les objets</span></a></h3><p><a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.11/reference/inheritance-mapping.html" target="_blank" rel="noopener noreferrer">La documentation Doctrine sur l&#39;héritage</a></p><p>Si vous avez des héritages entre vos tables / vos entités, il faut ajouter quelques annotations / attributs pour prévenir Doctrine et lui expliquer comment les gérer.</p><p>Il y a 3 types d&#39;héritages :</p><ul><li><a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.11/reference/inheritance-mapping.html#mapped-superclasses" target="_blank" rel="noopener noreferrer">Une classe par entité fille (Mapped Superclasses)</a>, avec les champs de la classe parente répétés dans chacune, pour réduire le nombre de jointures</li><li><a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.11/reference/inheritance-mapping.html#single-table-inheritance" target="_blank" rel="noopener noreferrer">Une table pour toutes les entités</a>, pour réduire le nombre de tables et de jointures</li><li><a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.11/reference/inheritance-mapping.html#class-table-inheritance" target="_blank" rel="noopener noreferrer">Une table par entité, y compris la parente</a>, pour réduire la répétition de données (solution que je préfère le plus souvent)</li></ul><h4 id="mapped-superclasses" tabindex="-1"><a class="header-anchor" href="#mapped-superclasses"><span>Mapped Superclasses</span></a></h4><p>Avec cette stratégie, on ne crée que des tables utiles et on évite de devoir faire des jointures pour récupérer les données. Par contre, on duplique une information qui pourrait être factorisée.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>MappedSuperclass</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;integer&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$mapped1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$mapped2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Id</span></span><span class="token delimiter punctuation">]</span></span> </span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;integer&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span> </span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Le script va alors créer une seule table <code>Employee</code>, contenant les propriétés de <code>Employee</code> et de <code>Person</code> :</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employee <span class="token punctuation">(</span></span>
<span class="line">    mapped1 <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    mapped2 <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    id <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    name <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    related1_id <span class="token keyword">INTEGER</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="single-table-inheritance" tabindex="-1"><a class="header-anchor" href="#single-table-inheritance"><span>Single Table Inheritance</span></a></h4><p>Dans cette stratégie, on ne va créer qu&#39;une seule table pour nos deux entités, avec les propriétés cumulées de <code>Person</code> et de toutes ses classes filles. Noter ici la partie <code>DiscriminatorColumn</code>, qui définit une colonne supplémentaire pour distinguer les objets <code>Person</code>, des objets <code>Employee</code> (la propriété <code>DiscriminatorMap</code> permet de définir les valeurs qui iront dans cette colonne)</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>InheritanceType</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SINGLE_TABLE&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>DiscriminatorColumn</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;discr&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>DiscriminatorMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;person&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Person&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;employee&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Employee&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="class-table-inheritance" tabindex="-1"><a class="header-anchor" href="#class-table-inheritance"><span>Class Table Inheritance</span></a></h4><p>Cette stratégie permet de créer une table par entité, dont l&#39;entité parente (<code>Person</code>) et une jointure sera faite par Doctrine pour récupérer les éléments des tables nécessaires. Noter ici la partie <code>DiscriminatorColumn</code>, qui définit une colonne supplémentaire pour distinguer les objets <code>Person</code>, des objets <code>Employee</code> (la propriété <code>DiscriminatorMap</code> permet de définir les valeurs qui iront dans cette colonne).</p><p>Cette manière de faire permet d&#39;éviter les répétitions dans les tables ou les données vides dans la table. C&#39;est en général la solution recommandée si vous utilisez <a href="https://fr.wikipedia.org/wiki/Merise_(informatique)#MCD_:_mod%C3%A8le_conceptuel_des_donn%C3%A9es" target="_blank" rel="noopener noreferrer">la méthode Merise pour créer votre MCD</a>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>InheritanceType</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;JOINED&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>DiscriminatorColumn</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;discr&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;string&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>DiscriminatorMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;person&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Person&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;employee&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Employee&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="les-migrations" tabindex="-1"><a class="header-anchor" href="#les-migrations"><span>Les migrations</span></a></h2><p>Si vous n&#39;avez pas créé la BdD, Symfony met à votre disposition une commande pour le faire :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console doctrine:database:create</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Lorsque nous créons des entités, nous voulons que nos changements apparaissent dans notre BdD (tel était notre objectif, au départ). Pour cela, nous avons plusieurs moyens, mais le plus propre d&#39;entre eux est de créer des migrations.</p><p>Une migration contient 2 ensemble de requêtes SQL, pour vous permettre de passer d&#39;une version à l&#39;autre de votre BdD. Son nom contient la date précise où vous l&#39;avez générée et permet ainsi de savoir dans quel ordre les migrations doivent être exécutées.</p><p>Elle contient 2 méthodes :</p><ul><li><code>up</code> : les requêtes à exécuter pour mettre à jour la base</li><li><code>down</code> : les requêtes à exécuter pour annuler ces modifications (on s&#39;en sert principalement en cas de problèmes)</li></ul><p>Pour générer une migration, il faut utiliser la commande (j&#39;ajoute l&#39;option <code>-n</code> pour éviter que la ligne de commande demande une confirmation) :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console make:migration</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>La commande <code>php bin/console doctrine:migrations:diff -n</code> fait exactement la même chose.</p><p>⚠️ <strong>Conseil</strong> : il peut être utile d&#39;exécuter les migrations <em>avant</em> d&#39;en générer une nouvelle en exécutant <code>php bin/console doctrine:migrations:migrate -n</code> avant la commande <code>make:migration</code> / <code>doctrine:migrations:diff</code></p><p>Dans notre exemple, notre migration ressemblera à ceci :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">DoctrineMigrations</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>DBAL<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>AbstractMigration</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Auto-generated Migration: Please modify to your needs!</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Version20210226082708</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMigration</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Schema</span> <span class="token variable">$schema</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// this up() migration is auto-generated, please modify it to your needs</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;CREATE TABLE article (id INT AUTO_INCREMENT NOT NULL, tag_id INT NOT NULL, title VARCHAR(255) NOT NULL, content LONGTEXT NOT NULL, INDEX IDX_23A0E66BAD26311 (tag_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE \`utf8mb4_unicode_ci\` ENGINE = InnoDB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;CREATE TABLE tag (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(128) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE \`utf8mb4_unicode_ci\` ENGINE = InnoDB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ALTER TABLE article ADD CONSTRAINT FK_23A0E66BAD26311 FOREIGN KEY (tag_id) REFERENCES tag (id)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Schema</span> <span class="token variable">$schema</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// this down() migration is auto-generated, please modify it to your needs</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ALTER TABLE article DROP FOREIGN KEY FK_23A0E66BAD26311&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;DROP TABLE article&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addSql</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;DROP TABLE tag&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour exécuter les migrations :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console doctrine:migrations:migrate <span class="token parameter variable">-n</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Cette commande exécutera toutes les migrations qui n&#39;ont pas déjà été lancées (la liste des migrations déjà exécutées se trouve dans la table <code>doctrine_migration_versions</code> de votre BdD).</p><p>⚠️ <strong>Conseil :</strong> Il est important que votre base puisse être construite de 0 avec les migrations (et éventuellement des fixtures). Vous pouvez tester</p><h3 id="annuler-une-migration" tabindex="-1"><a class="header-anchor" href="#annuler-une-migration"><span>Annuler une migration</span></a></h3><p>Si une migration s&#39;est mal passée (une erreur s&#39;est produite pendant la migration ou crée un bug, par exemple), vous pouvez l&#39;annuler avec la commande <code>php bin/console doctrine:migrations:execute --down DoctrineMigrations\\VersionXXX</code> où <code>XXX</code> est le numéro de version (dans les faits, on passe le FQCN de la migration à la commande).</p><h2 id="l-entitymanager-pour-sauvegarder" tabindex="-1"><a class="header-anchor" href="#l-entitymanager-pour-sauvegarder"><span>L&#39;EntityManager pour sauvegarder</span></a></h2><p>Maintenant que nous avons notre schéma de BdD (nos tables et nos colonnes), voyons comment ajouter des entrées dans nos tables. Nous allons le faire depuis un controller, mais sachez que ce fonctionnement peut être utilisé dans n&#39;importe quel service (classe se trouvant dans <code>src</code>, en dehors de notre dossier <code>src/Entity</code>).</p><p>Un exemple détaillé d&#39;utilisation :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Entity<span class="token punctuation">\\</span>Article</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Entity<span class="token punctuation">\\</span>Tag</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>EntityManagerInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/blog&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_&quot;</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/fixtures&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;fixtures&quot;</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fixtures</span><span class="token punctuation">(</span><span class="token class-name type-declaration">EntityManagerInterface</span> <span class="token variable">$entityManager</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On crée un objet Tag (nous n&#39;en avons actuellement aucun)</span></span>
<span class="line">        <span class="token variable">$tag</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$tag</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animaux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// On crée un premier article et on donne des valeurs à ses différents champs</span></span>
<span class="line">        <span class="token variable">$article</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Les animaux fantastiques&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Un contenu fabuleux pour un article fantastique&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Ici, on fait le lien entre notre article et le tag que nous avons défini plus haut.</span></span>
<span class="line">        <span class="token comment">// Doctrine se chargera de retranscrire ce lien dans la BdD.</span></span>
<span class="line">        <span class="token comment">// Dans les faits, il mettra l&#39;id de notre tag dans la colonne tag_id de notre article.</span></span>
<span class="line">        <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Ici, on dit à l&#39;entity manager qu&#39;il devra sauvegarder nos deux entités. Vous pouvez voir ce persist que le add de Git</span></span>
<span class="line">        <span class="token comment">// Noter qu&#39;il faut appeler la méthode persist sur chacun de nos objets</span></span>
<span class="line">        <span class="token comment">// Il est possible de ne le faire qu&#39;une fois, mais c&#39;est une astuce que vous verrez plus tard ;)</span></span>
<span class="line">        <span class="token variable">$entityManager</span><span class="token operator">-&gt;</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$entityManager</span><span class="token operator">-&gt;</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Noter que les entrées n&#39;existent pas encore en base.</span></span>
<span class="line">        <span class="token comment">// Elles n&#39;existent qu&#39;une fois que nous appelons la méthode flush de l&#39;entity manager.</span></span>
<span class="line">        <span class="token comment">// Vous pouvez voir la méthode persist comme le commit de Git.</span></span>
<span class="line">        <span class="token variable">$entityManager</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Ici, j&#39;ai choisi de rediriger vers l&#39;accueil du blog</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirectToRoute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog_index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour supprimer une entité de la base, utiliser la méthode <code>remove</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$entityManager</span><span class="token operator">-&gt;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$entityManager</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Il faut donc bien retenir le fonctionnement des méthodes <code>persist</code> et <code>flush</code> qui font tout le travail.</p><h2 id="le-paramconverter-de-doctrine" tabindex="-1"><a class="header-anchor" href="#le-paramconverter-de-doctrine"><span>Le ParamConverter de Doctrine</span></a></h2><p>La <a href="https://symfony.com/doc/current/doctrine.html#automatically-fetching-objects-paramconverter" target="_blank" rel="noopener noreferrer">documentation officielle</a> La <a href="https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html" target="_blank" rel="noopener noreferrer">documentation des ParamConverter</a></p><p>Dans un controller, vous pouvez utiliser les paramètres de votre route pour récupérer directement une entité (une ligne de votre table)</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;show&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Article</span> <span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/show.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;article&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$article</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour appeler cette route, il suffira de faire :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> path<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>show<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> entity<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Un lien vers ma page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Dans l&#39;exemple ci-dessus, notre route contient un paramètre <code>id</code>, et nous demandons à Symfony de la convertir en un objet <code>Article</code>. Pour cela, Doctrine va utiliser ce que l&#39;on appelle un ParamConverter (un objet qui converti les paramètres d&#39;une route/action). Dans les faits, il va vérifier si le nom du paramètre de la route correspond à une propriété de l&#39;objet. Si c&#39;est le cas, il va faire une requête <code>SELECT</code> sur la table <code>article</code> pour récupérer l&#39;entrée correspondante (avec un <code>WHERE id = $id</code>, en somme).</p><h2 id="le-repository-pour-recuperer-des-entites" tabindex="-1"><a class="header-anchor" href="#le-repository-pour-recuperer-des-entites"><span>Le Repository pour récupérer des entités</span></a></h2><p>La <a href="https://symfony.com/doc/current/doctrine.html#doctrine-queries" target="_blank" rel="noopener noreferrer">documentation sur les Repositories</a></p><p>Un objet Repository est lié à une entité précise et permet de faire des requêtes <code>SELECT</code> sur la table liée.</p><p>Dans l&#39;exemple précédent, le ParamConverter utilise une méthode pratique et commune à tous les Repositories : <code>find($id)</code>. Il y a 4 méthodes disponibles dans tous les repositories, détaillons-les :</p><h3 id="findall" tabindex="-1"><a class="header-anchor" href="#findall"><span><code>findAll()</code></span></a></h3><p><code>findAll()</code> récupère tous les objets de la table (<code>SELECT * FROM article</code> par exemple)</p><h3 id="find-id" tabindex="-1"><a class="header-anchor" href="#find-id"><span><code>find($id)</code></span></a></h3><p>Find prend en paramètre un identifiant (colonne <code>id</code> d&#39;une table) et renvoie l&#39;objet correspondant (<code>SELECT * FROM article WHERE id = $id</code> par exemple)</p><h3 id="findoneby-array-criteria-array-orderby-null" tabindex="-1"><a class="header-anchor" href="#findoneby-array-criteria-array-orderby-null"><span><code>findOneBy(array $criteria, array $orderBy = null)</code></span></a></h3><p><code>findOneBy(array $criteria, array $orderBy = null)</code> prend 2 paramètres, un tableau de critères (les colonnes et les valeurs à mettre dans un <code>WHERE</code>) et un tableau pour ordonner (avec la colonne et l&#39;ordre) et renvoie <strong>un</strong> objet correspondant aux critères (<code>SELECT * FROM article WHERE title = $title ORDER BY id DESC LIMIT 1</code> par exemple).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * On récupère le paramètre title de notre route</span>
<span class="line">     * et on injecte le repository dont nous allons avoir besoin.</span>
<span class="line">     * </span>
<span class="line">     * Noter que l&#39;on aurait pu utiliser le ParamConverter de Doctrine pour récupérer plus simplement l&#39;article par son titre</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{title}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_show&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ArticleRepository</span> <span class="token variable">$repository</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On récupère plusieurs articles</span></span>
<span class="line">        <span class="token variable">$article</span> <span class="token operator">=</span> <span class="token variable">$repository</span><span class="token operator">-&gt;</span><span class="token function">findOneBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token comment">// On passe un tableau de critères, ne contenant qu&#39;une entrée :</span></span>
<span class="line">            <span class="token comment">// on cherche dans la colonne title de la table, avec la valeur $title</span></span>
<span class="line">            <span class="token comment">// Ce qui revient à faire en SQL : WHERE title = &#39;$title&#39;</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$title</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/index.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;article&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$article</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="findby-array-criteria-array-orderby-null-limit-null-offset-null" tabindex="-1"><a class="header-anchor" href="#findby-array-criteria-array-orderby-null-limit-null-offset-null"><span><code>findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)</code></span></a></h3><p><code>findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)</code> : prend 4 paramètres, un tableau de critères, un tableau pour ordonner, la quantité maximum d&#39;objets à retourner (<code>LIMIT</code> en SQL), et le premier élément à retourner (premier paramètre de <code>LIMIT</code>) (<code>SELECT * FROM article WHERE title = $title ORDER BY id DESC LIMIT 0,5</code> par exemple).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * On récupère le paramètre title de notre route</span>
<span class="line">     * et on injecte le repository dont nous allons avoir besoin.</span>
<span class="line">     * </span>
<span class="line">     * Noter que l&#39;on aurait pu utiliser le ParamConverter de Doctrine pour récupérer plus simplement l&#39;article par son titre</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{tag}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_index&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ArticleRepository</span> <span class="token variable">$repository</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On récupère plusieurs articles</span></span>
<span class="line">        <span class="token variable">$articles</span> <span class="token operator">=</span> <span class="token variable">$repository</span><span class="token operator">-&gt;</span><span class="token function">findBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token comment">// On passe un tableau de critères, ne contenant qu&#39;une entrée :</span></span>
<span class="line">            <span class="token comment">// on cherche dans la colonne tag de la table, avec la valeur $tag</span></span>
<span class="line">            <span class="token comment">// Ce qui revient à faire en SQL : WHERE tag = &#39;$tag&#39;</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;tag&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$tag</span><span class="token punctuation">,</span>  </span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token comment">// On précise comment trier les résultats</span></span>
<span class="line">            <span class="token comment">// Ce qui revient à faire en SQL : ORDER BY id DESC</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;DESC&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// On veut récupérer 5 résultats maximum</span></span>
<span class="line">        <span class="token number">0</span> <span class="token comment">// On commence au premier enregistrement, nous avons donc l&#39;équivalent de LIMIT 0,5</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/index.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;articles&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$articles</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="le-querybuilder-construire-ses-propres-requetes" tabindex="-1"><a class="header-anchor" href="#le-querybuilder-construire-ses-propres-requetes"><span>Le QueryBuilder : construire ses propres requêtes</span></a></h3><p>La <a href="https://symfony.com/doc/current/doctrine.html#querying-with-the-query-builder" target="_blank" rel="noopener noreferrer">documentation sur le QueryBuilder</a></p><p>Nous allons presque toujours utiliser le QueryBuilder pour faire nos requêtes. Il s&#39;agit d&#39;un objet permettant de gérer des requêtes complexes, sans avoir à taper une requête SQL complexe, et d&#39;utiliser la puissance de PHP (boucles, conditions, etc.) pour les construire. Prenons l&#39;exemple fourni lorsqu&#39;on génère un Repository :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">findByExampleField</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On crée un objet QueryBuilder, en mettant &quot;a&quot; comme alias de notre table article</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On ajoute un WHERE, avec un paramètre &quot;:val&quot;</span></span>
<span class="line">            <span class="token comment">// (voir le cours sur PDO et les paramètres nommés)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.exampleField = :val&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On donne une valeur au paramètre. </span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;val&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On trie nos éléments par &quot;id&quot; croissant</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;ASC&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On ne veut que 10 résultats maximum </span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On récupère la requête générée, qui va correspondre à quelque chose comme</span></span>
<span class="line">            <span class="token comment">// &quot;SELECT * FROM article a WHERE a.exampleField = &#39;$value&#39; ORDER BY a.id LIMIT 10&quot;</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On exécute la requête et on récupère les résultats.</span></span>
<span class="line">            <span class="token comment">// On les retourne sous la forme d&#39;un tableau (qui contient des objets Article)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Voyons comment ajouter une condition dans cet exemple :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token comment">// On ajoute un paramètre $inverseOrder : s&#39;il vaut true, nous allons trier par ordre décroissant</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">findByExampleField</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$inverseOrder</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On crée un objet QueryBuilder, en mettant &quot;a&quot; comme alias de notre table article</span></span>
<span class="line">        <span class="token variable">$qb</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On ajoute un WHERE, avec un paramètre &quot;:val&quot; (voir le cours sur PDO et les paramètres nommés)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.exampleField = :val&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On donne une valeur au paramètre. </span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;val&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On ne veut que 10 résultats maximum</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setMaxResults</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$inverseOrder</span> <span class="token operator">===</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// On tri nos éléments par &quot;id&quot; décroissant</span></span>
<span class="line">            <span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;DESC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// On tri nos éléments par &quot;id&quot; croissant</span></span>
<span class="line">            <span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;ASC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$qb</span></span>
<span class="line">            <span class="token comment">// On récupère la requête générée, qui va correspondre à quelque chose comme</span></span>
<span class="line">            <span class="token comment">// &quot;SELECT * FROM article a WHERE a.exampleField = &#39;$value&#39; ORDER BY a.id LIMIT 10&quot;</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On exécute la requête et on récupère les résultats.</span></span>
<span class="line">            <span class="token comment">// On les retourne sous la forme d&#39;un tableau (qui contient des objets Article)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ces QueryBuilders et les différentes méthodes de notre repository nous permettent de conserver les requêtes courantes en un point, et de ne pas avoir à les réécrire.</p><h3 id="les-jointures" tabindex="-1"><a class="header-anchor" href="#les-jointures"><span>Les jointures</span></a></h3><p>Imaginons que nous voulons créer un moteur de recherche pour notre blog et que nous voulons chercher à la fois dans les titres d&#39;article, dans leur contenu, mais aussi dans les noms du tag associé. Dans ce cas, nous voulons faire notre recherche sur 2 tables, simultanément. Pour cela, nous allons utiliser une jointure :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">search</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$text</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On crée un objet QueryBuilder, en mettant &quot;a&quot; comme alias de notre table article</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// Ici, on suit les propriétés de notre entité :</span></span>
<span class="line">            <span class="token comment">// on demande à Doctrine une jointure sur la propriété tag de notre article</span></span>
<span class="line">            <span class="token comment">// (il se débrouille ensuite pour faire la correspondance par id),</span></span>
<span class="line">            <span class="token comment">// et on lui dit de l&#39;appeler t dans la suite de la requête</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.tag&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;t&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On ajoute un WHERE, avec un paramètre &quot;:val&quot;</span></span>
<span class="line">            <span class="token comment">// (voir le cours sur PDO et les paramètres nommés)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.content LIKE :val&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a.title LIKE :val&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On peut ensuite utiliser notre table t (les tags) pour regarder le champ name</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;t.name LIKE :val&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On donne une valeur au paramètre.</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;val&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token operator">.</span><span class="token variable">$text</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token comment">// On récupère la requête générée</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On exécute la requête et on récupère les résultats.</span></span>
<span class="line">            <span class="token comment">// On les retourne sous la forme d&#39;un tableau (qui contient des objets Article)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nous avons donc récupéré des objets Article grâce à notre recherche sur 3 colonnes différentes (dans 2 tables différentes !).</p><h3 id="les-differentes-methodes-du-querybuilder" tabindex="-1"><a class="header-anchor" href="#les-differentes-methodes-du-querybuilder"><span>Les différentes méthodes du <code>QueryBuilder</code></span></a></h3><ul><li><code>select()</code> remplace le contenu de la clause <code>SELECT</code> de la requête. Prend une chaine de caractères ou un tableau.</li><li><code>addSelect()</code> ajoute des éléments à la clause <code>SELECT</code> de la requête. Prend une chaine de caractères ou un tableau.</li><li><code>where()</code>, <code>orWhere()</code>, <code>andWhere()</code> pour gérer la clause <code>WHERE</code> de la requête (la première remplace). Prend une chaine de caractères.</li><li><code>setParameter()</code> pour définir la valeur d&#39;un paramètre (défini avec <code>:nomDeLaVariable</code>). Prend 2 paramètres : le nom de la variable (sans les <code>:</code>) et en second, la valeur (peut être une variable, ou non)</li><li><code>join()</code>, <code>innerJoin()</code>, <code>leftJoin()</code> pour créer une jointure avec une table. Prend le nom de la propriété à &quot;suivre&quot; (dans notre exemple <code>a.tags</code> pour joindre la table <code>tag</code>) et en second paramètre, l&#39;alias de la table jointe (<code>t</code> par exemple).</li><li><code>orderBy()</code>, <code>addOrderBy()</code> pour gérer la clause <code>ORDER BY</code> de la requête. Prend 2 paramètres : la propriété sur laquelle appliquer le tri et en second, le sens du tri <code>ASC</code> ou <code>DESC</code>.</li><li><code>setMaxResults()</code> pour gérer la clause <code>LIMIT</code> (limit) de la requête. Prend le nombre d&#39;éléments à récupérer.</li><li><code>setFirstResult()</code> pour gérer la clause <code>LIMIT</code> (offset) de la requête. Prend le numéro (indexé en 0) du premier élément à afficher.</li><li><code>getQuery()</code> récupère les différentes clauses entrées et crée la requête DQL et la requête SQL qui va être appliquée.</li></ul><p>À partir de la <code>Query</code> (retournée par <code>getQuery()</code>), nous avons plusieurs moyens de récupérer nos résultats :</p><ul><li><code>getResult()</code> retourne les résultats de la requête sous la forme d&#39;un tableau d&#39;objets.</li><li><code>getSingleResult()</code> retourne un seul résultat. Si la requête en renvoie plusieurs ou aucun, une exception sera levée.</li><li><code>getOneOrNullResult()</code> retourne aucun ou un seul résultat (null ou un objet). Si la requête en renvoie plusieurs, une exception sera levée.</li><li><code>getScalarResult()</code> retourne un tableau de nombres (si vous avez une requête avec uniquement des <code>COUNT</code> ou équivalent dans la clause <code>SELECT</code>).</li><li><code>getSingleScalarResult()</code> retourne un nombre (si vous avez une requête avec uniquement un <code>COUNT</code> ou équivalent dans la clause <code>SELECT</code>).</li></ul><h2 id="tester-nos-requetes" tabindex="-1"><a class="header-anchor" href="#tester-nos-requetes"><span>Tester nos requêtes</span></a></h2><p>En général, nous allons vouloir utiliser nos Repositories dans d&#39;autres services (classes en dehors de <code>src/Entity</code>). Pour tester nos requêtes, nous pouvons par exemple appeler notre Repository dans un Controller :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/BlogController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Repository<span class="token punctuation">\\</span>ArticleRepository</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/blog/search/{text}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_search&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">search</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ArticleRepository</span> <span class="token variable">$repo</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$articles</span> <span class="token operator">=</span> <span class="token variable">$repo</span><span class="token operator">-&gt;</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Cette fonction va afficher la variable $articles et son contenu</span></span>
<span class="line">        <span class="token comment">// (un peu comme un var_dump(), mais en plus beau et plus pratique) dans le profiler de Symfony</span></span>
<span class="line">        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$articles</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token comment">// Cette fonction va afficher la variable $articles et son contenu,</span></span>
<span class="line">        <span class="token comment">// mais aussi arrêter le programme (dump and die) (comme un exit(var_dump()))</span></span>
<span class="line">        <span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$articles</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/search.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;results&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$articles</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creer-de-fausses-donnees-fixtures" tabindex="-1"><a class="header-anchor" href="#creer-de-fausses-donnees-fixtures"><span>Créer de fausses données (fixtures)</span></a></h2>`,124)),n[24]||(n[24]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/9cc4ebbdd27540fb8430c26130c778cd",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[25]||(n[25]=l(`<p>Pour tester notre application (surtout pour le développement), nous pouvons insérer des données de bases (souvent fausses). Pour cela, je vous conseille d&#39;utiliser le <a href="https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html" target="_blank" rel="noopener noreferrer">DoctrineFixturesBundle</a>.</p><p>Par défaut, l&#39;installation de ce bundle crée un fichier <code>src/DataFixtures/AppFixtures.php</code>. Vous pouvez vous en servir pour créer tout ou partie de vos fausses données. Personnellement, je vous conseille de supprimer ce fichier et d&#39;en créer un par table que vous voulez remplir (un peu plus compliqué, mais plus propre et léger à relire).</p><p>Conservons notre exemple de blog, pour créer 2 jeux de fixtures (fausses données). Il faut d&#39;abord choisir dans quel ordre nous allons faire l&#39;insertion. Dans notre cas (2 entités), nous pouvons le faire aussi bien dans un sens que dans l&#39;autre. Je choisis de commencer par les tags, puis les articles :</p><p><code>src/DataFixtures/TagFixtures.php</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>DataFixtures</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Entity<span class="token punctuation">\\</span>Tag</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FixturesBundle<span class="token punctuation">\\</span>Fixture</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Persistence<span class="token punctuation">\\</span>ObjectManager</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">TagFixtures</span> <span class="token keyword">extends</span> <span class="token class-name">Fixture</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@inheritDoc</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ObjectManager</span> <span class="token variable">$manager</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// C&#39;est dans cette méthode que nous allons créer nos données</span></span>
<span class="line">        <span class="token comment">// et les sauvegarder avec l&#39;ObjetManager (un parent de EntityManager)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Je veux utiliser des noms de tags qui sonnent un peu réels</span></span>
<span class="line">        <span class="token comment">// Même si j&#39;utilise des mots au hasard</span></span>
<span class="line">        <span class="token variable">$tagNames</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;informatiques&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;chiens&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;navigateurs&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;statistiques&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;promenades&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;archerie&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$tagNames</span> <span class="token keyword">as</span> <span class="token variable">$tagName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Je crée des objets tags et les remplie</span></span>
<span class="line">            <span class="token comment">// avant d&#39;en demander l&#39;enregistrement à l&#39;ObjectManager</span></span>
<span class="line">            <span class="token variable">$tag</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$tag</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token variable">$tagName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// On sauvegarde effectivement tout en base</span></span>
<span class="line">        <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src/DataFixtures/ArticleFixtures.php</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>DataFixtures</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Entity<span class="token punctuation">\\</span>Article</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Repository<span class="token punctuation">\\</span>TagRepository</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FixturesBundle<span class="token punctuation">\\</span>Fixture</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>DataFixtures<span class="token punctuation">\\</span>DependentFixtureInterface</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Persistence<span class="token punctuation">\\</span>ObjectManager</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Implémenter DependentFixtureInterface permet au bundle de savoir</span></span>
<span class="line"><span class="token comment">// qu&#39;il va devoir charger d&#39;autres fixtures avant, ce qui va définir </span></span>
<span class="line"><span class="token comment">// un ordre de priorité</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">TagFixtures</span> <span class="token keyword">extends</span> <span class="token class-name">Fixture</span> <span class="token keyword">implements</span> <span class="token class-name">DependentFixtureInterface</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@var</span> <span class="token class-name">TagRepository</span> </span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$tagRepository</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Ici, on va se servir des tags qu&#39;on a déjà inséré en base (pas obligatoire ;) )</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TagRepository</span> <span class="token variable">$tagRepository</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">tagRepository</span> <span class="token operator">=</span> <span class="token variable">$tagRepository</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@inheritDoc</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ObjectManager</span> <span class="token variable">$manager</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// C&#39;est dans cette méthode que nous allons créer nos données</span></span>
<span class="line">        <span class="token comment">// et les sauvegarder avec l&#39;ObjetManager (un parent de EntityManager)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Les titres et contenus des articles va être identiques, on les prépare avant la boucle</span></span>
<span class="line">        </span>
<span class="line">        <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39; : Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce luctus neque justo, id vulputate velit malesuada in. Donec vulputate ipsum vitae orci vestibulum, et tempus orci hendrerit. Vestibulum mattis sit amet eros sodales accumsan. Proin auctor tellus vitae hendrerit viverra. Aliquam erat volutpat. Duis suscipit lacus tortor, non hendrerit sapien dapibus vel. Phasellus urna orci, porta vel arcu vitae, posuere efficitur diam. Phasellus convallis ante enim, a lobortis tortor fermentum et. Aenean hendrerit congue nulla quis interdum. Nullam quis magna sem. Duis quis pulvinar ante, ac posuere velit.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Pour les utiliser dans les articles, on récupère la liste complète de nos tags</span></span>
<span class="line">        <span class="token variable">$tags</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">tagRepository</span><span class="token operator">-&gt;</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// On crée une dizaine d&#39;articles</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token variable">$article</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// On récupère un tag aléatoire dans la liste $tags, qu&#39;on va associer à notre article</span></span>
<span class="line">            <span class="token variable">$randomNumber</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$tags</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token variable">$tags</span><span class="token punctuation">[</span><span class="token variable">$randomNumber</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Si $randomNumber contient 0, on récupère notre 1er tag</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// On prépare l&#39;article à l&#39;insertion en base</span></span>
<span class="line">            <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// On sauvegarde effectivement tout en base</span></span>
<span class="line">        <span class="token variable">$manager</span><span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Cette méthode sert à dire au bundle quelles fixtures</span></span>
<span class="line">    <span class="token comment">// doivent être appliquées avant celles-ci</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token class-name static-context">TagFixtures</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Maintenant que nous avons nos jeux de (fausses) données, nous pouvons les appliquer avec la commande <code>php bin/console doctrine:fixtures:load</code>.</p><p>Par défaut, cette commande vide la base avant d&#39;ajouter les données. Si vous souhaitez ajouter des données à la base existante, ajouter l&#39;option <code>--append</code> : <code>php bin/console doctrine:fixtures:load --append</code>.</p>`,9))])}const b=i(u,[["render",k],["__file","24-doctrine.html.vue"]]),g=JSON.parse(`{"path":"/symfony/24-doctrine.html","title":"Doctrine et la BdD","lang":"fr-FR","frontmatter":{"date":"2021-02-23T00:00:00.000Z"},"headers":[{"level":2,"title":"Pour résumer","slug":"pour-resumer","link":"#pour-resumer","children":[]},{"level":2,"title":"Configurer la BdD","slug":"configurer-la-bdd","link":"#configurer-la-bdd","children":[{"level":3,"title":"Débug pour Mac et Mamp","slug":"debug-pour-mac-et-mamp","link":"#debug-pour-mac-et-mamp","children":[]}]},{"level":2,"title":"Configurer Doctrine","slug":"configurer-doctrine","link":"#configurer-doctrine","children":[]},{"level":2,"title":"Créer des entités","slug":"creer-des-entites","link":"#creer-des-entites","children":[{"level":3,"title":"Gérer les héritages entre les objets","slug":"gerer-les-heritages-entre-les-objets","link":"#gerer-les-heritages-entre-les-objets","children":[]}]},{"level":2,"title":"Les migrations","slug":"les-migrations","link":"#les-migrations","children":[{"level":3,"title":"Annuler une migration","slug":"annuler-une-migration","link":"#annuler-une-migration","children":[]}]},{"level":2,"title":"L'EntityManager pour sauvegarder","slug":"l-entitymanager-pour-sauvegarder","link":"#l-entitymanager-pour-sauvegarder","children":[]},{"level":2,"title":"Le ParamConverter de Doctrine","slug":"le-paramconverter-de-doctrine","link":"#le-paramconverter-de-doctrine","children":[]},{"level":2,"title":"Le Repository pour récupérer des entités","slug":"le-repository-pour-recuperer-des-entites","link":"#le-repository-pour-recuperer-des-entites","children":[{"level":3,"title":"findAll()","slug":"findall","link":"#findall","children":[]},{"level":3,"title":"find($id)","slug":"find-id","link":"#find-id","children":[]},{"level":3,"title":"findOneBy(array $criteria, array $orderBy = null)","slug":"findoneby-array-criteria-array-orderby-null","link":"#findoneby-array-criteria-array-orderby-null","children":[]},{"level":3,"title":"findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)","slug":"findby-array-criteria-array-orderby-null-limit-null-offset-null","link":"#findby-array-criteria-array-orderby-null-limit-null-offset-null","children":[]},{"level":3,"title":"Le QueryBuilder : construire ses propres requêtes","slug":"le-querybuilder-construire-ses-propres-requetes","link":"#le-querybuilder-construire-ses-propres-requetes","children":[]},{"level":3,"title":"Les jointures","slug":"les-jointures","link":"#les-jointures","children":[]},{"level":3,"title":"Les différentes méthodes du QueryBuilder","slug":"les-differentes-methodes-du-querybuilder","link":"#les-differentes-methodes-du-querybuilder","children":[]}]},{"level":2,"title":"Tester nos requêtes","slug":"tester-nos-requetes","link":"#tester-nos-requetes","children":[]},{"level":2,"title":"Créer de fausses données (fixtures)","slug":"creer-de-fausses-donnees-fixtures","link":"#creer-de-fausses-donnees-fixtures","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/24-doctrine.md"}`);export{b as comp,g as data};
