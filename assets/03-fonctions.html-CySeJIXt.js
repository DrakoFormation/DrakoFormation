import{aj as i,ak as o,am as s,an as e,ao as p,al as l,ap as c,aq as u,ar as t}from"./app-BkblVdII.js";const r={},d={class:"table-of-contents"};function k(m,n){const a=c("router-link");return u(),o("div",null,[n[4]||(n[4]=s("h1",{id:"procedures-et-fonctions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#procedures-et-fonctions"},[s("span",null,"Procédures et fonctions")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#fonctions-anonymes"},{default:p(()=>n[0]||(n[0]=[t("Fonctions anonymes")])),_:1})]),s("li",null,[e(a,{to:"#portee-des-variables"},{default:p(()=>n[1]||(n[1]=[t("Portée des variables")])),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#variables-globals"},{default:p(()=>n[2]||(n[2]=[t("Variables $GLOBALS")])),_:1})])])]),s("li",null,[e(a,{to:"#recursivite"},{default:p(()=>n[3]||(n[3]=[t("Récursivité")])),_:1})])])]),n[5]||(n[5]=s("p",null,"En vidéo :",-1)),n[6]||(n[6]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/238d4e8be4d741a08b5fa2fa5fdd2e70",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[7]||(n[7]=l(`<ul><li>Fonction : fonction avec des arguments (ou non) retournant un résultat avec l&#39;opérateur <code>return</code></li><li>Procédure : fonction ne retournant aucun résultat</li></ul><p>Par défaut, les paramètres n&#39;ont pas de type (et peuvent prendre n&#39;importe lequel sans erreurs).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// exemple de procédure</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;un exemple&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// exemple de fonction</span></span>
<span class="line"><span class="token comment">// Noter que $argument a une valeur par défaut à 1</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleIt</span><span class="token punctuation">(</span><span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// exemple de fonction avec typage</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleItWithTypes</span><span class="token punctuation">(</span><span class="token keyword type-hint">float</span> <span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">float</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// exemple de fonction avec typage, pouvant également être null</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleItWithTypes</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">float</span> <span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">float</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Idéalement, il est utile d&#39;ajouter des commentaires (annotations) pour préciser des éléments supplémentaires (types des paramètres et des retours, etc.). En php, on ne peut pas (encore) donner plusieurs types à un paramètre ou un retour et on ne peut que le faire avec une annotation.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token parameter">$argument</span> int|float On précise ici que $argument peut être un entier ou un flottant</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">|</span><span class="token keyword">float</span></span> On précise que la fonction retourne un entier ou un flottant</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleIt</span><span class="token punctuation">(</span><span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">|</span><span class="token keyword">null</span></span> <span class="token parameter">$argument</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">int</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleItInt</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Appeler des fonctions :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleIt</span><span class="token punctuation">(</span><span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$argument</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">echo</span> <span class="token function">doubleIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie 2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">echo</span> <span class="token function">doubleIt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fonctions-anonymes" tabindex="-1"><a class="header-anchor" href="#fonctions-anonymes"><span>Fonctions anonymes</span></a></h3><p>Dans certains cas, vous aurez besoin des fonctions anonymes : des fonctions que vous déclarez pour l&#39;utiliser directement.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token variable">$tab</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">357</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ATTENTION, on passe $element par référence,</span></span>
<span class="line"><span class="token comment">// c&#39;est-à-dire qu&#39;on va le modifier pendant le parcours</span></span>
<span class="line"><span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$tab</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $element contient l&#39;élément du tableau actuellement traité</span></span>
<span class="line">    <span class="token comment">// On le modifie (ce qui n&#39;aurait pas été possible sans le passage par référence)</span></span>
<span class="line">    <span class="token variable">$element</span> <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Comme toute fonction PHP, aucune valeur extérieure ne peut être appelée, mais on peut contourner ce souci grâce au mot-clé <code>use</code> !</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token variable">$tab</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">357</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Cette fois, on va multiplier chaque élément du tableau</span></span>
<span class="line"><span class="token comment">// par un nombre $nb défini en dehors de la fonction</span></span>
<span class="line"><span class="token variable">$nb</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On peut injecter la variable $nb dans la fonction anonyme</span></span>
<span class="line"><span class="token comment">// avec le mot-clé use</span></span>
<span class="line"><span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$tab</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$nb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$element</span> <span class="token operator">*=</span> <span class="token variable">$nb</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="portee-des-variables" tabindex="-1"><a class="header-anchor" href="#portee-des-variables"><span>Portée des variables</span></a></h2><p>En vidéo :</p>`,14)),n[8]||(n[8]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/ddcfe05047c144ea8226f79568384aba",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[9]||(n[9]=l(`<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Disponible dans l&#39;espace de nom par défaut, disponible partout, hors fonctions</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">doubleIt</span><span class="token punctuation">(</span><span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ici, on ne peut pas appeler $a</span></span>
<span class="line">    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$argument</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$b</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// $b et $argument ne sont disponibles que dans la fonction et n&#39;existent pas ici</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On peut déclarer une variable comme globale, à n&#39;importe quel endroit du code. Elle sera disponible après que le code ait été exécuté (un peu comme <code>var</code> en Javascript).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Disponible dans l&#39;espace de nom par défaut, disponible partout, hors fonctions</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">global</span> <span class="token variable">$c</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$argument</span> <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token comment">// affichera 43, $c est explicitement déclarée comme globale</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variables-globals" tabindex="-1"><a class="header-anchor" href="#variables-globals"><span>Variables $GLOBALS</span></a></h3><p>Il est possible, dans une fonction, d&#39;accéder aux variables définies globalement, mais c&#39;est fortement déconseillé :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">somme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">echo</span> <span class="token function">somme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affichera 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recursivite" tabindex="-1"><a class="header-anchor" href="#recursivite"><span>Récursivité</span></a></h2><p>En vidéo :</p>`,8)),n[10]||(n[10]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/59999a8438d04c9f909a3b2d3919eba4",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[11]||(n[11]=l(`<p>Une fonction qui s&#39;appelle elle-même :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function-definition function">recursive</span><span class="token punctuation">(</span><span class="token variable">$argument</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$argument</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$current</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token variable">$current</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$current</span><span class="token punctuation">;</span> <span class="token comment">// cette fonction va invariablement finir par renvoyer,</span></span>
<span class="line">    <span class="token comment">// sauf si l&#39;argument contient un nombre plus grand</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))])}const b=i(r,[["render",k],["__file","03-fonctions.html.vue"]]),f=JSON.parse('{"path":"/php/03-fonctions.html","title":"Procédures et fonctions","lang":"fr-FR","frontmatter":{"date":"2023-01-11T00:00:00.000Z"},"headers":[{"level":3,"title":"Fonctions anonymes","slug":"fonctions-anonymes","link":"#fonctions-anonymes","children":[]},{"level":2,"title":"Portée des variables","slug":"portee-des-variables","link":"#portee-des-variables","children":[{"level":3,"title":"Variables $GLOBALS","slug":"variables-globals","link":"#variables-globals","children":[]}]},{"level":2,"title":"Récursivité","slug":"recursivite","link":"#recursivite","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/03-fonctions.md"}');export{b as comp,f as data};
