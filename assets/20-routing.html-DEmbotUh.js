import{aj as o,ak as p,am as s,an as e,ao as t,al as i,ap as c,aq as u,ar as l}from"./app-BkblVdII.js";const r={},d={class:"table-of-contents"};function m(k,n){const a=c("router-link");return u(),p("div",null,[n[6]||(n[6]=s("h1",{id:"le-routing",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#le-routing"},[s("span",null,"Le routing")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#pour-resumer"},{default:t(()=>n[0]||(n[0]=[l("Pour résumer")])),_:1})]),s("li",null,[e(a,{to:"#de-l-url-du-navigateur"},{default:t(()=>n[1]||(n[1]=[l("De l'URL du navigateur")])),_:1})]),s("li",null,[e(a,{to:"#les-routes-de-symfony"},{default:t(()=>n[2]||(n[2]=[l("Les routes de Symfony")])),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#prefixes-et-parametres-globaux-a-un-controller"},{default:t(()=>n[3]||(n[3]=[l("Préfixes et paramètres globaux à un controller")])),_:1})]),s("li",null,[e(a,{to:"#les-sous-domaines"},{default:t(()=>n[4]||(n[4]=[l("Les sous-domaines")])),_:1})])])]),s("li",null,[e(a,{to:"#de-buguer"},{default:t(()=>n[5]||(n[5]=[l("Dé-buguer")])),_:1})])])]),n[7]||(n[7]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/12a92f13e0354bfcbfc291f50222ca51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[8]||(n[8]=i(`<h2 id="pour-resumer" tabindex="-1"><a class="header-anchor" href="#pour-resumer"><span>Pour résumer</span></a></h2><ul><li>Les routes font le lien entre les urls et les actions (méthodes de controllers).</li><li>Elles sont définies par (au moins) un chemin (premier paramètre) et un nom.</li><li>Elles sont associées à une action sous forme d&#39;annotations.</li><li>Elles peuvent prendre des paramètres, notés dans le chemin <code>{nomDuParametre}</code> et le paramètre est disponible comme paramètre de l&#39;action <code>$nomDuParametre</code>. <ul><li>Ces paramètres peuvent avoir des contraintes de forme (paramètre <code>requirements</code> des routes) ou des valeurs par défaut</li></ul></li></ul><h2 id="de-l-url-du-navigateur" tabindex="-1"><a class="header-anchor" href="#de-l-url-du-navigateur"><span>De l&#39;URL du navigateur</span></a></h2><p>Lors de l&#39;appel d&#39;une URL par le navigateur (<code>https://formation-hb.drakolab.fr/php</code> par exemple), le serveur (Nginx ou Apache, la plupart du temps) va transmettre la requête (<code>/php</code>) au fichier <code>public/index.php</code>. Symfony va alors appeler différents éléments pour traiter la requête :</p><ul><li>Le router, qui va faire le lien entre <code>/php</code> et un controller, grâce aux routes définies (si aucune route ne correspond, une erreur 404 est renvoyée)</li><li>Une fois ce lien fait, Symfony sait quelle action utiliser (méthode d&#39;un controller situé dans <code>src/Controller</code>) et va l&#39;appeler</li><li>L&#39;action va faire ses traitements (appels à la BdD, calculs divers, etc.) et, pour rendre une page HTML, va en général appeler le moteur de rendu (Twig)</li><li>Twig prend le fichier <code>.twig</code> (<code>.html.twig</code> s&#39;il doit être transformé en html, par exemple) demandé et le compile avec les données reçues. Twig renvoie alors ce html au controller</li><li>Le controller ajoute le rendu dans un objet <code>Response</code>, qu&#39;il va renvoyer.</li><li>Symfony se charge alors d&#39;envoyer cette <code>Response</code> au serveur (Nginx ou Apache, la plupart du temps)</li><li>Le serveur transmet au navigateur</li><li>Le navigateur affiche le résultat (j&#39;omets ici volontairement pas mal d&#39;aller-retours, seuls nous intéressent les mécaniques de Symfony)</li></ul><h2 id="les-routes-de-symfony" tabindex="-1"><a class="header-anchor" href="#les-routes-de-symfony"><span>Les routes de Symfony</span></a></h2><p>La <a href="https://symfony.com/doc/current/routing.html" target="_blank" rel="noopener noreferrer">documentation officielle sur le Routing</a></p><p>Le but de ce routing : faire le lien entre une URL et une action de controller. Il nous permet également d&#39;avoir des URLs très propres, comme <code>/lire/article/debuter-avec-symfony</code> plutôt que <code>index.php?article_id=42</code>.</p><p>Nous allons utiliser les annotations pour définir nos routes directement dans nos controllers. Cela correspond à une <a href="https://symfony.com/doc/current/best_practices.html" target="_blank" rel="noopener noreferrer">bonne pratique de Symfony</a>. Avec une installation complète de Symfony (grâce à la commande <code>symfony new --webapp my_project</code>), nous pouvons utiliser directement les annotations pour définir nos routes dans nos controllers. Sans cela, nous aurions dû ajouter le module d&#39;annotations dans le projet <code>composer require doctrine/annotations</code>.</p><p>Un exemple de déclaration de route (sous forme d&#39;annotation) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/BlogController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Ici, on peut s&#39;assurer que le paramètre page est un entier (l&#39;expression régulière \\d+ fait cette vérification)</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/blog/{page}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_list&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">requirements</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;page&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;\\d+&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">list</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/blog/{slug}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_show&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$slug</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// $slug va prendre la valeur déclarée dans l&#39;url ({slug})</span></span>
<span class="line">        <span class="token comment">// Autrement dit, si l&#39;uri est /blog/un-article, alors $slug=&#39;un-article&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prefixes-et-parametres-globaux-a-un-controller" tabindex="-1"><a class="header-anchor" href="#prefixes-et-parametres-globaux-a-un-controller"><span>Préfixes et paramètres globaux à un controller</span></a></h3><p>Un autre élément important : les préfixes. Le code suivant permet que :</p><ul><li>toutes les routes d&#39;un controller commencent par exemple par <code>blog</code>, vous pouvez faire ceci :</li><li>toutes les routes portent un nom commençant par <code>blog_</code></li><li>toutes les routes contiennent un paramètre <code>_locale</code> et qu&#39;il ne puisse prendre que certaines valeurs précises (<code>en</code>, <code>es</code> ou <code>fr</code>)</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/BlogController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Toutes les URi liées aux routes de ce controller commencent par /blog</span>
<span class="line"> * Les noms de toutes les routes commencent par blog_ (on a donc blog_list et blog_show ici)</span>
<span class="line"> * On force tous les paramètres _locale des différentes actions à 3 valeurs possibles : en, es ou fr</span>
<span class="line"> */</span></span>
<span class="line"> <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/blog&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">requirements</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;_locale&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;en|es|fr&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{_locale}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;list&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{_locale}/posts/{slug}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;show&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$slug</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vous noterez ici que la variable <code>_locale</code> n&#39;apparait pas dans les paramètres de l&#39;action (méthode de controller). Il existe plusieurs paramètres gérés directement par Symfony. Le paramètre <code>_locale</code> permet par exemple de gérer les traductions directement avec l&#39;URL</p><h3 id="les-sous-domaines" tabindex="-1"><a class="header-anchor" href="#les-sous-domaines"><span>Les sous-domaines</span></a></h3><p>Disons que notre blog, qui sera disponible sur le site <code>example.com</code> se trouve plus exactement sur <code>blog.example.com</code>. Nous ne sommes pas obligés de créer 2 sites différents pour <code>blog.example.com</code> ou <code>www.example.com</code>, mais pouvons dire que toutes les routes de notre BlogController doivent être appelées avec le sous-domaine <code>blog</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/BlogController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">host</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog.example.com&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">requirements</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;_locale&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;en|es|fr&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_&quot;</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{_locale}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;list&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{_locale}/posts/{slug}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;show&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$slug</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="de-buguer" tabindex="-1"><a class="header-anchor" href="#de-buguer"><span>Dé-buguer</span></a></h2><p>Si vous avez des problèmes avec vos routes (qui ne sont pas prises correctement en compte par exemple), deux commandes peuvent être utiles :</p><ul><li><code>php bin/console debug:router</code> qui vous permet de lister toutes les routes de votre application, avec cette variante pour ne pas avoir les routes du profiler et des outils de débug de Symfony : <code>php bin/console debug:router --env=prod</code></li><li><code>php bin/console router:match /un/chemin/a/tester</code> pour savoir quel controller et quelle action sont appelées pour le chemin donné</li></ul>`,22))])}const b=o(r,[["render",m],["__file","20-routing.html.vue"]]),g=JSON.parse(`{"path":"/symfony/20-routing.html","title":"Le routing","lang":"fr-FR","frontmatter":{"date":"2021-02-22T00:00:00.000Z"},"headers":[{"level":2,"title":"Pour résumer","slug":"pour-resumer","link":"#pour-resumer","children":[]},{"level":2,"title":"De l'URL du navigateur","slug":"de-l-url-du-navigateur","link":"#de-l-url-du-navigateur","children":[]},{"level":2,"title":"Les routes de Symfony","slug":"les-routes-de-symfony","link":"#les-routes-de-symfony","children":[{"level":3,"title":"Préfixes et paramètres globaux à un controller","slug":"prefixes-et-parametres-globaux-a-un-controller","link":"#prefixes-et-parametres-globaux-a-un-controller","children":[]},{"level":3,"title":"Les sous-domaines","slug":"les-sous-domaines","link":"#les-sous-domaines","children":[]}]},{"level":2,"title":"Dé-buguer","slug":"de-buguer","link":"#de-buguer","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/20-routing.md"}`);export{b as comp,g as data};
