import{aj as l,ak as o,al as a,am as e,ar as s,an as i,ao as p,ap as r,aq as c}from"./app-BkblVdII.js";const u={};function d(m,n){const t=r("RouteLink");return c(),o("div",null,[n[7]||(n[7]=a(`<h1 id="outils-utiles" tabindex="-1"><a class="header-anchor" href="#outils-utiles"><span>Outils utiles</span></a></h1><h2 id="declencher-du-code-une-fois-la-page-chargee" tabindex="-1"><a class="header-anchor" href="#declencher-du-code-une-fois-la-page-chargee"><span>Déclencher du code une fois la page chargée</span></a></h2><p>Pour que notre code Javascript ne se déclenche pas avant que le reste de la page ne soit chargé, plusieurs moyens existent (inclure nos script juste avant la fermeture du <code>&lt;body&gt;</code> par exemple). Malheureusement, ce n&#39;est pas toujours fiable. Pour s&#39;assurer que notre DOM soit chargé avec l&#39;exécution de notre JS :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On ajoute un event listener sur le document (la page) pour s&#39;assurer que le DOM est chargé</span></span>
<span class="line"><span class="token comment">// avant d&#39;exécuter le moindre code.</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Nous allons mettre tout notre code js ici</span></span>
<span class="line">    <span class="token comment">// On peut déclarer des variables ou des fonctions en dehors, </span></span>
<span class="line">    <span class="token comment">// mais tout ce qui est exécuté (appel de fonctions, utilisation du DOM, etc.)</span></span>
<span class="line">    <span class="token comment">// doit être ici</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La même chose avec JQuery</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Nous allons mettre tout notre code js ici</span></span>
<span class="line">    <span class="token comment">// On peut déclarer des variables ou des fonctions en dehors, </span></span>
<span class="line">    <span class="token comment">// mais tout ce qui est exécuté (appel de fonctions, utilisation du DOM, etc.)</span></span>
<span class="line">    <span class="token comment">// doit être ici</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="localstorage-sessionstorage" tabindex="-1"><a class="header-anchor" href="#localstorage-sessionstorage"><span>LocalStorage / SessionStorage</span></a></h2><p><a href="https://developer.mozilla.org/fr/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener noreferrer">Documentation</a></p><p>Ces deux fonctionnalités fonctionnent de la même manière, à une différence près : la durée de persistance des données dans le navigateur.</p><ul><li>localStorage stocke les éléments durablement (ils sont conservés même plusieurs jours après, alors que le navigateur a été fermé)</li><li>sessionStorage stocke les éléments le temps de la session (dès que le navigateur est fermé, les données sont supprimées)</li></ul><p>Les deux fonctionnalités stockent les éléments dans un structure ressemblant à un tableau.</p><ul><li>On peut y ajouter des éléments avec la méthode <code>.setItem(&#39;nomDeLItem&#39;, &#39;valeurAssociée&#39;)</code></li><li>On peut y récupérer des éléments avec la méthode <code>.getItem(&#39;nomDeLItem&#39;)</code></li><li>On peut y supprimer des éléments avec la méthode <code>.removeItem(&#39;nomDeLItem&#39;)</code></li><li>On peut en effacer tout le contenu avec la méthode <code>.clear()</code></li></ul><p>La valeur que l&#39;on souhaite stocker doit être une valeur textuelle. Nous allons donc le plus souvent devoir convertir nos éléments en JSON (avec <code>JSON.stringify()</code> par exemple).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On stocke un élément durablement</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uneValeurDeTest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On affiche cet élément</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;uneValeurDeTest&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On stocke un élément pour la durée de la session</span></span>
<span class="line">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uneValeurDeTest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On affiche cet élément</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;uneValeurDeTest&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="les-timers" tabindex="-1"><a class="header-anchor" href="#les-timers"><span>Les timers</span></a></h2><h3 id="les-intervalles" tabindex="-1"><a class="header-anchor" href="#les-intervalles"><span>Les intervalles</span></a></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" target="_blank" rel="noopener noreferrer">Documentation</a></p><p>Un intervalle permet de répéter une action à intervalle régulier (toutes les secondes par exemple). Nous allons utiliser la fonction <code>setInterval()</code> pour ce genre d&#39;opération. Elle attend 2 paramètres :</p><ul><li>L&#39;action à répéter (une fonction de callback ou une fonction anonyme)</li><li>Le délai (en millisecondes)</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On peut récupérer l&#39;identifiant de l&#39;interval, pour nous permettre de l&#39;arrêter un jour, par exemple.</span></span>
<span class="line"><span class="token keyword">let</span> idInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Il s&#39;est passé 1 seconde depuis mon dernier appel</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">1000</span> <span class="token comment">// Une seconde, en millisecondes</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Arrête l&#39;exécution de l&#39;intervalle</span></span>
<span class="line"><span class="token function">clearInterval</span><span class="token punctuation">(</span>idInterval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="les-comptes-a-rebours" tabindex="-1"><a class="header-anchor" href="#les-comptes-a-rebours"><span>Les comptes à rebours</span></a></h3><p><a href="https://developer.mozilla.org/fr/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout" target="_blank" rel="noopener noreferrer">Documentation</a></p><p>À l&#39;opposé, le compte à rebours permet d&#39;attendre un temps (en millisecondes) avant d&#39;effectuer une action. On utilise la fonction <code>setTimeout()</code> qui prend également 2 paramètres :</p><ul><li>L&#39;action à exécuter (une fonction de callback ou une fonction anonyme)</li><li>Le délai (en millisecondes)</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On peut récupérer l&#39;identifiant du compte à rebours, pour nous permettre de l&#39;arrêter avant son exécution, par exemple.</span></span>
<span class="line"><span class="token keyword">let</span> idTimeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Je me suis exécuté après 10 secondes d&#39;attente</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">10000</span> <span class="token comment">// 10 secondes, en millisecondes</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Arrête l&#39;exécution du compte à rebours</span></span>
<span class="line"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>idTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="manier-les-dates-en-js" tabindex="-1"><a class="header-anchor" href="#manier-les-dates-en-js"><span>Manier les dates en JS</span></a></h2><p><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener noreferrer">Documentation</a></p><p>L&#39;objet <code>Date</code> permet de manipuler les dates, via diverses méthodes.</p><h3 id="creer-un-objet-date" tabindex="-1"><a class="header-anchor" href="#creer-un-objet-date"><span>Créer un objet date</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Sans argument, cet objet contient la date du jour</span></span>
<span class="line"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Crée un objet contenant la date du 21/04/2021</span></span>
<span class="line"><span class="token keyword">let</span> soon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2021-04-21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Crée un objet contenant la date du 21/04/2021 à 13h00</span></span>
<span class="line"><span class="token keyword">let</span> soonWithHour <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2021-04-21T13:00:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recuperer-des-informations-sur-la-date" tabindex="-1"><a class="header-anchor" href="#recuperer-des-informations-sur-la-date"><span>Récupérer des informations sur la date</span></a></h3><ul><li><code>.getDate()</code> retourne le jour du mois (entre 1 et 31)</li><li><code>.getDay()</code> retourne le jour de la semaine (entre 0 et 6, 0 étant dimanche et 6 samedi)</li><li><code>.getMonth()</code> retourne le mois (entre 0 et 11, 0 pour janvier et 11 pour décembre)</li><li><code>.getFullYear()</code> retourne l&#39;année (2021 au moment de l&#39;écriture de ce cours)</li><li><code>.getHours()</code> retourne l&#39;heure (entre 0 et 23)</li><li><code>.getMinutes()</code> et <code>.getSeconds()</code> retourne les minutes et les secondes</li><li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Date#m%C3%A9thodes_des_instances" target="_blank" rel="noopener noreferrer">etc.</a></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Sans argument, cet objet contient la date du jour</span></span>
<span class="line"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Affiche la date actuelle (21/04/2021 09:30 par exemple)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pour récupérer une date formatée selon la langue en cours</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="des-librairies-outils-du-quotidien" tabindex="-1"><a class="header-anchor" href="#des-librairies-outils-du-quotidien"><span>Des librairies / outils du quotidien</span></a></h2><p>Un ensemble d&#39;outils que l&#39;équipe Drakona utilise pour embellir / améliorer ses sites. N&#39;hésitez pas à nous en envoyer d&#39;autres 😉 .</p><h3 id="librairies-generales" tabindex="-1"><a class="header-anchor" href="#librairies-generales"><span>Librairies générales</span></a></h3><ul><li><a href="https://getbootstrap.com/" target="_blank" rel="noopener noreferrer">Bootstrap</a></li><li><a href="https://get.foundation/" target="_blank" rel="noopener noreferrer">Foundation</a></li></ul><h3 id="animations" tabindex="-1"><a class="header-anchor" href="#animations"><span>Animations</span></a></h3><ul><li><a href="https://openclassrooms.com/fr/courses/5919246-creez-des-animations-css-modernes" target="_blank" rel="noopener noreferrer">Avoir de bonnes bases sur l&#39;animation CSS</a> est important (et souvent suffisant pour les animations) (<a href="https://developer.mozilla.org/fr/docs/Web/CSS/animation" target="_blank" rel="noopener noreferrer">documentation MDN sur le sujet</a>)</li><li><a href="https://api.jquery.com/animate/" target="_blank" rel="noopener noreferrer">La méthode <code>animate()</code> de JQuery</a> est très pratique pour animer ce que vous voulez avec des propriétés CSS.</li><li>Pour aller beaucoup plus loin, vous pouvez utiliser <a href="https://greensock.com/" target="_blank" rel="noopener noreferrer">des librairies dédiées à l&#39;animation en JS, comme GreenSock</a></li></ul><h3 id="ameliorer-les-champs-de-formulaire" tabindex="-1"><a class="header-anchor" href="#ameliorer-les-champs-de-formulaire"><span>Améliorer les champs de formulaire</span></a></h3>`,40)),e("ul",null,[n[6]||(n[6]=e("li",null,[e("a",{href:"https://www.dropzonejs.com/",target:"_blank",rel:"noopener noreferrer"},"Dropzone"),s(" pour les champs "),e("code",null,"file")],-1)),e("li",null,[i(t,{to:"/js/select2.github.io/"},{default:p(()=>n[0]||(n[0]=[s("Select2")])),_:1}),n[1]||(n[1]=s(" ou ")),n[2]||(n[2]=e("a",{href:"https://joshuajohnson.co.uk/Choices/",target:"_blank",rel:"noopener noreferrer"},"Choices",-1)),n[3]||(n[3]=s(" pour les champs ")),n[4]||(n[4]=e("code",null,"<select>",-1)),n[5]||(n[5]=s(" (permettent la recherche, sélection simple de plusieurs éléments, etc.)"))])]),n[8]||(n[8]=a('<h3 id="une-mise-en-forme-animee" tabindex="-1"><a class="header-anchor" href="#une-mise-en-forme-animee"><span>Une mise en forme animée</span></a></h3><ul><li><a href="https://isotope.metafizzy.co/" target="_blank" rel="noopener noreferrer">Isotope</a> pour permettre de trier/filtrer des éléments d&#39;une liste</li><li><a href="https://scrollrevealjs.org/" target="_blank" rel="noopener noreferrer">scrollReveal</a> : animations au scroll dans la page</li><li><a href="https://kenwheeler.github.io/slick/" target="_blank" rel="noopener noreferrer">Slick</a> ou <a href="https://swiperjs.com/" target="_blank" rel="noopener noreferrer">Swipper</a> : carrousels pour faire défiler des contenus</li></ul><h3 id="accessibilite-et-design" tabindex="-1"><a class="header-anchor" href="#accessibilite-et-design"><span>Accessibilité et design</span></a></h3><ul><li><a href="https://color.review/" target="_blank" rel="noopener noreferrer">Color.review</a> pour vérifier si le contraste de vos couleurs est suffisant</li></ul><h3 id="afficher-des-cartes-interactives" tabindex="-1"><a class="header-anchor" href="#afficher-des-cartes-interactives"><span>Afficher des cartes interactives</span></a></h3><ul><li><a href="https://developers.google.com/maps/documentation?hl=fr" target="_blank" rel="noopener noreferrer">Google maps</a> (payant)</li><li><a href="https://www.mapbox.com/" target="_blank" rel="noopener noreferrer">MapBox</a> (payant)</li><li><a href="https://leafletjs.com/" target="_blank" rel="noopener noreferrer">Leaflet</a> (open-source mais plus complexe à prendre en main)</li></ul>',6))])}const v=l(u,[["render",d],["__file","98-outils.html.vue"]]),h=JSON.parse('{"path":"/js/98-outils.html","title":"Outils utiles","lang":"fr-FR","frontmatter":{"date":"2021-04-16T00:00:00.000Z"},"headers":[{"level":2,"title":"Déclencher du code une fois la page chargée","slug":"declencher-du-code-une-fois-la-page-chargee","link":"#declencher-du-code-une-fois-la-page-chargee","children":[]},{"level":2,"title":"LocalStorage / SessionStorage","slug":"localstorage-sessionstorage","link":"#localstorage-sessionstorage","children":[]},{"level":2,"title":"Les timers","slug":"les-timers","link":"#les-timers","children":[{"level":3,"title":"Les intervalles","slug":"les-intervalles","link":"#les-intervalles","children":[]},{"level":3,"title":"Les comptes à rebours","slug":"les-comptes-a-rebours","link":"#les-comptes-a-rebours","children":[]}]},{"level":2,"title":"Manier les dates en JS","slug":"manier-les-dates-en-js","link":"#manier-les-dates-en-js","children":[{"level":3,"title":"Créer un objet date","slug":"creer-un-objet-date","link":"#creer-un-objet-date","children":[]},{"level":3,"title":"Récupérer des informations sur la date","slug":"recuperer-des-informations-sur-la-date","link":"#recuperer-des-informations-sur-la-date","children":[]}]},{"level":2,"title":"Des librairies / outils du quotidien","slug":"des-librairies-outils-du-quotidien","link":"#des-librairies-outils-du-quotidien","children":[{"level":3,"title":"Librairies générales","slug":"librairies-generales","link":"#librairies-generales","children":[]},{"level":3,"title":"Animations","slug":"animations","link":"#animations","children":[]},{"level":3,"title":"Améliorer les champs de formulaire","slug":"ameliorer-les-champs-de-formulaire","link":"#ameliorer-les-champs-de-formulaire","children":[]},{"level":3,"title":"Une mise en forme animée","slug":"une-mise-en-forme-animee","link":"#une-mise-en-forme-animee","children":[]},{"level":3,"title":"Accessibilité et design","slug":"accessibilite-et-design","link":"#accessibilite-et-design","children":[]},{"level":3,"title":"Afficher des cartes interactives","slug":"afficher-des-cartes-interactives","link":"#afficher-des-cartes-interactives","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"js/98-outils.md"}');export{v as comp,h as data};
