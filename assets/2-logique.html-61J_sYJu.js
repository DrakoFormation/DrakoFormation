import{aj as s,ak as a,al as e,aq as t}from"./app-BkblVdII.js";const l={};function i(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="manipulation-logique" tabindex="-1"><a class="header-anchor" href="#manipulation-logique"><span>Manipulation logique</span></a></h1><h2 id="operateurs-arithmetiques" tabindex="-1"><a class="header-anchor" href="#operateurs-arithmetiques"><span>Opérateurs arithmétiques</span></a></h2><h3 id="addition-attention-cet-operateur-sert-egalement-a-la-concatenation-de-chaines-de-caracteres" tabindex="-1"><a class="header-anchor" href="#addition-attention-cet-operateur-sert-egalement-a-la-concatenation-de-chaines-de-caracteres"><span>Addition <code>+</code> (attention, cet opérateur sert également à la concaténation de chaînes de caractères)</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 2</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Ajoute 2 à result</span></span>
<span class="line">result <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Ajoute 2 à result</span></span>
<span class="line">result<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// Ajoute 1 à result</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="soustraction" tabindex="-1"><a class="header-anchor" href="#soustraction"><span>Soustraction <code>-</code></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 9</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Enlève 2 à result</span></span>
<span class="line">result <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Enlève 2 à result</span></span>
<span class="line">result<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// Enlève 1 à result</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="division" tabindex="-1"><a class="header-anchor" href="#division"><span>Division <code>/</code></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 5</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Divise result par 2</span></span>
<span class="line">result <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Divise result par 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiplication" tabindex="-1"><a class="header-anchor" href="#multiplication"><span>Multiplication <code>*</code></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 20</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Multiplie result par 2</span></span>
<span class="line">result <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Multiplie result par 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modulo-reste-de-la-division-d-un-nombre-par-un-autre" tabindex="-1"><a class="header-anchor" href="#modulo-reste-de-la-division-d-un-nombre-par-un-autre"><span>Modulo <code>%</code> (reste de la division d&#39;un nombre par un autre)</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// le reste de la division de 5 / 4 vaut 1</span></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// le reste de 1 par 2 vaut 1</span></span>
<span class="line">result <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Idem</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comparaisons" tabindex="-1"><a class="header-anchor" href="#comparaisons"><span>Comparaisons</span></a></h2><p>Une comparaison est une opération dont le résultat est un booléen (<code>true</code> ou <code>false</code>) :</p><ul><li><code>true</code> si la comparaison / le test est vrai</li><li><code>false</code> si la comparaison / le test est faux</li></ul><p>Les opérateurs de comparaison :</p><ul><li><code>a == b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont égales</li><li><code>a === b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont égales <strong>et</strong> de même type</li><li><code>a != b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont différentes</li><li><code>a !== b</code> pour tester si les valeurs de <code>a</code> et <code>b</code> sont différentes <strong>ou</strong> de type différent</li><li><code>a &gt; b</code> pour tester si la valeur de <code>a</code> est strictement supérieure à celle de <code>b</code></li><li><code>a &gt;= b</code> pour tester si la valeur de <code>a</code> est supérieure ou égale à celle de <code>b</code></li><li><code>a &lt; b</code> pour tester si la valeur de <code>a</code> est strictement inférieure à celle de <code>b</code></li><li><code>a &lt;= b</code> pour tester si la valeur de <code>a</code> est inférieure ou égale à celle de <code>b</code></li></ul><h3 id="verifications-de-type" tabindex="-1"><a class="header-anchor" href="#verifications-de-type"><span>Vérifications de type</span></a></h3><p>Différentes fonctions fournies par Javascript permettent de tester le type d&#39;une valeur (et retournent un booléen) :</p><ul><li><code>isNaN(x)</code> vérifie si la variable <code>x</code> contient une valeur autre qu&#39;un nombre (retourne <code>true</code> si <code>x</code> n&#39;est pas un nombre).</li><li><code>isInteger(x)</code> vérifie si la variable <code>x</code> contient une valeur de type nombre entier (nombre sans virgule : retourne <code>true</code> si c&#39;est le cas).</li><li><code>Array.isArray(x)</code> retourne <code>true</code> si <code>x</code> est un objet de type <code>Array</code></li><li>Beaucoup d&#39;autres à découvrir 😉 .</li></ul><h2 id="operateurs-logiques" tabindex="-1"><a class="header-anchor" href="#operateurs-logiques"><span>Opérateurs logiques</span></a></h2><p>Les opérateurs logiques permettent d&#39;obtenir une valeur booléenne à partir d&#39;autres valeurs booléennes.</p><ul><li><code>&amp;&amp;</code> est un &quot;et&quot; logique : il renvoie <code>true</code> si (et seulement si) la valeur à gauche <strong>et</strong> la valeur à droite valent <code>true</code></li><li><code>||</code> est un &quot;ou&quot; logique : il renvoie <code>true</code> si la valeur à gauche <strong>ou</strong> la valeur à droite vaut <code>true</code></li><li><code>!</code> est une négation : il renvoie <code>true</code> si la valeur (notée après) vaut <code>false</code> et renvoie <code>false</code> si la valeur vaut <code>true</code></li></ul><p>Une table de vérité :</p><p>| a | b | | !a | <code>a &amp;&amp; b</code> | <code>a || b</code> | | ----- | ----- |-| ----- | -------- | -------- | | false | false | | true | false | false | | false | true | | true | false | true | | false | true | | true | false | true | | true | false | | false | false | true | | true | true | | false | true | true |</p><h2 id="concatenation" tabindex="-1"><a class="header-anchor" href="#concatenation"><span>Concaténation</span></a></h2><p>En javascript, pour assembler 2 chaînes de caractères, on utilise l&#39;opérateur <code>+</code> (le comportement de cet opérateur change selon le type des données)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span> <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;test42&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;77&quot;</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;777&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &quot;Hello world!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maniere-moderne-es6" tabindex="-1"><a class="header-anchor" href="#maniere-moderne-es6"><span>Manière moderne (ES6)</span></a></h3><p>La chaîne se met entre anti-quotes et la chaîne à insérer se place dans les accolades : <code>\${}</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche Hello world!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions"><span>Conditions</span></a></h2><p>Ces structures de contrôle nous permettent d&#39;exécuter des instructions si certains pré-requis sont vérifiés (sinon, ils ne s&#39;exécuteront pas et le code continuera).</p><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>If</span></a></h3><p>La condition <code>if</code> est un &quot;si&quot; : &quot;Si cette condition est vraie, alors faire les instructions suivantes&quot;.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Dans les parenthèses de notre if, l&#39;expression devra renvoyer un booléen</span></span>
<span class="line"><span class="token comment">// Si ce booléen vaut true, une alerte sera affichée</span></span>
<span class="line"><span class="token comment">// Dans les deux cas, le code après le if est exécuté</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">&amp;&amp;</span> test2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;conditions respectées&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On peut également donner des instructions à exécuter si la condition du <code>if</code> n&#39;est pas respectée avec un <code>else</code> (sinon) :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On demande à l&#39;utilisateur de saisir une réponse à la question</span></span>
<span class="line"><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Êtes-vous là ? Répondre &#39;oui&#39; ou &#39;yes&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Si la réponse de l&#39;utilisateur (contenue dans la variable &quot;answer&quot;) est égale à &quot;oui&quot; ou &quot;yes&quot;,</span></span>
<span class="line"><span class="token comment">// alors on rentre dans la condition</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token string">&quot;oui&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Vous êtes là !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// On affiche une alerte</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Si la condition du if n&#39;est pas respectée, on affiche une autre alerte</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dommage, un gâteau vous attendais...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On peut également vérifier plusieurs conditions (plus précises) d&#39;affilée :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Êtes-vous là ? Répondre &#39;oui&#39; ou &#39;yes&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si la réponse est oui, on affiche une alerte en français</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token string">&quot;oui&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Vous êtes ici !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">==</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Si la réponse est yes, on affiche une alerte en anglais</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;You are here!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Si la condition du if n&#39;est pas respectée, on affiche une autre alerte</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dommage, un gâteau vous attendais...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>Switch</span></a></h3><p>Si vous voulez faire plusieurs <code>else if</code> (en général au dela de 3 ou 4), il devient intéressant d&#39;utiliser le <code>switch</code>. Cette structure vous permet de vérifier la valeur contenue dans une variable et d&#39;appeler des instructions en fonction.</p><p>Attention, le switch fait une comparaison avec l&#39;opérateur <code>===</code> et vérifie donc également le type de la valeur.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Êtes-vous là ? Répondre &#39;oui&#39;, &#39;yes&#39; ou &#39;да&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;oui&#39;</span><span class="token operator">:</span> <span class="token comment">// équivaut à answer === &#39;oui&#39; </span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Vous êtes ici !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Ce break permet de sortir du switch, une fois les instructions </span></span>
<span class="line">        <span class="token comment">// au dessus réalisées. S&#39;il n&#39;est pas là, le script continu et </span></span>
<span class="line">        <span class="token comment">// exécute les instructions du case suivant</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;yes&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;You are here!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;да&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Вы здесь!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// équivaut à else et n&#39;est pas obligatoire</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dommage, un gâteau vous attendais...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Faire un &quot;ou&quot; dans un switch :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Êtes-vous là ? Répondre &#39;oui&#39;, &#39;yes&#39; ou &#39;да&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;oui&#39;</span><span class="token operator">:</span> </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;yes&#39;</span><span class="token operator">:</span> </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;да&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// Dans les trois cas, nous affichons le même message</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Vous êtes ici !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// équivaut à else et n&#39;est pas obligatoire</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dommage, un gâteau vous attendais...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ternaire" tabindex="-1"><a class="header-anchor" href="#ternaire"><span>Ternaire</span></a></h3><p>La condition ternaire est simplement un <code>if...else</code> en une seule ligne. Il se structure ainsi :</p><p><code>condition ? instruction si true : instructions si false</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On demande à l&#39;utilisateur de saisir une réponse à la question</span></span>
<span class="line"><span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Êtes-vous là ? Répondre &#39;oui&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si answer vaut oui, on affiche &quot;Vous êtes ici !&quot;, sinon &quot;Dommage, un gâteau vous attendais...&quot;</span></span>
<span class="line">answer <span class="token operator">==</span> <span class="token string">&#39;oui&#39;</span> <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Vous êtes ici !&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dommage, un gâteau vous attendais...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boucles" tabindex="-1"><a class="header-anchor" href="#boucles"><span>Boucles</span></a></h2><p>Les boucles sont le plus souvent utilisées pour parcourir des ensembles de données, comme les tableaux.</p><p>3 éléments sont essentiels dans une boucle :</p><ul><li>une initialisation (un contexte de départ, pour entrer dans la boucle)</li><li>une condition de sortie (on doit pouvoir sortir de la boucle)</li><li>un pas (à quelle vitesse parcourt-on la boucle ? Parcourt-on tous les éléments ?)</li></ul><p>Nous allons voir comment parcourir le tableau suivant de différente manière :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> tab <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;truc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">99.99</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>While</span></a></h3><p>On peut traduire <code>while</code> par &quot;Tant que&quot;. Cette boucle prend une condition et exécute les instructions dans son corps tant que cette condition est respectée.</p><p>Parcourons toutes les valeurs de <code>tab</code> :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On crée un compteur, qui vous nous permettre de savoir</span></span>
<span class="line"><span class="token comment">// où nous en sommes dans le parcours de notre tableau</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On récupère la longueur du tableau (nombre d&#39;éléments)</span></span>
<span class="line"><span class="token comment">// et on le parcourt tant que i est plus petit </span></span>
<span class="line"><span class="token comment">// que le nombre d&#39;éléments du tableau </span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">L&#39;index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> de tab vaut </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Si on oublie cette incrémentation, on ne sort jamais de notre boucle...</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for"><span>for</span></a></h3><p>Avec une boucle <code>for</code>, on définit directement un compteur, sa valeur maximum (cas d&#39;arrêt) et sa progression (ou incrémentation) :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">L&#39;index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> de tab vaut </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of"><span>for...of</span></a></h3><p>La boucle <code>for...of</code> permet de récupérer directement la valeur de l&#39;élément en cours, sans avoir à passer par <code>tab[i]</code> :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// J&#39;utilise à nouveau un compteur, pour afficher le numéro de la ligne.</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Bien entendu, vous nommez votre variable comme vous le souhaitez,</span></span>
<span class="line"><span class="token comment">// pas forcément element.</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">L&#39;index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> de tab vaut </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>forEach</span></a></h3><p>La foreach fonctionne un peu comme la boucle <code>for...of</code> si ce n&#39;est qu&#39;elle utilise une fonction qui récupère en paramètre la valeur de la ligne du tableau au passage de la boucle :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// J&#39;utilise à nouveau un compteur, pour afficher le numéro de la ligne.</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">tab<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">L&#39;index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> de tab vaut </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La même chose avec une fonction fléchée :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// J&#39;utilise à nouveau un compteur, pour afficher le numéro de la ligne.</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">tab<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">L&#39;index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> de tab vaut </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in"><span>For...in</span></a></h3><p>Fonctionne sur les objets et permet d&#39;en parcourir les propriétés :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Rémi&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">hp</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">defense</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">strength</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> propriete <span class="token keyword">in</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// La constante propriete contient le nom de la propriété</span></span>
<span class="line">    <span class="token comment">// Pour récupérer la valeur de la propriété, il faut utiliser </span></span>
<span class="line">    <span class="token comment">// la notation player[&#39;nomDeLaPropriete&#39;], qui est strictement équivalente à player.nomDeLaPropriete</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Valeur lié à la propriété &#39;</span> <span class="token operator">+</span> propriete <span class="token operator">+</span> <span class="token string">&#39; : &#39;</span><span class="token operator">+</span> player<span class="token punctuation">[</span>propriete<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercice-1-utiliser-les-conditions-et-les-fonctions" tabindex="-1"><a class="header-anchor" href="#exercice-1-utiliser-les-conditions-et-les-fonctions"><span>Exercice 1 : utiliser les conditions et les fonctions</span></a></h2><p>Une petite calculatrice de montant TTC à partir du HT :</p><ul><li>On va demander un montant HT (hors taxe) à l&#39;utilisateur (avec la fonction <code>prompt</code>)</li><li>si ce que l&#39;utilisateur a entré n&#39;est pas un nombre (utiliser la fonction <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN" target="_blank" rel="noopener noreferrer">isNaN()</a>, afficher un message d&#39;erreur avec <code>alert()</code></li><li>sinon, calculer le montant TTC selon la formule suivante : <code>montantTTC = montantHT * 1.2</code></li></ul><p>Un <a href="https://github.com/Dreeckan/exercices-js/blob/main/bases/1-conditions.js" target="_blank" rel="noopener noreferrer">corrigé est disponible sur Github</a></p><h2 id="exercice-2-les-boucles" tabindex="-1"><a class="header-anchor" href="#exercice-2-les-boucles"><span>Exercice 2 : les boucles</span></a></h2><h3 id="_2-1-liste-d-animaux" tabindex="-1"><a class="header-anchor" href="#_2-1-liste-d-animaux"><span>2.1. Liste d&#39;animaux</span></a></h3><ul><li><p>Créer un tableau de données contenant les données suivantes (chaque ligne peut être un tableau ou un objet)</p><pre><code>Animal : Chat | Nom : Lily
Animal : Chien | Nom : Tango
Animal : Poisson | Nom : Maurice
Animal : Vache | Nom : Françoise
Animal : Raton | Nom : Rocket
</code></pre></li><li><p>Parcourir le tableau et générer l&#39;affichage ci-dessus pour chacun des 4 types de boucle :</p><ol><li>while</li><li>for</li><li>for...of</li><li>forEach</li></ol></li></ul><h3 id="_2-2-afficher-des-nombres-pairs" tabindex="-1"><a class="header-anchor" href="#_2-2-afficher-des-nombres-pairs"><span>2.2. Afficher des nombres pairs</span></a></h3><ul><li>Demander à l&#39;utilisateur un nombre à l&#39;aide de la fonction <code>prompt()</code><ul><li>Ce nombre doit être compris entre 10 et 100. Si ça n&#39;est pas le cas (ou si ça n&#39;est pas un nombre), afficher un message d&#39;erreur avec la fonction <code>alert()</code></li></ul></li><li>Afficher tous les nombres entiers pairs entre 2 et ce nombre à l&#39;aide de <code>console.log()</code> et d&#39;une boucle (à vous de voir laquelle)</li></ul><h2 id="exercice-3-les-fonctions" tabindex="-1"><a class="header-anchor" href="#exercice-3-les-fonctions"><span>Exercice 3 : les fonctions</span></a></h2><h3 id="_3-1-trouver-le-mot-le-plus-court-long" tabindex="-1"><a class="header-anchor" href="#_3-1-trouver-le-mot-le-plus-court-long"><span>3.1. Trouver le mot le plus court/long</span></a></h3><ul><li>Créer un tableau avec les mots suivants : <ul><li>Cucurbitacée</li><li>Landau</li><li>Chatons</li><li>Morceau</li><li>Gâteau</li><li>Pâtisserie</li></ul></li><li>Écrire une fonction renvoyant le mot de plus court et appeler cette fonction (afficher le résultat dans un <code>console.log()</code>)</li><li>Écrire une fonction renvoyant le mot de plus long et appeler cette fonction (afficher le résultat dans un <code>console.log()</code>)</li></ul><p>Indices / rappels utiles : Vous pouvez avoir la taille d&#39;une chaine de caractères avec <code>.length</code> :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;une chaine de caractères&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie le nombre de caractères</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-chifoumi" tabindex="-1"><a class="header-anchor" href="#_3-2-chifoumi"><span>3.2. Chifoumi</span></a></h3><h4 id="principe" tabindex="-1"><a class="header-anchor" href="#principe"><span>Principe</span></a></h4><p>L&#39;utilisateur va saisir le mot <code>pierre</code>, <code>feuille</code> ou <code>ciseau</code> (à l&#39;aide de la fonction <code>prompt</code>, toujours). L&#39;ordinateur choisi aléatoirement l&#39;une des 3 possibilités et il faut déterminer qui a gagné et l&#39;afficher à l&#39;utilisateur (<code>alert()</code> ou <code>console.log()</code>, comme vous préférez).</p><ul><li>Si le joueur et l&#39;ordinateur font le même choix on obtient une égalité.</li><li>Le ciseau est écrasé par la pierre (la pierre gagne, le ciseau perd).</li><li>La feuille est découpée par le ciseau (le ciseau gagne, la feuille perd).</li><li>La pierre est enveloppée par la feuille (la feuille gagne, la pierre perd).</li></ul><h4 id="astuces" tabindex="-1"><a class="header-anchor" href="#astuces"><span>Astuces</span></a></h4><ul><li>Pour récupérer un nombre aléatoire, utiliser des méthodes de l&#39;objet <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener noreferrer">Math</a></li><li>Il faut vérifier la saisie de l&#39;utilisateur. Il peut également entrer les mots avec des majuscules (et il doit pouvoir le faire sans avoir d&#39;erreur). (il existe une fonction en JS pour mettre un texte en minuscule)</li></ul><h4 id="pour-aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#pour-aller-plus-loin"><span>Pour aller plus loin</span></a></h4><ul><li>Une partie se joue en 2 manches gagnantes. Tant que personne n&#39;a gagné 2 manches, demander à nouveau son choix à l&#39;utilisateur (en indiquant les points de chaque joueur)</li></ul><p>Un <a href="https://github.com/Dreeckan/exercices-js/blob/main/bases/3-2-chifoumi.js" target="_blank" rel="noopener noreferrer">corrigé est disponible sur Github</a></p><h3 id="_3-3-liste-de-taches" tabindex="-1"><a class="header-anchor" href="#_3-3-liste-de-taches"><span>3.3. Liste de tâches</span></a></h3><h4 id="principe-1" tabindex="-1"><a class="header-anchor" href="#principe-1"><span>Principe</span></a></h4><p>On veut créer une liste de tâches (qui s&#39;affichera dans la console avec <code>console.log()</code>) et un ensemble de fonctions pour manipuler cette liste :</p><ul><li>lister toutes les tâches (ainsi que leur nombre)</li><li>ajouter une tâche</li><li>chercher une tâche (on cherche une correspondance exacte dans le texte entré)</li><li>supprimer une tâche (à partir du numéro de la tâche)</li><li>supprimer toutes les tâches</li></ul><p>Dans un premier temps, il n&#39;y a pas d&#39;interface (pas de prompt), tout se passe dans votre code et la console. Créer vos fonctions et les tester directement dans votre code.</p><h4 id="astuces-1" tabindex="-1"><a class="header-anchor" href="#astuces-1"><span>Astuces</span></a></h4><ul><li>On va se servir des tableaux (voir l&#39;objet <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">Array</a>) pour stocker et manipuler la liste</li><li>Pas besoin de boucle pour afficher le tableau, un simple <code>console.log</code> permet de l&#39;afficher en entier</li></ul><h4 id="aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#aller-plus-loin"><span>Aller plus loin</span></a></h4><ul><li>Faire en sorte que ce soit l&#39;utilisateur qui choisisse les opérations à effectuer sur la liste (entrer des données, et lesquelles, chercher une tâche, etc.)</li></ul><h3 id="_4-un-jeu-de-role" tabindex="-1"><a class="header-anchor" href="#_4-un-jeu-de-role"><span>4. Un Jeu de Rôle</span></a></h3><p>L&#39;utilisateur est un aventurier qui entre dans un donjon. En entrant, il va choisir son arme et son armure, puis combattre le Maitre du Donjon.</p><h4 id="regles-du-jeu" tabindex="-1"><a class="header-anchor" href="#regles-du-jeu"><span>Règles du jeu</span></a></h4><ul><li>L&#39;aventurier possède 100 points de vie</li><li>L&#39;aventurier va avoir le choix entre 3 armes, chacune infligeant des dégâts plus ou moins élevés (bois: 2, fer: 5, magique: 10) et 3 armures, protégeant d&#39;une certaine quantité de dégâts (bois : 1, fer: 3, magique: 5).</li><li>Une fois l&#39;équipement choisi, le combat avec le Maitre du Donjon commence. <ul><li>Le Maitre du Donjon a 150 points de vie, inflige 6 points de dégâts par tour et possède une armure le protégeant de 4 points de dégâts</li><li>Les deux combattants s&#39;attaquent mutuellement (le Maitre du Donjon commence) jusqu&#39;à ce que les points de vie de l&#39;un des deux atteigne 0</li></ul></li></ul><h4 id="affichage" tabindex="-1"><a class="header-anchor" href="#affichage"><span>Affichage</span></a></h4><ul><li>Faire choisir l&#39;équipement à l&#39;aventurier</li><li>Lui annoncer les résultats de chaque attaque (qui attaque et combien de points de dégâts sont infligés)</li><li>Lui annoncer qui a gagné</li></ul><h4 id="aller-plus-loin-1" tabindex="-1"><a class="header-anchor" href="#aller-plus-loin-1"><span>Aller plus loin</span></a></h4><ul><li>Ajouter un peu d&#39;aléatoire : <ul><li>le Maître du Donjon possède entre 125 et 175 points de vie</li><li>le joueur possède entre 100 et 125 points de vie</li><li>à chaque fois que l&#39;un des personnages (l&#39;aventurier ou le maitre du donjon) attaque, les dégâts produits sont entre 1 et la puissance de l&#39;arme (exemple : 1 à 5 points de dégâts pour l&#39;épée magique)</li><li>le fonctionnement de l&#39;armure reste inchangé</li></ul></li></ul>`,114)]))}const c=s(l,[["render",i],["__file","2-logique.html.vue"]]),r=JSON.parse(`{"path":"/js/2-logique.html","title":"Manipulation logique","lang":"fr-FR","frontmatter":{"date":"2021-04-02T00:00:00.000Z"},"headers":[{"level":2,"title":"Opérateurs arithmétiques","slug":"operateurs-arithmetiques","link":"#operateurs-arithmetiques","children":[{"level":3,"title":"Addition + (attention, cet opérateur sert également à la concaténation de chaînes de caractères)","slug":"addition-attention-cet-operateur-sert-egalement-a-la-concatenation-de-chaines-de-caracteres","link":"#addition-attention-cet-operateur-sert-egalement-a-la-concatenation-de-chaines-de-caracteres","children":[]},{"level":3,"title":"Soustraction -","slug":"soustraction","link":"#soustraction","children":[]},{"level":3,"title":"Division /","slug":"division","link":"#division","children":[]},{"level":3,"title":"Multiplication *","slug":"multiplication","link":"#multiplication","children":[]},{"level":3,"title":"Modulo % (reste de la division d'un nombre par un autre)","slug":"modulo-reste-de-la-division-d-un-nombre-par-un-autre","link":"#modulo-reste-de-la-division-d-un-nombre-par-un-autre","children":[]}]},{"level":2,"title":"Comparaisons","slug":"comparaisons","link":"#comparaisons","children":[{"level":3,"title":"Vérifications de type","slug":"verifications-de-type","link":"#verifications-de-type","children":[]}]},{"level":2,"title":"Opérateurs logiques","slug":"operateurs-logiques","link":"#operateurs-logiques","children":[]},{"level":2,"title":"Concaténation","slug":"concatenation","link":"#concatenation","children":[{"level":3,"title":"Manière moderne (ES6)","slug":"maniere-moderne-es6","link":"#maniere-moderne-es6","children":[]}]},{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[{"level":3,"title":"If","slug":"if","link":"#if","children":[]},{"level":3,"title":"Switch","slug":"switch","link":"#switch","children":[]},{"level":3,"title":"Ternaire","slug":"ternaire","link":"#ternaire","children":[]}]},{"level":2,"title":"Boucles","slug":"boucles","link":"#boucles","children":[{"level":3,"title":"While","slug":"while","link":"#while","children":[]},{"level":3,"title":"for","slug":"for","link":"#for","children":[]},{"level":3,"title":"for...of","slug":"for-of","link":"#for-of","children":[]},{"level":3,"title":"forEach","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"For...in","slug":"for-in","link":"#for-in","children":[]}]},{"level":2,"title":"Exercice 1 : utiliser les conditions et les fonctions","slug":"exercice-1-utiliser-les-conditions-et-les-fonctions","link":"#exercice-1-utiliser-les-conditions-et-les-fonctions","children":[]},{"level":2,"title":"Exercice 2 : les boucles","slug":"exercice-2-les-boucles","link":"#exercice-2-les-boucles","children":[{"level":3,"title":"2.1. Liste d'animaux","slug":"_2-1-liste-d-animaux","link":"#_2-1-liste-d-animaux","children":[]},{"level":3,"title":"2.2. Afficher des nombres pairs","slug":"_2-2-afficher-des-nombres-pairs","link":"#_2-2-afficher-des-nombres-pairs","children":[]}]},{"level":2,"title":"Exercice 3 : les fonctions","slug":"exercice-3-les-fonctions","link":"#exercice-3-les-fonctions","children":[{"level":3,"title":"3.1. Trouver le mot le plus court/long","slug":"_3-1-trouver-le-mot-le-plus-court-long","link":"#_3-1-trouver-le-mot-le-plus-court-long","children":[]},{"level":3,"title":"3.2. Chifoumi","slug":"_3-2-chifoumi","link":"#_3-2-chifoumi","children":[]},{"level":3,"title":"3.3. Liste de tâches","slug":"_3-3-liste-de-taches","link":"#_3-3-liste-de-taches","children":[]},{"level":3,"title":"4. Un Jeu de Rôle","slug":"_4-un-jeu-de-role","link":"#_4-un-jeu-de-role","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"js/2-logique.md"}`);export{c as comp,r as data};
