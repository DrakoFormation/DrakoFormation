import{aj as o,ak as l,am as e,al as t,ar as i,aq as a}from"./app-BkblVdII.js";const n={};function s(u,r){return a(),l("div",null,r[0]||(r[0]=[e("h1",{id:"mise-en-commun-du-travail",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mise-en-commun-du-travail"},[e("span",null,"Mise en commun du travail")])],-1),e("p",null,"Introduction en vid√©o :",-1),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/b3e98e3f1df34ddfa2cf73f94b49b449",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),t('<p>Pour la plupart des projets, le travail de groupe est primordial. Git permet de grandement le simplifier, mais le faire en ligne de commande serait bien p√©nible.</p><p>C&#39;est pour √ßa (et bien d&#39;autres choses) que des outils en ligne existent, tels que :</p><ul><li><a href="https://www.github.com" target="_blank" rel="noopener noreferrer">GitHub</a></li><li><a href="https://bitbucket.org" target="_blank" rel="noopener noreferrer">BitBucket</a></li><li><a href="https://gitlab.com" target="_blank" rel="noopener noreferrer">GitLab</a></li><li>et s√ªrement bien d&#39;autres !</li></ul><p>Nous allons nous concentrer sur le premier, car le plus r√©pandu, mais sachez que GitLab et BitBucket peuvent √™tre install√©s gratuitement sur un serveur priv√© (c&#39;est ce que nous avons fait chez <a href="https://www.drakolab.fr" target="_blank" rel="noopener noreferrer">Drakona</a> üòâ ).</p><p>Je vous conseille donc de cr√©er au moins un compte sur <a href="https://www.github.com" target="_blank" rel="noopener noreferrer">GitHub</a>, qui pourra √©galement vous servir de portfolio ou de carte de visite !</p><h2 id="creer-un-repository-distant" tabindex="-1"><a class="header-anchor" href="#creer-un-repository-distant"><span>Cr√©er un repository distant</span></a></h2><p>En vid√©o :</p>',7),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/a3220709a8304d1c9f9b98fc1f204a51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),e("p",null,[i("Pour cr√©er un repository sur GitHub, il suffit d'aller sur "),e("a",{href:"https://github.com/new",target:"_blank",rel:"noopener noreferrer"},"la page de cr√©ation d'un d√©p√¥t"),i(", d'entrer un nom et de d√©cocher les cases... Et tout est pr√™t pour la suite.")],-1),e("h2",{id:"lier-le-local-et-le-distant",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#lier-le-local-et-le-distant"},[e("span",null,"Lier le local et le distant")])],-1),e("p",null,"En vid√©o :",-1),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/ba54e2869b2649299a88f5b7a57ac570",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),t('<p>Si vous avez d√©j√† un d√©p√¥t local <strong>non vide</strong> (avec au moins 1 commit), nous allons associer ce local avec le distant que nous avons cr√©√© sur GitHub avec la commande <code>git remote add origin git@github.com:cheminDuDepot.git</code> o√π <code>origin</code> est l&#39;alias (ou le nom) du d√©p√¥t distant, pour votre machine et <code>git@github.com:cheminDuDepot.git</code> le lien SSH vers votre d√©p√¥t distant.</p><p>Si vous n&#39;avez qu&#39;un repository distant <strong>non vide</strong> (avec au moins 1 commit), nous pouvons r√©cup√©rer les fichiers <strong>et</strong> lier les deux d√©p√¥ts avec <code>git clone git@github.com:cheminDuDepot.git</code> qui cr√©era un dossier portant le nom du projet, l√† o√π vous vous trouvez. Dans ce cas, le distant s&#39;appellera origin et sera directement li√© (le dossier est pr√™t √† √™tre utilis√©).</p><p>Si vous avez un dossier vide, il faut :</p><ul><li>initialiser un d√©p√¥t git avec <code>git init</code></li><li>cr√©er un premier fichier (ou un ensemble de fichiers)</li><li>cr√©er un premier commit</li><li>lier ce nouveau d√©p√¥t avec le d√©p√¥t distant <code>git remote add origin git@github.com:cheminDuDepot.git</code></li></ul><h2 id="push-et-pull" tabindex="-1"><a class="header-anchor" href="#push-et-pull"><span>Push et pull</span></a></h2><p>En vid√©o :</p>',6),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/dc3c6c9609ab48b6824ff7c3eeb69f91",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),t('<p>Maintenant que nous avons notre d√©p√¥t distant et qu&#39;il est li√© √† notre d√©p√¥t local, il est temps d&#39;envoyer et de r√©cup√©rer des informations vers et depuis celui-ci.</p><p>Des commandes courantes :</p><ul><li><code>git fetch</code> r√©cup√®re les informations <strong>sans changer vos fichiers locaux</strong> (permet simplement d&#39;avoir les informations du distant, s&#39;il y a de nouvelles branches, de nouveaux commits, etc.)</li><li><code>git pull origin nom-de-la-branche</code> est √† ex√©cuter en √©tant sur la branche <code>nom-de-la-branche</code> sur votre d√©p√¥t local et permet de la mettre √† jour par rapport √† la branche <code>nom-de-la-branche</code> du distant (vos fichiers sont modifi√©s et vous r√©cup√©rez les commits du distant)</li><li><code>git push origin nom-de-la-branche</code> est √† ex√©cuter en √©tant sur la branche <code>nom-de-la-branche</code> sur votre d√©p√¥t local et permet de mettre √† jour la branche distante avec les commits locaux</li><li><code>git push -u origin nom-de-la-branche</code> est √† ex√©cuter en √©tant sur la branche <code>nom-de-la-branche</code> sur votre d√©p√¥t local et permet de mettre √† jour le distant <strong>et</strong> de demander √† Git de retenir le lien entre la branche locale et la branche distante. Avec ce lien, vous pourrez vous contenter de lancer <code>git push</code> ou <code>git pull</code> sans plus d&#39;arguments (ce qui simplifie la vie üòâ ).</li></ul><h2 id="pull-request-pr" tabindex="-1"><a class="header-anchor" href="#pull-request-pr"><span>Pull Request (PR)</span></a></h2><p>En vid√©o :</p>',5),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/9d97b712d3ab448399f93663ccaaf42f",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),t('<p>Dans un projet √† plusieurs, personne ne doit modifier directement la branche principale (<code>main</code> ou <code>master</code> la plupart du temps), mais on travaille dans des branches s√©par√©es et, lorsqu&#39;elles sont termin√©es, on cr√©e une Pull Request sur le d√©p√¥t distant (GitHub pour nous), que l&#39;on fait relire (v√©rifier) par un coll√®gue jusqu&#39;√† validation. La branche peut alors √™tre fusionn√©e dans la branche principale (ou une autre branche de destination, √ßa arrive aussi). Je vous invite √† plut√¥t regarder la vid√©o, pour des exemples concrets.</p><h2 id="conventions-de-travail" tabindex="-1"><a class="header-anchor" href="#conventions-de-travail"><span>Conventions de travail</span></a></h2><p>Chez Drakona, nous utilisons un certain nombre de conventions pour travailler en √©quipe :</p><ul><li>Tout d√©veloppement (nouvelle fonctionnalit√©, correction de bug, etc.) a un ticket pour pr√©ciser le travail √† faire. <ul><li>Ce ticket contient en g√©n√©ral 3 sections : <ul><li>Quoi : que doit faire le ticket (sa finalit√©) ?</li><li>Comment : techniquement, comment r√©pondre √† la demande ?</li><li>Test / V√©rification : comment v√©rifier que le ticket a bien √©t√© r√©solu</li></ul></li></ul></li><li>Pour travailler, on cr√©e une branche : <ul><li>Depuis la branche principale (<code>main</code>) √† jour</li><li>qui contient le num√©ro et le nom du ticket (exemple : <code>42-creation-formulaire-de-contact</code>)</li><li>qu&#39;on √©crit en minuscule, en s√©parant chaque mot par un <code>-</code> ou un <code>_</code> (convention √† d√©finir au sein de l&#39;√©quipe)</li><li>on √©vite les caract√®res sp√©ciaux (qui peuvent poser probl√®me sur certains syst√®mes).</li></ul></li><li>Quand on cr√©e un commit, on reprend le num√©ro du ticket et on ajoute un message clair (Exemple : 42 - Cr√©ation du HTML du formulaire)</li><li>Chaque branche est li√©e √† un et un seul ticket (un ticket peut avoir plusieurs branches, dans certains cas)</li></ul><h2 id="merge-rebase-conflits" tabindex="-1"><a class="header-anchor" href="#merge-rebase-conflits"><span>Merge, rebase, conflits</span></a></h2><p>Une fois la <abbr title="Pull Request">PR</abbr> faite, relue et qu&#39;il faut la fusionner dans la branche principale, il ne reste plus qu&#39;√† appuyer sur le bouton <code>Merge Pull Request</code> sur la page GitHub. Malheureusement, si vous √™tes plusieurs √† avoir travaill√© sur les m√™mes fichiers, vous rencontrerez des conflits (Git ne sait pas quelles modifications il doit conserver ou comment les fusionner). Nous allons voir comment les r√©gler, pour permettre la fusion.</p><p>En vid√©o :</p>',7),e("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[e("iframe",{src:"https://www.loom.com/embed/5b54c6a7fdf840c8bf6cac233af4f0b6",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1),t('<p>La premi√®re √©tape est de retourner sur votre machine, afin de r√©gler les conflits. Pour cela, de nombreuses m√©thodes existent, mais la plus pratique (dans le cadre d&#39;un fonctionnement avec Github) reste d&#39;utiliser la commande <code>git rebase</code>.</p><p>Le rebase consiste √† changer le point de d√©part de votre branche (qui avait pour point de d√©part un commit, g√©n√©ralement de la branche principale) vers un autre commit, plus √† jour. Pour avoir un moyen plus visuel de comprendre ce changement, je vous invite √† regarder la vid√©o ci-dessus ou de tester sur un <a href="http://git-school.github.io/visualizing-git/#rewritten-history" target="_blank" rel="noopener noreferrer">outil de visualisation de Git</a>, tr√®s pratique pour apprendre (sur l&#39;exemple donn√©, il faut juste lancer la commande <code>git rebase master</code> pour voir un rebase en action).</p><p>Dans la plupart des cas, nous allons faire comme suit (je pars du principe que vous √™tes sur la branche √† rebase) :</p><ul><li><code>git checkout main</code> pour aller sur la branche principale</li><li><code>git pull origin main</code> (ou juste <code>git pull</code>) pour la mettre √† jour (et s&#39;assurer d&#39;avoir <strong>tous</strong> les derniers changements)</li><li><code>git checkout -</code> pour retourner sur la branche de travail</li><li><code>git rebase main</code> pour lancer le rebase</li><li>Il faut maintenant g√©rer les √©ventuels conflits. Git rebase appliquant vos commits un par un, il est possible que vous ayez des conflits pour un ou plusieurs commits, et il faudra r√©p√©ter les op√©rations suivantes : <ul><li>ouvrir les fichiers concern√©s dans votre <abbr title="Integrated Development Environment">IDE</abbr> et les corriger pour garder la ou les modifications que vous souhaitez conserver</li><li>une fois tous les conflits g√©r√©s, utiliser la commande <code>git add</code> (<code>git add .</code> ou <code>git add nomDuFichier</code>) pour les ajouter √† l&#39;index, afin de pr√©ciser √† la commande <code>rebase</code> que les conflits ont √©t√© corrig√©s</li><li><code>git rebase --continue</code> pour passer au commit suivant</li></ul></li><li>Une fois tous les commits appliqu√©s, votre branche locale est √† jour</li><li><code>git push --force origin nom-de-votre-branche</code> pour mettre √† jour <strong>de force</strong> l&#39;historique de votre branche sur GitHub (ne faites <strong>jamais</strong> cette op√©ration sur la branche principale)</li><li>Faites re-faire une relecture rapide de votre <abbr title="Pull Request">PR</abbr>, pour vous assurer que tout est toujours bon</li><li>Vous pouvez fusionner ou faire fusionner votre <abbr title="Pull Request">PR</abbr></li></ul>',4)]))}const d=o(n,[["render",s],["__file","5-common-work.html.vue"]]),p=JSON.parse('{"path":"/git/5-common-work.html","title":"Mise en commun du travail","lang":"fr-FR","frontmatter":{"date":"2021-10-08T00:00:00.000Z"},"headers":[{"level":2,"title":"Cr√©er un repository distant","slug":"creer-un-repository-distant","link":"#creer-un-repository-distant","children":[]},{"level":2,"title":"Lier le local et le distant","slug":"lier-le-local-et-le-distant","link":"#lier-le-local-et-le-distant","children":[]},{"level":2,"title":"Push et pull","slug":"push-et-pull","link":"#push-et-pull","children":[]},{"level":2,"title":"Pull Request (PR)","slug":"pull-request-pr","link":"#pull-request-pr","children":[]},{"level":2,"title":"Conventions de travail","slug":"conventions-de-travail","link":"#conventions-de-travail","children":[]},{"level":2,"title":"Merge, rebase, conflits","slug":"merge-rebase-conflits","link":"#merge-rebase-conflits","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"git/5-common-work.md"}');export{d as comp,p as data};
