import{aj as i,ak as o,am as s,an as e,ao as t,al as l,ap as c,aq as r,ar as p}from"./app-BkblVdII.js";const u="/cours/assets/psr4-example-CGCpD1EW.png",d="/cours/assets/phpcsfixer-install-1-CdUbA3Z6.png",m="/cours/assets/phpcsfixer-install-2-B2I0z8Fb.png",k={},v={class:"table-of-contents"};function h(b,n){const a=c("router-link");return r(),o("div",null,[n[9]||(n[9]=s("h1",{id:"php-doc-et-psr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#php-doc-et-psr"},[s("span",null,"PHP Doc et PSR")])],-1)),s("nav",v,[s("ul",null,[s("li",null,[e(a,{to:"#en-resume"},{default:t(()=>n[0]||(n[0]=[p("En r√©sum√©")])),_:1})]),s("li",null,[e(a,{to:"#php-doc"},{default:t(()=>n[1]||(n[1]=[p("PHP Doc")])),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#lire-la-documentation"},{default:t(()=>n[2]||(n[2]=[p("Lire la documentation")])),_:1})]),s("li",null,[e(a,{to:"#documenter-le-code-et-les-projets"},{default:t(()=>n[3]||(n[3]=[p("Documenter le code et les projets")])),_:1})])])]),s("li",null,[e(a,{to:"#psr-1-2-et-4"},{default:t(()=>n[4]||(n[4]=[p("PSR 1, 2 et 4")])),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#psr-1"},{default:t(()=>n[5]||(n[5]=[p("PSR-1")])),_:1})]),s("li",null,[e(a,{to:"#psr-12"},{default:t(()=>n[6]||(n[6]=[p("PSR-12")])),_:1})]),s("li",null,[e(a,{to:"#psr-4"},{default:t(()=>n[7]||(n[7]=[p("PSR-4")])),_:1})]),s("li",null,[e(a,{to:"#appliquer-toutes-ces-normes"},{default:t(()=>n[8]||(n[8]=[p("Appliquer toutes ces normes")])),_:1})])])])])]),n[10]||(n[10]=l('<p>Cette partie du cours parle de documentation et de normes... Mais aussi de normes de documentation üòâ .</p><h2 id="en-resume" tabindex="-1"><a class="header-anchor" href="#en-resume"><span>En r√©sum√©</span></a></h2><ul><li><abbr title="Php Standard Recommendation">PSR</abbr> est un ensemble de normes de &quot;formattage&quot; (mani√®re d&#39;√©crire) du code.</li><li><a href="https://www.php.net/manual/fr/" target="_blank" rel="noopener noreferrer">La documentation PHP en fran√ßais</a> peut r√©pondre √† vos questions sur tous les √©l√©ments du langage (y compris les fonctions de base et les extensions PHP)</li><li>Commenter son code est primordial pour aider d&#39;autres d√©veloppeurs √† relire / utiliser notre code (y compris le &quot;vous du futur&quot;)</li><li>Savoir trouver des sources fiables et adapt√©es en dehors de la doc est √©galement important (questions <strong>r√©centes</strong> sur StackOverflow, articles de blog <strong>r√©cents</strong>)</li></ul><h2 id="php-doc" tabindex="-1"><a class="header-anchor" href="#php-doc"><span>PHP Doc</span></a></h2><ul><li><a href="https://www.php.net/manual/fr/" target="_blank" rel="noopener noreferrer">La documentation PHP en fran√ßais</a> pour <strong>tout</strong> savoir sur le langage, de sa syntaxe jusqu&#39;aux extensions disponibles et leur fonctionnement</li><li>La <a href="https://www.php.net/manual/fr/funcref.php" target="_blank" rel="noopener noreferrer">r√©f√©rence des fonctions</a> pour trouver toute la documentation sur les fonctions utiles de PHP</li></ul><h3 id="lire-la-documentation" tabindex="-1"><a class="header-anchor" href="#lire-la-documentation"><span>Lire la documentation</span></a></h3><p>En vid√©o :</p>',7)),n[11]||(n[11]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/710f0fc6e3fc4d6ab2e1af6de7912d01",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[12]||(n[12]=l('<p>Prenons <a href="https://www.php.net/manual/fr/function.strtolower.php" target="_blank" rel="noopener noreferrer">un exemple de fonction PHP : strtolower()</a></p><ul><li>Description : que fait-elle ?</li><li>La signature de la fonction : quels types de param√®tres attend-elle et quel est son type de retour ?</li><li>Liste de param√®tres et valeur de retour : plus d&#39;explications sur les param√®tres et le retour</li><li>Exemples : Concr√®tement, comment s&#39;en servir ?</li><li>Notes : les subtilit√©s</li><li>Voir aussi : les fonctions li√©es (similaires, oppos√©es ou dans le m√™me fonctionnement)</li></ul><p>On peut √©galement aller un peu plus loin et d√©couvrir d&#39;autres fonctions de la m√™me section (m√™me module ou m√™me extension) en regardant la colonne de droite. Les noms des fonctions sont cens√©s √™tre suffisamment explicites pour permettre d&#39;en comprendre le but (personnellement, c&#39;est rarement le cas). C&#39;est, √† mon sens, l&#39;un des principaux moyens de d√©couverte de nouvelles fonctions PHP (hors StackOverflow)</p><h4 id="fouiller-dans-la-documentation" tabindex="-1"><a class="header-anchor" href="#fouiller-dans-la-documentation"><span>Fouiller dans la documentation</span></a></h4><ul><li>Si vous savez le nom de la fonction que vous cherchez, le moteur de recherche est la solution</li><li>Sinon, il faut soit conna√Ætre la doc comme votre poche / avoir une id√©e de la section dont vous avez besoin, soit chercher sur un autre moteur de recherche</li></ul><h5 id="exemples" tabindex="-1"><a class="header-anchor" href="#exemples"><span>Exemples</span></a></h5><ul><li>Je cherche une fonction li√©e aux tableaux, je vais regarder la <a href="https://www.php.net/manual/fr/ref.array.php" target="_blank" rel="noopener noreferrer">page de la documentation sur les tableaux</a></li><li>Je cherche une fonction pour afficher la date du jour, <a href="https://www.php.net/manual/fr/ref.datetime.php" target="_blank" rel="noopener noreferrer">fouille dans la doc li√©e aux fonctions de dates et heures</a> ou vais <a href="https://www.google.com/search?q=php+afficher+date+du+jour" target="_blank" rel="noopener noreferrer">demander √† mon moteur de recherche</a> qui me permettra de <a href="https://www.php.net/manual/fr/function.date.php" target="_blank" rel="noopener noreferrer">tomber sur la doc que je cherchais</a> (je peux aussi chercher au hasard dans le moteur de recherche de la documentation).</li><li>Je cherche comment remplacer du texte dans un tableau. Le plus simple (√† moins de conna√Ætre la fonction) est <a href="https://www.google.com/search?q=php+remplacer+du+texte+dans+un+tableau" target="_blank" rel="noopener noreferrer">mon moteur de recherche</a></li></ul><h4 id="a-quels-sites-puis-je-faire-confiance" tabindex="-1"><a class="header-anchor" href="#a-quels-sites-puis-je-faire-confiance"><span>√Ä quels sites puis-je faire confiance ?</span></a></h4><ul><li>La <a href="https://www.php.net/manual/fr/" target="_blank" rel="noopener noreferrer">doc officielle de php</a></li><li>La documentation de vos outils (la <a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/" target="_blank" rel="noopener noreferrer">doc de Bootstrap</a> ou de <a href="https://symfony.com/doc/current/index.html" target="_blank" rel="noopener noreferrer">Symfony</a> par exemple)</li><li><a href="https://stackoverflow.com/questions/tagged/php" target="_blank" rel="noopener noreferrer">Stack Overflow</a></li><li>Des outils de centralisation de documentations, comme <a href="https://devdocs.io/" target="_blank" rel="noopener noreferrer">devdocs.io</a></li><li>Certains articles de blogs ou posts de forum <em><strong>r√©cents</strong></em></li></ul><h3 id="documenter-le-code-et-les-projets" tabindex="-1"><a class="header-anchor" href="#documenter-le-code-et-les-projets"><span>Documenter le code et les projets</span></a></h3><p>En vid√©o :</p>',11)),n[13]||(n[13]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/663a559f939b4c52808a15d04a8867a0",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[14]||(n[14]=l(`<p>Pour faciliter la lecture du code (que ce soit par vous plus tard ou un autre d√©veloppeur), il est tr√®s utile d&#39;y ajouter des commentaires. En r√®gle g√©n√©rale, utilise des &quot;Doc Blocks&quot; pour pr√©ciser ce que va faire une fonction, ajouter des commentaires dans les sections de code plus difficiles √† comprendre, etc.</p><p>Un petit exemple :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Notez bien les /** au d√©but de ce commentaire, </span>
<span class="line"> * c&#39;est ce qui le distingue d&#39;un commentaire multi-ligne</span>
<span class="line"> * normal. On peut y mettre une description </span>
<span class="line"> * (comme le pr√©sent texte) ou des annotations, </span>
<span class="line"> * commen√ßant par @. Il existe tout un ensemble d&#39;annotations </span>
<span class="line"> * que nous d√©couvrirons √† l&#39;usage.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">int</span></span> <span class="token parameter">$n</span> Cette annotation permet de donner le type et le nom d&#39;un param√®tre</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">int</span></span> Cette annotation permet de donner le type de retour de ma fonction</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">maFonction</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// cas d&#39;arr√™t pour le r√©cursif</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Si on ne s&#39;est pas arr√™t√©, on fait le calcul n * (n - 1)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$n</span> <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Documenter un projet ne consiste pas √† seulement documenter le code. Il peut √™tre utile d&#39;ajouter des documentations sur l&#39;installation ou l&#39;utilisation de notre projet ! C&#39;est tr√®s souvent ce qui est fait dans un fichier <code>README.md</code> √† la racine du projet. Les fichiers au format <a href="https://fr.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener noreferrer">markdown</a> sont convertis en HTML tr√®s simplement (notamment sur GitHub ou GitLab) et permettent de mettre en forme une petite documentation tr√®s rapidement.</p><p>En plus du fichier <code>README.md</code>, vous pouvez √©galement ajouter d&#39;autres fichiers <code>.md</code> pour compl√©ter la documentation de votre projet. Personnellement, j&#39;aime cr√©er un dossier <code>doc/</code> contenant mes diff√©rentes documentations (installation du projet, commandes √† utiliser au quotidien, etc.).</p><h2 id="psr-1-2-et-4" tabindex="-1"><a class="header-anchor" href="#psr-1-2-et-4"><span>PSR 1, 2 et 4</span></a></h2><p>Des <strong>normes</strong> d&#39;√©criture et de rangement de notre code :</p><ul><li><a href="https://www.php-fig.org/psr/psr-1/" target="_blank" rel="noopener noreferrer">PSR-1</a> donne des normes d&#39;√©criture de base</li><li><a href="https://www.php-fig.org/psr/psr-2/" target="_blank" rel="noopener noreferrer">PSR-2</a> est une extension de PSR-1 (Dans les faits, il faut suivre <a href="https://www.php-fig.org/psr/psr-12/" target="_blank" rel="noopener noreferrer">PSR-12, plut√¥t que PSR-2</a>)</li><li><a href="https://www.php-fig.org/psr/psr-4/" target="_blank" rel="noopener noreferrer">PSR-4</a> pour le rangement des classes et leur auto-chargement (autoloading)</li></ul><p>Sources : <a href="https://www.php-fig.org/" target="_blank" rel="noopener noreferrer">PHP-fig</a>, <a href="https://nouvelle-techno.fr/actualites/bonnes-pratiques-php-psr-1-et-psr-4" target="_blank" rel="noopener noreferrer">nouvelle-techno.fr</a></p><h3 id="psr-1" tabindex="-1"><a class="header-anchor" href="#psr-1"><span>PSR-1</span></a></h3><ul><li>Les fichiers ne doivent utiliser que <code>&lt;?php</code> ou <code>&lt;?=</code> pour d√©clarer du code php</li><li>Le code doit √™tre encod√© en UTF-8</li><li>Les fichiers doivent soit d√©clarer des symboles, soit cr√©er des effets de bord, mais pas les deux</li><li>Espaces de nom et classes doivent suivre une norme PSR d&#39;auto-chargement</li><li>Les noms de classe doivent √™tre au format <code>PascalCase</code></li><li>Les m√©thodes et fonctions au format <code>camelCase</code></li></ul><h4 id="balises-php" tabindex="-1"><a class="header-anchor" href="#balises-php"><span>Balises php</span></a></h4><p>Nous n&#39;utilisons que les balises <code>&lt;?php</code> et <code>?&gt;</code> pour entourer notre code PHP, restons l√†-dessus üòâ</p><p>D&#39;autres existent :</p><ul><li><code>&lt;?</code> fonctionne dans certains (vieux) projets et sont d√©conseill√©es</li><li><code>&lt;?=</code> &quot;balises echo courtes&quot; fonctionnent toujours et permettent de faire un <code>echo</code> du code qu&#39;elles contiennent La norme PSR-1 recommande <code>&lt;?php</code> et <code>&lt;?=</code> uniquement.</li></ul><h4 id="code-en-utf-8" tabindex="-1"><a class="header-anchor" href="#code-en-utf-8"><span>Code en UTF-8</span></a></h4><p>L&#39;encodage des fichiers en UTF-8 permet d&#39;√©viter des probl√®mes de compatibilit√© entre les diff√©rents OS, navigateurs et serveurs. Une valeur √† v√©rifier dans votre √©diteur de code.</p><h4 id="effets-des-fichiers" tabindex="-1"><a class="header-anchor" href="#effets-des-fichiers"><span>Effets des fichiers</span></a></h4><p>Les fichiers php doivent soit d√©clarer des symboles (classes, fonctions, constantes, etc.), soit avoir un effet de bord (afficher du html, modifier la configuration de php, etc.), mais ne doivent pas faire les deux.</p><p>Il s&#39;agit en fait de compartimenter ce qui tient de la d√©claration et ce que modifie l&#39;affichage / le serveur. En somme, s√©parer les resources et le concret.</p><h5 id="un-exemple-a-eviter" tabindex="-1"><a class="header-anchor" href="#un-exemple-a-eviter"><span>Un exemple √† √©viter</span></a></h5><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token comment">// side effect: change ini settings</span></span>
<span class="line"><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;error_reporting&#39;</span><span class="token punctuation">,</span> <span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// side effect: loads a file</span></span>
<span class="line"><span class="token keyword">include</span> <span class="token string double-quoted-string">&quot;file.php&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// side effect: generates output</span></span>
<span class="line"><span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;html&gt;\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// declaration</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// function body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="normes-d-autoloading" tabindex="-1"><a class="header-anchor" href="#normes-d-autoloading"><span>Normes d&#39;autoloading</span></a></h4><p>Nous verrons la norme PSR-4 par la suite, mais elle doit √™tre utilis√©e pour tous les projets utilisant des objets PHP.</p><h4 id="nommage-des-classes" tabindex="-1"><a class="header-anchor" href="#nommage-des-classes"><span>Nommage des classes</span></a></h4><p>Le format <code>PascalCase</code> veut dire que tous les mots composant le nom de la classe doivent commencer par une majuscule et qu&#39;il ne doit pas y avoir d&#39;espace entre les mots.</p><p>Exemple : <code>PictureInformations</code> pour une classe de stockage des informations d&#39;une image</p><h4 id="nommage-des-fonctions" tabindex="-1"><a class="header-anchor" href="#nommage-des-fonctions"><span>Nommage des fonctions</span></a></h4><p>Pour les distinguer des classes et les rapprocher des variables, on utilise le <code>camelCase</code> (premier mot en minuscule, les suivants commen√ßant par une majuscule) pour nommer fonctions, proc√©dures et m√©thodes.</p><h3 id="psr-12" tabindex="-1"><a class="header-anchor" href="#psr-12"><span>PSR-12</span></a></h3><ul><li>Le code doit respecter PSR-1</li><li>Tous les fichiers doivent utiliser le format Unix pour les fins de ligne (LF)</li><li>Tous les fichiers doivent se terminer par un seul LF</li><li><code>?&gt;</code> ne doit pas appara√Ætre √† la fin d&#39;un fichier ne contenant que du PHP</li><li>Il ne doit pas y avoir de limite (dure) de nombre de caract√®res pour une ligne</li><li>Id√©alement, une ligne ne doit pas d√©passer les 120 caract√®res</li><li>Encore mieux : 80 caract√®res</li><li>Aucun espace √† la fin des lignes</li><li>Des sauts de ligne sont autoris√©s pour faciliter la lisibilit√© du code sauf cas interdits</li><li>Une seule instruction par ligne maximum</li><li>L&#39;indentation doit √™tre compos√©e de 4 espaces et non de tabulations</li><li>Les mots r√©serv√©s de PHP et les types doivent √™tre en minuscule</li><li>Les versions courtes de ces mots doivent √™tre utilis√©s (<code>bool</code> au lieu de <code>boolean</code> par exemple)</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Un exemple de classe PHP respectueux des CS</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Vendor<span class="token punctuation">\\</span>Package</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> Vendor\\Package\\<span class="token punctuation">{</span>ClassA <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">,</span> ClassB<span class="token punctuation">,</span> ClassC <span class="token keyword">as</span> <span class="token constant">C</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Vendor<span class="token punctuation">\\</span>Package<span class="token punctuation">\\</span>SomeNamespace<span class="token punctuation">\\</span>ClassD</span> <span class="token keyword">as</span> <span class="token constant">D</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Vendor<span class="token punctuation">\\</span>Package<span class="token punctuation">\\</span>AnotherNamespace<span class="token punctuation">\\</span>ClassE</span> <span class="token keyword">as</span> <span class="token constant">E</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">function</span> Vendor\\Package\\<span class="token punctuation">{</span>functionA<span class="token punctuation">,</span> functionB<span class="token punctuation">,</span> functionC<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">Another<span class="token punctuation">\\</span>Vendor<span class="token punctuation">\\</span>functionD</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">const</span> Vendor\\Package\\<span class="token punctuation">{</span><span class="token constant">CONSTANT_A</span><span class="token punctuation">,</span> <span class="token constant">CONSTANT_B</span><span class="token punctuation">,</span> <span class="token constant">CONSTANT_C</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">const</span> Another\\Vendor\\<span class="token constant">CONSTANT_D</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * FooBar is an example class.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">FooBar</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... additional PHP code ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un fichier contenant des fonctions :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function-definition function">fooBarBaz</span><span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$arg2</span><span class="token punctuation">,</span> <span class="token variable">$arg3</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// function body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un autre fichier de classe :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Vendor<span class="token punctuation">\\</span>Package</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ClassName</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">aVeryLongMethodName</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name type-declaration">ClassTypeHint</span> <span class="token variable">$arg1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token operator">&amp;</span><span class="token variable">$arg2</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword type-hint">array</span> <span class="token variable">$arg3</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// method body</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Format des appels :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$foo</span><span class="token operator">-&gt;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name static-context">Foo</span><span class="token operator">::</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token variable">$arg2</span><span class="token punctuation">,</span> <span class="token variable">$arg3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token variable">$foo</span><span class="token operator">-&gt;</span><span class="token function">bar</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token variable">$longArgument</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$longerArgument</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$muchLongerArgument</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">somefunction</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">,</span> <span class="token variable">$bar</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$baz</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/hello/{name}&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Hello &#39;</span> <span class="token operator">.</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="structures-de-controle-if-for-while-etc" tabindex="-1"><a class="header-anchor" href="#structures-de-controle-if-for-while-etc"><span>Structures de contr√¥le (if, for, while, etc.)</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token variable">$expr1</span></span>
<span class="line">    <span class="token operator">&amp;&amp;</span> <span class="token variable">$expr2</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// if body</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$expr3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// elseif body</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// else body;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>Switch</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$expr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;First case, with a break&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Second case, which falls through&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// no break</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Third case, return instead of break&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Default case&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="operateurs" tabindex="-1"><a class="header-anchor" href="#operateurs"><span>Op√©rateurs</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">++</span><span class="token variable">$j</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$intValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$input</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token variable">$bar</span> <span class="token operator">??</span> <span class="token variable">$a</span> <span class="token operator">??</span> <span class="token variable">$b</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span> <span class="token operator">*</span> <span class="token variable">$c</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$variable</span> <span class="token operator">=</span> <span class="token variable">$foo</span> <span class="token operator">?</span> <span class="token variable">$foo</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">;</span> <span class="token comment">// $variable = $foo ?: &#39;bar&#39;;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fonctions-anonymes" tabindex="-1"><a class="header-anchor" href="#fonctions-anonymes"><span>Fonctions anonymes</span></a></h4><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$closureWithArgs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// body</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$closureWithArgsAndVars</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$var1</span><span class="token punctuation">,</span> <span class="token variable">$var2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// body</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$closureWithArgsVarsAndReturn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$var1</span><span class="token punctuation">,</span> <span class="token variable">$var2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// body</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="psr-4" tabindex="-1"><a class="header-anchor" href="#psr-4"><span>PSR-4</span></a></h3><p>S&#39;applique aux classes, interfaces, traits et structures similaires et d√©fini √† la fois comment les nommer <strong>et</strong> les ranger</p><p>Le <em>FQCN</em> (Fully Qualified Class Name) est compos√© de :</p><ul><li>Un espace de nom principal (premier √©l√©ment, aussi appel√© <em>prefix</em>)</li><li>Peut avoir un ou des sous-espaces de nom</li><li>Un nom de classe (dernier √©l√©ment)</li></ul><h4 id="correspondances-entre-namespace-et-fichier" tabindex="-1"><a class="header-anchor" href="#correspondances-entre-namespace-et-fichier"><span>Correspondances entre namespace et fichier</span></a></h4><p><img src="`+u+'" alt="Des exemples de nommages, avec les dossiers correspondants"></p><h3 id="appliquer-toutes-ces-normes" tabindex="-1"><a class="header-anchor" href="#appliquer-toutes-ces-normes"><span>Appliquer toutes ces normes</span></a></h3><ul><li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" target="_blank" rel="noopener noreferrer">PHP CS Fixer</a> est un outil tr√®s r√©pandu et peut √™tre int√©gr√© dans la plupart des IDE (voir <a href="https://github.com/junstyle/vscode-php-cs-fixer" target="_blank" rel="noopener noreferrer">le plugin pour VS Code</a>)</li><li>Les r√®gles de formatage de votre √©diteur de code (exemple sur PHPStorm)</li><li><a href="https://git-scm.com/book/fr/v2/Personnalisation-de-Git-Crochets-Git" target="_blank" rel="noopener noreferrer">Hook de pr√©-commit</a></li><li>Tout en m√™me temps</li></ul><p>Installation dans VS Code :</p><ul><li>Installer <a href="https://github.com/junstyle/vscode-php-cs-fixer" target="_blank" rel="noopener noreferrer">le plugin</a> mentionn√© dans la liste ci-dessus</li><li><a href="https://cs.symfony.com/download/php-cs-fixer-v3.phar" target="_blank" rel="noopener noreferrer">T√©l√©charger PHP CS Fixer</a> (je le t√©l√©charge dans le dossier <code>www</code> de mon wamp)</li><li>Configurer l&#39;extension avec le chemin de php et celui de php-cs-fixer</li></ul><p><img src="'+d+'" alt="Installer PHP CS Fixer"></p><p><img src="'+m+'" alt="Installer PHP CS Fixer"></p>',58))])}const g=i(k,[["render",h],["__file","10-doc.html.vue"]]),w=JSON.parse('{"path":"/php/10-doc.html","title":"PHP Doc et PSR","lang":"fr-FR","frontmatter":{"date":"2021-02-05T00:00:00.000Z"},"headers":[{"level":2,"title":"En r√©sum√©","slug":"en-resume","link":"#en-resume","children":[]},{"level":2,"title":"PHP Doc","slug":"php-doc","link":"#php-doc","children":[{"level":3,"title":"Lire la documentation","slug":"lire-la-documentation","link":"#lire-la-documentation","children":[]},{"level":3,"title":"Documenter le code et les projets","slug":"documenter-le-code-et-les-projets","link":"#documenter-le-code-et-les-projets","children":[]}]},{"level":2,"title":"PSR 1, 2 et 4","slug":"psr-1-2-et-4","link":"#psr-1-2-et-4","children":[{"level":3,"title":"PSR-1","slug":"psr-1","link":"#psr-1","children":[]},{"level":3,"title":"PSR-12","slug":"psr-12","link":"#psr-12","children":[]},{"level":3,"title":"PSR-4","slug":"psr-4","link":"#psr-4","children":[]},{"level":3,"title":"Appliquer toutes ces normes","slug":"appliquer-toutes-ces-normes","link":"#appliquer-toutes-ces-normes","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/10-doc.md"}');export{g as comp,w as data};
