import{aj as c,ak as r,am as n,an as e,ao as t,ar as a,al as l,ap as i,aq as u}from"./app-BkblVdII.js";const d={},k={class:"table-of-contents"};function m(v,s){const p=i("router-link"),o=i("RouteLink");return u(),r("div",null,[s[22]||(s[22]=n("h1",{id:"manipuler-la-bdd-avec-pdo-php-data-object",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#manipuler-la-bdd-avec-pdo-php-data-object"},[n("span",null,"Manipuler la BdD avec PDO (PHP Data Object)")])],-1)),n("nav",k,[n("ul",null,[n("li",null,[e(p,{to:"#l-extension-pdo"},{default:t(()=>s[0]||(s[0]=[a("L'extension PDO")])),_:1})]),n("li",null,[e(p,{to:"#se-connecter-a-la-base"},{default:t(()=>s[1]||(s[1]=[a("Se connecter à la base")])),_:1})]),n("li",null,[e(p,{to:"#gerer-les-erreurs"},{default:t(()=>s[2]||(s[2]=[a("Gérer les erreurs")])),_:1})]),n("li",null,[e(p,{to:"#requetes-directes"},{default:t(()=>s[3]||(s[3]=[a("Requêtes directes")])),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#pdo-query"},{default:t(()=>s[4]||(s[4]=[a("PDO::query()")])),_:1})]),n("li",null,[e(p,{to:"#pdo-exec"},{default:t(()=>s[5]||(s[5]=[a("PDO::exec()")])),_:1})]),n("li",null,[e(p,{to:"#quelques-exemples-en-video"},{default:t(()=>s[6]||(s[6]=[a("Quelques exemples en vidéo")])),_:1})])])]),n("li",null,[e(p,{to:"#les-requetes-preparees"},{default:t(()=>s[7]||(s[7]=[a("Les requêtes préparées")])),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#pdostatement"},{default:t(()=>s[8]||(s[8]=[a("PDOStatement")])),_:1})]),n("li",null,[e(p,{to:"#les-marqueurs-de-positionnement"},{default:t(()=>s[9]||(s[9]=[a("Les marqueurs de positionnement")])),_:1})]),n("li",null,[e(p,{to:"#les-parametres-nommes"},{default:t(()=>s[10]||(s[10]=[a("Les paramètres nommés")])),_:1})])])]),n("li",null,[e(p,{to:"#recuperer-l-identifiant-du-dernier-element-enregistre"},{default:t(()=>s[11]||(s[11]=[a("Récupérer l'identifiant du dernier élément enregistré")])),_:1})]),n("li",null,[e(p,{to:"#remplir-des-objets-avec-nos-donnees"},{default:t(()=>s[12]||(s[12]=[a("Remplir des objets avec nos données")])),_:1})]),n("li",null,[e(p,{to:"#exercices"},{default:t(()=>s[13]||(s[13]=[a("Exercices")])),_:1})])])]),s[23]||(s[23]=n("h2",{id:"l-extension-pdo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#l-extension-pdo"},[n("span",null,"L'extension PDO")])],-1)),s[24]||(s[24]=n("p",null,[n("a",{href:"https://www.php.net/manual/fr/book.pdo.php",target:"_blank",rel:"noopener noreferrer"},"La documentation sur PDO")],-1)),s[25]||(s[25]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/fc75e45d8a0c48b8bb3f487febb136bc",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[26]||(s[26]=n("p",null,[a("PDO est une extension de PHP, permettant la gestion de la "),n("abbr",{title:"Base de Données"},"BdD"),a(" (connexion et utilisation de requêtes SQL pour créer/modifier les données).")],-1)),s[27]||(s[27]=n("p",null,"Il offre différentes fonctionnalités, dont :",-1)),s[28]||(s[28]=n("ul",null,[n("li",null,"des requêtes préparées, pour améliorer la sécurité et les performances"),n("li",null,[a("des transactions, pour exécuter un ensemble de requête, uniquement si "),n("strong",null,"toutes"),a(" fonctionnent (sinon aucune donnée n'est ajoutée/modifiée)")])],-1)),n("p",null,[s[15]||(s[15]=a("PDO sert de base à de nombreux ")),s[16]||(s[16]=n("abbr",{title:"Object-Relational Mapping"},"ORM",-1)),s[17]||(s[17]=a(", tels que Doctrine, que vous verrez dans ")),e(o,{to:"/symfony/"},{default:t(()=>s[14]||(s[14]=[a("la partie consacrée à Symfony")])),_:1}),s[18]||(s[18]=a("."))]),s[29]||(s[29]=l('<p>On peut l&#39;utiliser avec les <abbr title="Système de Gestion de Base de Données">SGBD</abbr> suivants (entre autre) :</p><ul><li>Mysql (l&#39;un des plus courants)</li><li>PostgreSQL (une excellente référence)</li><li>Oracle</li><li>et bien d&#39;autres</li></ul><p>Dans les faits, PDO offre des classes pour gérer :</p><ul><li>la connexion à la BdD</li><li>la préparation et l&#39;envoi de requêtes SQL</li><li>la gestion des transactions</li></ul><h2 id="se-connecter-a-la-base" tabindex="-1"><a class="header-anchor" href="#se-connecter-a-la-base"><span>Se connecter à la base</span></a></h2>',5)),s[30]||(s[30]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/6b42ca476091438eb83254eea75cd2ae",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[31]||(s[31]=l(`<p>PDO fournit un objet (<code>PDO</code>) de connexion à la BdD, que l&#39;on va utiliser pour faire ensuite nos requêtes. On en crée en général une instance, que l&#39;on inclue dans nos autres scripts, pour faire des requêtes. Cet objet peut renvoyer une exception, pour vous permettre de détecter les problèmes de connexion dès que possible.</p><p>Pour se connecter, on crée (en général), un fichier spécifique, qu&#39;on appelle sur nos pages (par exemple <code>includes/db.inc.php</code>)</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token comment">// Ici, adapter les valeurs de dbname et port à votre configuration</span></span>
<span class="line"><span class="token comment">// dbname contient le nom de la BdD à utiliser</span></span>
<span class="line"><span class="token comment">// port est le port à utiliser (3306 par défaut)</span></span>
<span class="line"><span class="token comment">// host est le nom d&#39;hôte de notre serveur de BdD</span></span>
<span class="line"><span class="token comment">// (127.0.0.1 ou localhost, les deux sont équivalents)</span></span>
<span class="line"><span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;mysql:dbname=cours;port=3306;host=127.0.0.1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;root&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Utilisateur par défaut</span></span>
<span class="line"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Par défaut, pas de mot de passe sur Wamp</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Try nous permet d&#39;attraper une exception</span></span>
<span class="line"><span class="token comment">// catch (il peut y en avoir plusieurs) d&#39;exécuter d&#39;autres instructions </span></span>
<span class="line"><span class="token comment">// quand une erreur de type PDOException est levée</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// On crée une connexion (objet PDO) à norte BdD,</span></span>
<span class="line">    <span class="token comment">// nous pourrons nous en servir dans la suite du programme</span></span>
<span class="line">    <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token comment">// Définition du mode d&#39;erreur : on renvoie une exception </span></span>
<span class="line">        <span class="token comment">// dès qu&#39;une erreur se produit dans les requêtes</span></span>
<span class="line">        <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_ERRMODE</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// On définit sous quel format on récupère les données de la base</span></span>
<span class="line">        <span class="token comment">// On peut les récupérer sous la forme :</span></span>
<span class="line">        <span class="token comment">// - D&#39;un tableau associatif avec PDO::FETCH_ASSOC</span></span>
<span class="line">        <span class="token comment">// - D&#39;un objet avec PDO::FETCH_OBJ</span></span>
<span class="line">        <span class="token comment">// - D&#39;un objet utilisant une de vos classes avec PDO::FETCH_CLASS</span></span>
<span class="line">        <span class="token comment">// - D&#39;injections dans un objet avec PDO::FETCH_INTO</span></span>
<span class="line">        <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_DEFAULT_FETCH_MODE</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Connexion échouée : &#39;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gerer-les-erreurs" tabindex="-1"><a class="header-anchor" href="#gerer-les-erreurs"><span>Gérer les erreurs</span></a></h2><ul><li>La <a href="https://www.php.net/manual/fr/class.pdoexception.php" target="_blank" rel="noopener noreferrer">documentation officielle sur la classe PDOException</a></li><li>Le <a href="https://www.php.net/manual/fr/language.exceptions.php" target="_blank" rel="noopener noreferrer">chapitre de la documentation sur les exceptions</a></li></ul>`,5)),s[32]||(s[32]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/2d1b828fb9a744bc9b82fc2f718ce6bc",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[33]||(s[33]=l(`<p>Dans la connexion, vous allez principalement avoir un seul type d&#39;exception <code>PDOException</code>, mais vous pourriez récupérer d&#39;autres types d&#39;exception si vous le souhaitiez :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;mysql:dbname=cours;host=127.0.0.1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;root&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Utilisateur par défaut</span></span>
<span class="line"><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Par défaut, pas de mot de passe sur Wamp</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Connexion échouée : &#39;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;Connexion échouée : &#39;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lorsque vous exécutez des requêtes avec PDO, des exceptions peuvent être levées. De la même manière que pour la connexion à la <abbr title="Base de Données">BdD</abbr>, vous pouvez utiliser un bloc try-catch pour gérer l&#39;erreur (ou laisser l&#39;erreur se produire et arrêter votre programme, selon les cas).</p><h2 id="requetes-directes" tabindex="-1"><a class="header-anchor" href="#requetes-directes"><span>Requêtes directes</span></a></h2>`,4)),s[34]||(s[34]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/7b8de596a0bc4ebc82152e05a11ac467",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[35]||(s[35]=l(`<h3 id="pdo-query" tabindex="-1"><a class="header-anchor" href="#pdo-query"><span>PDO::query()</span></a></h3><p>Utilisée pour les requêtes <code>SELECT</code> :</p><ul><li>Prend en paramètre une requête (dans une variable <code>$sql</code> dans la suite)</li><li>S&#39;appelle sur notre connexion : <code>$connection-&gt;query($sql)</code></li><li>Renvoie un objet <code>PDOStatement</code> (contenant une méthode <code>fetchAll()</code>, renvoyant un tableau <strong>associatif</strong> avec les différentes lignes)</li></ul><p>Un exemple complet :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// On crée notre requête, en prenant soin qu&#39;elle soit valide (tester dans PhpMyAdmin, par exemple)</span></span>
<span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token string single-quoted-string">&#39;SELECT id, fullname, date FROM student ORDER BY fullname&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// On appelle notre objet PDO ($connection)</span></span>
<span class="line"><span class="token comment">// et on utilise sa méthode query() pour exécuter notre requête</span></span>
<span class="line"><span class="token comment">// On récupère un objet PDOStatement qui va nous permettre de recevoir nos résultats</span></span>
<span class="line"><span class="token comment">// Si une erreur est survenue (requête invalide), query() lève une exception</span></span>
<span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si on souhaite récupérer tous nos résultats dans un tableau associatif,</span></span>
<span class="line"><span class="token comment">// on utilise fetchAll() </span></span>
<span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On parcourt nos résultats</span></span>
<span class="line"><span class="token keyword">foreach</span>  <span class="token punctuation">(</span><span class="token variable">$results</span> <span class="token keyword">as</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pdo-exec" tabindex="-1"><a class="header-anchor" href="#pdo-exec"><span>PDO::exec()</span></a></h3><p>Utilisée pour les requêtes autres que <code>SELECT</code> :</p><ul><li>Prend en paramètre une requête (dans une variable <code>$sql</code> dans la suite)</li><li>S&#39;appelle sur notre connexion : <code>$connection-&gt;exec($sql)</code></li><li>Renvoie le <strong>nombre</strong> de lignes affectées</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// On écrit une requête, où on insère 3 éléments</span></span>
<span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO \`student\`(\`fullname\`) VALUES (&#39;Rémi Jarjat&#39;), (&#39;Jean-Claude Duss&#39;), (&#39;Marc-André du Gaz de Schiste&#39;)&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// On l&#39;exécute et on récupère le nombre de lignes mises à jour</span></span>
<span class="line"><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// $count contient 3 (ou une exception est levée en cas d&#39;erreur)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On met à jour tous les éléments de notre table student</span></span>
<span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;UPDATE student SET date = NOW()&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Si une erreur s&#39;est produite, exec() renvoie une exception</span></span>
<span class="line"><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// $count contient également 3 (on modifie toutes les lignes)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="quelques-exemples-en-video" tabindex="-1"><a class="header-anchor" href="#quelques-exemples-en-video"><span>Quelques exemples en vidéo</span></a></h3>`,10)),s[36]||(s[36]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/2d438dae5ffc49abb7728848adc61376",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[37]||(s[37]=l(`<h2 id="les-requetes-preparees" tabindex="-1"><a class="header-anchor" href="#les-requetes-preparees"><span>Les requêtes préparées</span></a></h2><p>Une requête préparée permet d&#39;exécuter une requête complexe, d&#39;en simplifier l&#39;écriture (surtout pour les requêtes avec paramètres) et d&#39;éviter les erreurs tant d&#39;écriture que d&#39;injection SQL (sécurisation des données). Une requête préparée sera exécutée plus vite, si elle est appelée plusieurs fois. Personnellement, je préfère préparer toutes mes requêtes, pour simplifier leur écriture et éviter de concaténer des chaînes de caractères.</p><h3 id="pdostatement" tabindex="-1"><a class="header-anchor" href="#pdostatement"><span>PDOStatement</span></a></h3><p><a href="https://www.php.net/manual/fr/class.pdostatement.php" target="_blank" rel="noopener noreferrer">La documentation officielle</a></p><p>Cet objet intermédiaire va nous permettre de préparer les requêtes, afin de les optimiser et de réduire certaines répétitions de code.</p><p>Un squelette minimal :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// On prépare une requête, que l&#39;on va exécuter plus tard</span></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">PDOStatement</span> <span class="token parameter">$statement</span> */</span></span>
<span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On peut lui passer des paramètres directement au moment de l&#39;exécution.</span></span>
<span class="line"><span class="token comment">// Nous allons utiliser la méthode bindParam() pour des exécutions dans des boucles</span></span>
<span class="line"><span class="token comment">// ou avec un tableau en paramètre pour une requête unique</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Si la requête a réussi, on peut récupérer les résultats</span></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">array</span></span> <span class="token parameter">$results</span> */</span></span>
<span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="les-marqueurs-de-positionnement" tabindex="-1"><a class="header-anchor" href="#les-marqueurs-de-positionnement"><span>Les marqueurs de positionnement</span></a></h3><ul><li>Pour lier des paramètres (variables PHP) à une requête</li><li>Les paramètres sont simplement numérotés</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// la méthode bindValue() attend une valeur en second paramètre (qu&#39;elle soit dans une variable ou non, peu importe).</span></span>
<span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;SELECT fullname FROM student WHERE fullname LIKE ?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Attention, la numérotation des paramètres commence à 1, pas à 0</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Test&quot;</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;exemple ci-dessus est équivalent à :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// la méthode bindParam() attend une variable en second paramètre (passage par référence).</span></span>
<span class="line"><span class="token comment">// Lui donner une valeur directement provoque une erreur.</span></span>
<span class="line"><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Test&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;SELECT fullname FROM student WHERE fullname LIKE ?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Attention, la numérotation des paramètres commence à 1, pas à 0</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;exemple ci-dessus est équivalent à :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;SELECT fullname FROM student WHERE fullname LIKE ?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string double-quoted-string">&quot;Test&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;un des grands avantages des requêtes préparées est l&#39;utilisation dans des boucles :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Test&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;INSERT INTO student (fullname) VALUES (?)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// À chaque exécution de la boucle, le contenu de $param va être changé</span></span>
<span class="line"><span class="token comment">// et on insère la donnée modifiée au fur et à mesure</span></span>
<span class="line"><span class="token comment">// (le contenu de $param est lu à chaque itération, grâce à bindParam)</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$param</span> <span class="token operator">.=</span> <span class="token variable">$i</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ En général, on va utiliser <code>bindValue()</code>, <code>bindParam()</code> ne sert que dans <strong>quelques cas spécifiques</strong>.</p><h3 id="les-parametres-nommes" tabindex="-1"><a class="header-anchor" href="#les-parametres-nommes"><span>Les paramètres nommés</span></a></h3><ul><li>Pour lier des paramètres (variables PHP) à une requête</li><li>Les paramètres sont nommés, permettant de les repérer plus facilement</li><li>Un paramètre commence toujours par <code>:</code> suivi d&#39;un nom</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;INSERT INTO student (fullname) VALUES (:name)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Notre paramètre :name sera remplacé par la valeur de $param, à l&#39;exécution de la requête</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;:name&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Test&quot;</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;exemple ci-dessus est équivalent à :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$statement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;INSERT INTO student (fullname) VALUES (:name)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Notre paramètre :name sera remplacé par la valeur de $param, à l&#39;exécution de la requête</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$param</span> <span class="token operator">.=</span> <span class="token variable">$i</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$statement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token comment">// Ici les : ne sont pas obligatoires</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;:name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test&#39;</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exemples-concrets" tabindex="-1"><a class="header-anchor" href="#exemples-concrets"><span>Exemples concrets</span></a></h4><p>Un exemple d&#39;une requête préparée, insérant un tableau de données dans une table <code>contact</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO contact (subject, message, email) VALUES (:subject, :message, :email)&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$pdoStatement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$contacts</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test2 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test2@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test3&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test3 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test3@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test4&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test4 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test4@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test5&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test5 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test5@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$contacts</span> <span class="token keyword">as</span> <span class="token variable">$contact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;:subject&#39;</span><span class="token punctuation">,</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;:message&#39;</span><span class="token punctuation">,</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;:email&#39;</span><span class="token punctuation">,</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La même chose, sans l&#39;appel à <code>bindParam()</code> ou <code>bindValue()</code> :</p><p>⚠️ Notez que l&#39;écriture est plus courte, mais la vérification des données est moins efficace.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;INSERT INTO contact (subject, message, email) VALUES (:subject, :message, :email)&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$pdoStatement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$contacts</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test2 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test2@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test3&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test3 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test3@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test4&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test4 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test4@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test5&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Un message de test5 super long !&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;test5@test.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$contacts</span> <span class="token keyword">as</span> <span class="token variable">$contact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;:subject&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;:message&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;:email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token variable">$contact</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un exemple de récupération de données :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM contact&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$pdoStatement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$success</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$results</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un exemple avec utilisation de <code>fetch()</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM contact&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$pdoStatement</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$isDone</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$pdoStatement</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recuperer-l-identifiant-du-dernier-element-enregistre" tabindex="-1"><a class="header-anchor" href="#recuperer-l-identifiant-du-dernier-element-enregistre"><span>Récupérer l&#39;identifiant du dernier élément enregistré</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;INSERT INTO truc (bidule, machin) VALUES(:bidule, :machin)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$isDone</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ici, on récupère l&#39;id du dernier élément inséré dans la table truc </span></span>
<span class="line"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">lastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="remplir-des-objets-avec-nos-donnees" tabindex="-1"><a class="header-anchor" href="#remplir-des-objets-avec-nos-donnees"><span>Remplir des objets avec nos données</span></a></h2>`,35)),s[38]||(s[38]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/42852fca3e194ec9a5658009e3a87dd7",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[39]||(s[39]=l(`<p>Avec PDO, vous pouvez remplir directement vos objets avec les constantes <code>PDO::FETCH_CLASS</code> ou <code>PDO::FETCH_INTO</code>. Dans les deux cas, votre objet PHP sera rempli avec les données récupérées en base ! Le premier crée une instance de la classe demandée, quoiqu&#39;il arrive. Le second met à jour une instance existante.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;classes/User.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;SELECT * FROM user WHERE id = 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On demande à PDO de nous créer un User</span></span>
<span class="line"><span class="token comment">// avec ce qu&#39;il va récupérer en BdD</span></span>
<span class="line"><span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">setFetchMode</span><span class="token punctuation">(</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_CLASS</span><span class="token punctuation">,</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// On a une nouvelle instance de notre classe User</span></span>
<span class="line"><span class="token comment">// avec ses données remplies.</span></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">setFetchMode</span><span class="token punctuation">(</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_INTO</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// On a rempli les données de notre user</span></span>
<span class="line"><span class="token comment">// à partir des données en base.</span></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ <code>PDO::FETCH_CLASS</code> appelle le constructeur <strong>après</strong> avoir rempli les données de l&#39;objet.</p><p>Pour utiliser les termes de la documentation :</p><blockquote><p>Lorsque des objets sont récupérés via PDO::FETCH_CLASS, les propriétés de l&#39;objet sont assignées en premier, puis le constructeur de la classe est appelé. Si PDO::FETCH_PROPS_LATE est également donné, cet ordre est inversé, c&#39;est-à-dire d&#39;abord le constructeur est appelé, et ensuite les propriétés sont assignées.</p></blockquote><p>Si cela pose problème, vous pouvez ajouter un drapeau (flag) supplémentaire :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// On peut utiliser plusieurs flags pour plus d&#39;options</span></span>
<span class="line"><span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">setFetchMode</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token class-name">FETCH_CLASS</span><span class="token operator">|</span><span class="token class-name">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_PROPS_LATE</span><span class="token punctuation">,</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$sth</span><span class="token operator">-&gt;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercices" tabindex="-1"><a class="header-anchor" href="#exercices"><span>Exercices</span></a></h2><p>Pour vous entrainer à manipuler PDO, utiliser</p>`,9)),n("ul",null,[n("li",null,[s[20]||(s[20]=a("les ")),e(o,{to:"/php/85-bdd-pdo.html"},{default:t(()=>s[19]||(s[19]=[a("exercices sur notre site de bonnets")])),_:1}),s[21]||(s[21]=a(" (à partir de l'exercice 26)."))])])])}const g=c(d,[["render",m],["__file","30-pdo.html.vue"]]),q=JSON.parse(`{"path":"/php/30-pdo.html","title":"Manipuler la BdD avec PDO (PHP Data Object)","lang":"fr-FR","frontmatter":{"date":"2021-02-05T00:00:00.000Z"},"headers":[{"level":2,"title":"L'extension PDO","slug":"l-extension-pdo","link":"#l-extension-pdo","children":[]},{"level":2,"title":"Se connecter à la base","slug":"se-connecter-a-la-base","link":"#se-connecter-a-la-base","children":[]},{"level":2,"title":"Gérer les erreurs","slug":"gerer-les-erreurs","link":"#gerer-les-erreurs","children":[]},{"level":2,"title":"Requêtes directes","slug":"requetes-directes","link":"#requetes-directes","children":[{"level":3,"title":"PDO::query()","slug":"pdo-query","link":"#pdo-query","children":[]},{"level":3,"title":"PDO::exec()","slug":"pdo-exec","link":"#pdo-exec","children":[]},{"level":3,"title":"Quelques exemples en vidéo","slug":"quelques-exemples-en-video","link":"#quelques-exemples-en-video","children":[]}]},{"level":2,"title":"Les requêtes préparées","slug":"les-requetes-preparees","link":"#les-requetes-preparees","children":[{"level":3,"title":"PDOStatement","slug":"pdostatement","link":"#pdostatement","children":[]},{"level":3,"title":"Les marqueurs de positionnement","slug":"les-marqueurs-de-positionnement","link":"#les-marqueurs-de-positionnement","children":[]},{"level":3,"title":"Les paramètres nommés","slug":"les-parametres-nommes","link":"#les-parametres-nommes","children":[]}]},{"level":2,"title":"Récupérer l'identifiant du dernier élément enregistré","slug":"recuperer-l-identifiant-du-dernier-element-enregistre","link":"#recuperer-l-identifiant-du-dernier-element-enregistre","children":[]},{"level":2,"title":"Remplir des objets avec nos données","slug":"remplir-des-objets-avec-nos-donnees","link":"#remplir-des-objets-avec-nos-donnees","children":[]},{"level":2,"title":"Exercices","slug":"exercices","link":"#exercices","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/30-pdo.md"}`);export{g as comp,q as data};
