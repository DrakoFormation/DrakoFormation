import{aj as t,ak as l,al as a,am as p,ar as s,an as o,ao as i,ap as c,aq as r}from"./app-BkblVdII.js";const u={};function d(v,n){const e=c("RouteLink");return r(),l("div",null,[n[3]||(n[3]=a(`<h1 id="les-bases-du-langage" tabindex="-1"><a class="header-anchor" href="#les-bases-du-langage"><span>Les bases du langage</span></a></h1><h2 id="les-types-de-valeur" tabindex="-1"><a class="header-anchor" href="#les-types-de-valeur"><span>Les types de valeur</span></a></h2><p>Il n&#39;y a que 7 types de valeur possible en JS, r√©parties en 2 groupes.</p><h3 id="les-valeurs-primitives" tabindex="-1"><a class="header-anchor" href="#les-valeurs-primitives"><span>Les valeurs primitives</span></a></h3><ul><li><code>undefined</code> est attribu√©e √† toutes les valeurs manquantes (non intentionnelles, vous ne d√©finissez pas cette valeur vous-m√™me)</li><li><code>null</code> est attribu√©e pour les valeurs manquantes (intentionnelles, vous la d√©finissez vous-m√™me)</li><li><code>true</code> (vrai) et <code>false</code> (faux), appel√©s bool√©ens, servent aux op√©rations logiques</li><li>les nombres (<code>0</code>, <code>32</code>, <code>-12</code>, <code>42.42</code>)</li><li>les cha√Ænes de caract√®res (<code>&quot;test&quot;</code>, <code>&#39;test&#39;</code>, <code>&quot;Un texte un peu plus long&quot;</code>) pour repr√©senter les textes</li></ul><h3 id="objets-et-fonctions" tabindex="-1"><a class="header-anchor" href="#objets-et-fonctions"><span>Objets et fonctions</span></a></h3><ul><li>les objets (dont le plus simple est <code>{}</code>, mais nous en verrons bien d&#39;autres) servent √† grouper des donn√©es</li><li>les fonctions pour faire r√©f√©rence √† du code</li></ul><h3 id="determiner-le-type-d-une-valeur" tabindex="-1"><a class="header-anchor" href="#determiner-le-type-d-une-valeur"><span>D√©terminer le type d&#39;une valeur</span></a></h3><p>La fonction <code>typeof()</code> renvoie une cha√Æne de caract√®res contenant le type. Quelques exemples :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// &quot;number&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;string&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token string">&quot;42&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;string&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transformer-certaines-valeurs" tabindex="-1"><a class="header-anchor" href="#transformer-certaines-valeurs"><span>Transformer certaines valeurs</span></a></h3><p>Plusieurs fonctions permettent de changer le type d&#39;une valeur :</p><ul><li><code>parseInt()</code> pour convertir une cha√Æne de caract√®res en nombre entier (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener noreferrer">documentation sur parseInt()</a>)</li><li><code>parseFloat()</code> pour convertir une cha√Æne de caract√®res en nombre flottant (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat" target="_blank" rel="noopener noreferrer">documentation sur parseFloat()</a>)</li></ul><h2 id="les-variables" tabindex="-1"><a class="header-anchor" href="#les-variables"><span>Les variables</span></a></h2><p>Une variable est un √©l√©ment qui <strong>pointe</strong> vers une valeur, et n&#39;est pas une valeur. On dit qu&#39;une variable &quot;contient&quot; une valeur.</p><p>Elle peut contenir une valeur de n&#39;importe quel type vu pr√©c√©demment (et en changer pendant notre programme si besoin).</p><h3 id="declarer-une-variable-et-affecter-une-valeur" tabindex="-1"><a class="header-anchor" href="#declarer-une-variable-et-affecter-une-valeur"><span>D√©clarer une variable et affecter une valeur</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> uneVariable <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> uneVariable <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Deux fa√ßons de faire :</p><ul><li><code>let</code> : introduit en javascript 2015, c&#39;est la m√©thode √† pr√©f√©rer. La port√©e de cette variable est strictement restreinte √† son bloc (voir plus loin, sur la port√©e des variables).</li><li><code>var</code> : l&#39;ancienne m√©thode, qui fonctionne toujours. La port√©e de cette variable n&#39;est pas restreinte √† son bloc (voir plus loin, sur la port√©e des variables).</li></ul><p>On peut d√©clarer une variable en l&#39;initialisant avec une valeur (ou non), ou en d√©clarer plusieurs sur une m√™me ligne. Quelques exemples :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On d√©clarer une variable sans lui donner de valeur (elle contient la valeur null)</span></span>
<span class="line"><span class="token keyword">let</span> uneVariable<span class="token punctuation">;</span></span>
<span class="line">uneVariable <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span> <span class="token comment">// on affecte une valeur</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ces deux lignes peuvent √™tre condens√©es en une seule :</span></span>
<span class="line"><span class="token keyword">let</span> uneVariable <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// D√©clarer plusieurs variables sur une m√™me ligne :</span></span>
<span class="line"><span class="token keyword">let</span> uneVariable<span class="token punctuation">,</span> uneAutreVariable <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> encoreUneVariable<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="les-constantes" tabindex="-1"><a class="header-anchor" href="#les-constantes"><span>Les constantes</span></a></h2><p>Les constantes sont tr√®s proches des variables, mais il faut <strong>imp√©rativement</strong> leur donner une valeur au moment de leur d√©claration et cette valeur <strong>ne pourra pas √™tre chang√©e par la suite</strong> (d&#39;o√π le nom de constante üòâ ). On les d√©clare avec le mot-cl√© <code>const</code> et, par convention, les constantes sont √©crites tout en majuscules et les mots s√©par√©s par des underscores (<code>_</code>).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token constant">UNE_CONSTANTE</span> <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="contexte-et-portee-des-variables" tabindex="-1"><a class="header-anchor" href="#contexte-et-portee-des-variables"><span>Contexte et port√©e des variables</span></a></h2><p>Le contexte d&#39;ex√©cution est une entit√© regroupant des informations sur un code ex√©cutable. Quand un script JavaScript est ex√©cut√©, un contexte d&#39;ex√©cution <strong>global</strong> est cr√©√©. Ensuite, <strong>chaque appel de fonction cr√©e un nouveau contexte d&#39;ex√©cution associ√© √† cette fonction</strong>. Chaque contexte peut ainsi contenir des variables ayant le m√™me nom mais ne faisant pas r√©f√©rence √† la m√™me valeur, chacune d√©pendant de son propre contexte.</p><p>On peut r√©sumer ceci en disant que le contexte global repr√©sente l&#39;enti√®ret√© du script.</p><ul><li>Toute variable d√©finie en dehors d&#39;une fonction ou d&#39;une structure de contr√¥le est dite globale.</li><li>Toute variable d√©finie dans une fonction ou structure de contr√¥le est dite locale et ne sera pas disponible dans le contexte global.</li></ul><p>Quelque exemple pour rendre √ßa plus clair :</p><h3 id="une-variable-globale" tabindex="-1"><a class="header-anchor" href="#une-variable-globale"><span>Une variable globale</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On d√©fini une variable test dans le contexte global</span></span>
<span class="line"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">testFonction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// on la modifie dans une fonction (elle ne sera modifi√©e que lors de l&#39;appel de cette fonction)</span></span>
<span class="line">    test <span class="token operator">=</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche &#39;test&#39;</span></span>
<span class="line"><span class="token function">testFonction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche &#39;test2&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="une-variable-locale" tabindex="-1"><a class="header-anchor" href="#une-variable-locale"><span>Une variable locale</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">testFonction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// On d√©clare une variable locale, elle n&#39;est disponible que dans la fonction</span></span>
<span class="line">    <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Error: test is not defined&quot; car la variable n&#39;existe pas dans le contexte global</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="utiliser-une-variable-locale-et-une-variable-globale-ayant-le-meme-nom" tabindex="-1"><a class="header-anchor" href="#utiliser-une-variable-locale-et-une-variable-globale-ayant-le-meme-nom"><span>Utiliser une variable locale et une variable globale ayant le m√™me nom</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// On d√©fini une variable test dans le contexte global</span></span>
<span class="line"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">testFonction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// on la modifie dans une fonction (elle ne sera modifi√©e que lors de l&#39;appel de cette fonction)</span></span>
<span class="line">    <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">// affiche &#39;test2&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche &#39;test&#39;</span></span>
<span class="line"><span class="token function">testFonction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// le console.log() de la fonction est appel√© et &#39;test2&#39; est affich√©</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche &#39;test&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="differences-entre-let-et-var" tabindex="-1"><a class="header-anchor" href="#differences-entre-let-et-var"><span>Diff√©rences entre <code>let</code> et <code>var</code></span></a></h2><p>Jusqu&#39;ici, vous auriez pu remplacer <code>let</code> par <code>var</code> dans tous les exemples, sans que cela n&#39;ait de cons√©quences. La diff√©rence se produit au niveau des blocs (c&#39;est-√†-dire les <code>if</code>, boucles, <code>switch</code>, etc.). Si le code a √©t√© ex√©cut√©, alors le <code>let</code> n&#39;existera que dans le bloc, alors qu&#39;un <code>var</code> existera au niveau du contexte parent (local ou global).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> variableLet <span class="token operator">=</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> variableVar <span class="token operator">=</span> <span class="token string">&quot;var&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variableLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Affiche Error: variableLet is not defined</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variableVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Affiche &quot;var&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans l&#39;exemple ci-dessus, <code>variableLet</code> n&#39;existe pas en dehors du bloc (d√©fini par le <code>if</code>), alors que <code>variableVar</code>, si.</p><p>Que se passe-t-il si vous d√©clarer une nouvelle variable avec le m√™me nom dans une condition ?</p><h3 id="avec-var" tabindex="-1"><a class="header-anchor" href="#avec-var"><span>Avec <code>var</code></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 42</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="avec-let" tabindex="-1"><a class="header-anchor" href="#avec-let"><span>Avec <code>let</code></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 42</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &#39;test&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En conclusion : utiliser <code>let</code> vous permet un code plus propre, o√π les variables sont d√©clar√©s dans le contexte <strong>et</strong> dans les blocs o√π elles sont n√©cessaires (visuellement plus rapide √† retrouver et moins de risques d&#39;erreur).</p><h2 id="le-mode-strict-de-javascript" tabindex="-1"><a class="header-anchor" href="#le-mode-strict-de-javascript"><span>Le mode strict de javascript</span></a></h2><p>Le mode strict de javascript (ES5) vous permet d&#39;utiliser une version plus restrictive (et vous for√ßant √† √©crire du code plus propre) de javascript. Ce mode :</p><ul><li>√âlimine des erreurs silencieuses en les transformant en exceptions √† l&#39;ex√©cution du code</li><li>Permet aux moteurs javascript des navigateurs d&#39;effectuer des optimisations sans entraves (et donc votre code sera potentiellement plus rapide)</li></ul><p>Pour s&#39;en servir, commencez vos fichier <code>.js</code> par <code>&quot;use strict&quot;;</code> ou <code>&#39;use strict&#39;;</code>.</p><h2 id="types-de-donnees-complexes" tabindex="-1"><a class="header-anchor" href="#types-de-donnees-complexes"><span>Types de donn√©es complexes</span></a></h2><h3 id="les-tableaux" tabindex="-1"><a class="header-anchor" href="#les-tableaux"><span>Les tableaux</span></a></h3><p><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">La documentation Mozilla sur les tableaux</a>. <a href="https://developer.mozilla.org/fr/docs/Learn/JavaScript/First_steps/Arrays" target="_blank" rel="noopener noreferrer">Introduction aux tableaux</a></p><p>Un tableau est un ensemble de valeurs index√©es. C&#39;est-√†-dire que pour chaque entr√©e du tableau (qui contient une valeur), un index y est associ√© et permet de le r√©cup√©rer facilement.</p><p>Cr√©er un tableau :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// M√©thode courte</span></span>
<span class="line"><span class="token keyword">let</span> tableau <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// M√©thode &quot;longue&quot; et strictement √©quivalente</span></span>
<span class="line"><span class="token keyword">let</span> tableau <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nous obtenons alors un tableau, index√© en 0 contenant nos valeurs.</p><ul><li>0: &#39;test&#39;,</li><li>1: 42,</li><li>2: 99.99,</li><li>3: [0] (remarquez ici que l&#39;on peut mettre n&#39;importe quel type de valeur dans notre tableau)</li></ul><p>On peut √©galement compter le nombre d&#39;√©l√©ments contenu dans un tableau √† l&#39;aide de la propri√©t√© <code>.length</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> tableau <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tableau<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="verifier-si-une-valeur-est-dans-le-tableau-ou-une-string" tabindex="-1"><a class="header-anchor" href="#verifier-si-une-valeur-est-dans-le-tableau-ou-une-string"><span>V√©rifier si une valeur est dans le tableau (ou une string)</span></a></h4><p>La m√©thode <code>indexOf</code> permet de v√©rifier l&#39;existence d&#39;un ou plusieurs caract√®res dans un tableau ou une cha√Æne de caract√®res. Elle retourne un nombre correspondant √† l&#39;index (la position) de la valeur. Si cette valeur n&#39;est pas pr√©sente, la m√©thode renvoie <code>-1</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 1 (cette valeur est √† l&#39;index 1)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche -1 (cette valeur n&#39;est pas dans le tableau)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;Une chaine de caract√®re plut√¥t longue, avec plein de mots et de lettres dedans.&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;carac&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 14 (existe √† la position 14, soit la 15√®me lettre)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;fmdoskjmlskj&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche -1 (n&#39;est pas dans la cha√Æne)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche 3 (existe √† la position 3, soit la 4√®me lettre)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="les-objets" tabindex="-1"><a class="header-anchor" href="#les-objets"><span>Les objets</span></a></h3><p>Une <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">liste des objets d√©j√† d√©finis dans Javascript</a>.</p><p>Les objets sont une structure de donn√©es complexe nous permettant de regrouper des valeurs tout en cr√©ant nos propres index (nomm√©s propri√©t√©s) et des fonctions internes (appel√©es m√©thodes).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// M√©thode courte</span></span>
<span class="line"><span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Une propri√©t√©</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Ouille&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">greetings</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Une m√©thode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bonjour </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// M√©thode &quot;longue&quot; et strictement √©quivalente</span></span>
<span class="line"><span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">student<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Une propri√©t√©</span></span>
<span class="line">student<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&quot;Ouille&quot;</span><span class="token punctuation">;</span></span>
<span class="line">student<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span></span>
<span class="line">student<span class="token punctuation">.</span><span class="token function-variable function">greetings</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Une m√©thode</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bonjour </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans le cadre d&#39;un objet, on ne parle pas d&#39;index mais de propri√©t√©. Une propri√©t√© n&#39;est pas une variable, elle n&#39;existe que dans l&#39;objet et il faut donc renseigner l&#39;objet auquel elle appartient. Il en va de m√™me pour les m√©thodes.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// pour afficher le nom de famille, qui est √† la propri√©t√© lastname</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>lastname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Ouille&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// on peut aussi l&#39;√©crire de cette fa√ßon l√†</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Ouille&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="les-fonctions" tabindex="-1"><a class="header-anchor" href="#les-fonctions"><span>Les fonctions</span></a></h3><p><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noopener noreferrer">La documentation sur les fonctions de Mozilla</a></p><h4 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration"><span>D√©claration</span></a></h4><p>Les fonctions contiennent du code (un groupe d&#39;instructions) qui ne s&#39;ex√©cute que lorsque la fonction est appel√©e. On leur donne un nom, des param√®tres (optionnels) et un corps. Une fonction peut √™tre d√©clar√©e n&#39;importe o√π dans le code, et peut m√™me √™tre appel√©e avant d&#39;√™tre d√©clar√©e.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Un appel de fonction, dont on met le r√©sultat (retourn√© par le mot-cl√© return) dans une variable.</span></span>
<span class="line"><span class="token keyword">let</span> somme <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// La d√©claration, incluant le nom de la fonction et ses 2 param√®tres</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ici est le corps de la fonction</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// cette fonction retourne une valeur, qui peut √™tre utilis√©e plus tard lorsqu&#39;on appelle la fonction</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Comme pour les variables, on utilise (par convention) des noms de fonction clairs (indiquant leur utilit√©), √©crites en camel case et en anglais (pas d&#39;accent ni caract√®res sp√©ciaux dans le nom).</p><h4 id="les-parametres" tabindex="-1"><a class="header-anchor" href="#les-parametres"><span>Les param√®tres</span></a></h4><p>Les <a href="https://developer.mozilla.org/fr/docs/Glossary/Parameter" target="_blank" rel="noopener noreferrer">param√®tres</a> (les noms dans les parenth√®ses de la fonction) sont des variables qui vont servir dans la fonction, dont les valeurs seront d√©finies lors de l&#39;appel de la fonction.</p><p>Dans l&#39;exemple pr√©c√©dent, <code>number1</code> est un param√®tre et contient la valeur <code>42</code> lors de l&#39;appel de l&#39;exemple. On dit que 42 est un argument de <code>sum</code> (c&#39;est-√†-dire une valeur qu&#39;on donne √† la fonction).</p><p>Un param√®tre peut √™tre optionnel et on peut lui donner une valeur par d√©faut (si aucun argument n&#39;est fourni pour lui donner une valeur).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2 <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span> <span class="token comment">// Revient √† renvoyer number1 + 0 si number2 n&#39;est pas d√©fini</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// renvoie 42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="les-instructions" tabindex="-1"><a class="header-anchor" href="#les-instructions"><span>Les instructions</span></a></h4><p>Le but premier d&#39;une fonction est d&#39;ex√©cuter une s√©rie d&#39;instructions (qui ne s&#39;ex√©cutent que lorsque la fonction est appel√©e). Ces instructions peuvent utiliser les variables des param√®tres, en cr√©er de nouvelles (toute variable d√©clar√©e n&#39;existera pas en dehors de la fonction), etc.</p><h4 id="renvoyer-une-valeur" tabindex="-1"><a class="header-anchor" href="#renvoyer-une-valeur"><span>Renvoyer une valeur</span></a></h4><p>Envoyer une valeur n&#39;est pas obligatoire, mais peut se r√©v√©ler utile, selon les cas. On va en g√©n√©ral retourner (avec le mot-cl√© <code>return</code>) le r√©sultat d&#39;un calcul (ou de diverses op√©rations).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2 <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie 115</span></span>
<span class="line"><span class="token keyword">let</span> total2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="les-fonctions-anonymes" tabindex="-1"><a class="header-anchor" href="#les-fonctions-anonymes"><span>Les fonctions anonymes</span></a></h4><p>Comme leur nom l&#39;indique, les fonctions anonymes n&#39;ont pas de nom. En g√©n√©ral, ces fonctions sont utilis√©es une fois dans le code. Nous en verrons des exemples tout au long de ce cours, m√™me s&#39;il est pr√©f√©rable de cr√©er une fonction nomm√©e.</p><h4 id="les-fonctions-flechees" tabindex="-1"><a class="header-anchor" href="#les-fonctions-flechees"><span>Les fonctions fl√©ch√©es</span></a></h4><p>Depuis la version 2015 de javascript, on peut utiliser des fonctions √† la syntaxe plus courte, avec quelques diff√©rences importantes :</p><ul><li>La syntaxe change</li><li>leur place dans le code est importante (il faut les d√©clarer <strong>avant</strong> de les appeler)</li><li>le contexte dans la fonction est le m√™me qu&#39;√† l&#39;ext√©rieur de la fonction</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Il existe m√™me une √©criture plus courte dans ce cas (si la fonction ne contient qu&#39;une seule instruction avec un <code>return</code>) :</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number1<span class="token punctuation">,</span> number2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="quand-mettre-un-point-virgule" tabindex="-1"><a class="header-anchor" href="#quand-mettre-un-point-virgule"><span>Quand mettre un point-virgule ?</span></a></h2><p>Un certain nombre d&#39;instructions se finissent pas un point-virgule <code>;</code>, mais pas toute. La plus courante, l&#39;affectation (<code>a = x;</code>) se termine toujours par un <code>;</code>. Les instructions contenant des accolades <code>{}</code>, comme les conditions, les boucles, etc. ne prennent pas de <code>;</code>.</p><p>Pour aller plus loin, <a href="https://jeremymouzin.com/blog/les-points-virgules-en-javascript-le-guide-definitif/" target="_blank" rel="noopener noreferrer">un article tr√®s int√©ressant sur les <code>;</code> en js</a></p><h2 id="le-mot-cle-this" tabindex="-1"><a class="header-anchor" href="#le-mot-cle-this"><span>Le mot-cl√© <code>this</code></span></a></h2><p><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noopener noreferrer">Documentation</a></p><h3 id="contexte-global" tabindex="-1"><a class="header-anchor" href="#contexte-global"><span>Contexte global</span></a></h3><p>Dans le contexte global, c‚Äôest-√†-dire en dehors de tout objet ou fonction, <code>this</code> vaut <code>window</code> (objet contenant les informations du navigateur)</p><h3 id="dans-une-fonction-d-evenement" tabindex="-1"><a class="header-anchor" href="#dans-une-fonction-d-evenement"><span>Dans une fonction d&#39;√©v√©nement</span></a></h3><p>Dans une fonction d&#39;√©v√©nement, <code>this</code> fait r√©f√©rence au noeud/la balise qui a d√©clench√© l&#39;√©v√©nement.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">&quot;unLien&quot;</span><span class="token operator">&gt;</span>Un texte<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#unLien&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Affiche &lt;a id=&quot;unLien&quot;&gt;Un texte&lt;/a&gt;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dans-un-objet" tabindex="-1"><a class="header-anchor" href="#dans-un-objet"><span>Dans un objet</span></a></h3><p>Dans un objet, qu&#39;il soit litt√©ral ou avec une classe, <code>this</code> contient l&#39;objet lui-m√™me.</p>`,105)),p("p",null,[n[1]||(n[1]=s("Voir ")),o(e,{to:"/js/6-poo.html"},{default:i(()=>n[0]||(n[0]=[s("la section sur la POO")])),_:1}),n[2]||(n[2]=s(" pour plus de d√©tails."))]),n[4]||(n[4]=a(`<h3 id="dans-les-fonctions-flechees" tabindex="-1"><a class="header-anchor" href="#dans-les-fonctions-flechees"><span>Dans les fonctions fl√©ch√©es</span></a></h3><p>Utiliser <code>this</code> dans une fonction fl√©ch√©e fait r√©f√©rence au contexte parent. S&#39;il s&#39;agit du contexte global, <code>this</code> contient <code>window</code>.</p><h3 id="utiliser-bind-pour-changer-la-valeur-de-this" tabindex="-1"><a class="header-anchor" href="#utiliser-bind-pour-changer-la-valeur-de-this"><span>Utiliser <code>.bind()</code> pour changer la valeur de <code>this</code></span></a></h3><p>Il est possible de changer la valeur de <code>this</code> dans une fonction avec la m√©thode <code>.bind()</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{prop: &quot;toto&quot;}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">	on change le contexte de la fonction onClickButton </span>
<span class="line">	pour correspondra √† l&#39;objet contenu dans le bind </span>
<span class="line">	et non plus √† la balise qui a d√©clench√© l&#39;√©v√©nement</span>
<span class="line">*/</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#select&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token function">onClickButton</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&quot;toto&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const k=t(u,[["render",d],["__file","1-bases.html.vue"]]),b=JSON.parse(`{"path":"/js/1-bases.html","title":"Les bases du langage","lang":"fr-FR","frontmatter":{"date":"2021-04-02T00:00:00.000Z"},"headers":[{"level":2,"title":"Les types de valeur","slug":"les-types-de-valeur","link":"#les-types-de-valeur","children":[{"level":3,"title":"Les valeurs primitives","slug":"les-valeurs-primitives","link":"#les-valeurs-primitives","children":[]},{"level":3,"title":"Objets et fonctions","slug":"objets-et-fonctions","link":"#objets-et-fonctions","children":[]},{"level":3,"title":"D√©terminer le type d'une valeur","slug":"determiner-le-type-d-une-valeur","link":"#determiner-le-type-d-une-valeur","children":[]},{"level":3,"title":"Transformer certaines valeurs","slug":"transformer-certaines-valeurs","link":"#transformer-certaines-valeurs","children":[]}]},{"level":2,"title":"Les variables","slug":"les-variables","link":"#les-variables","children":[{"level":3,"title":"D√©clarer une variable et affecter une valeur","slug":"declarer-une-variable-et-affecter-une-valeur","link":"#declarer-une-variable-et-affecter-une-valeur","children":[]}]},{"level":2,"title":"Les constantes","slug":"les-constantes","link":"#les-constantes","children":[]},{"level":2,"title":"Contexte et port√©e des variables","slug":"contexte-et-portee-des-variables","link":"#contexte-et-portee-des-variables","children":[{"level":3,"title":"Une variable globale","slug":"une-variable-globale","link":"#une-variable-globale","children":[]},{"level":3,"title":"Une variable locale","slug":"une-variable-locale","link":"#une-variable-locale","children":[]},{"level":3,"title":"Utiliser une variable locale et une variable globale ayant le m√™me nom","slug":"utiliser-une-variable-locale-et-une-variable-globale-ayant-le-meme-nom","link":"#utiliser-une-variable-locale-et-une-variable-globale-ayant-le-meme-nom","children":[]}]},{"level":2,"title":"Diff√©rences entre let et var","slug":"differences-entre-let-et-var","link":"#differences-entre-let-et-var","children":[{"level":3,"title":"Avec var","slug":"avec-var","link":"#avec-var","children":[]},{"level":3,"title":"Avec let","slug":"avec-let","link":"#avec-let","children":[]}]},{"level":2,"title":"Le mode strict de javascript","slug":"le-mode-strict-de-javascript","link":"#le-mode-strict-de-javascript","children":[]},{"level":2,"title":"Types de donn√©es complexes","slug":"types-de-donnees-complexes","link":"#types-de-donnees-complexes","children":[{"level":3,"title":"Les tableaux","slug":"les-tableaux","link":"#les-tableaux","children":[]},{"level":3,"title":"Les objets","slug":"les-objets","link":"#les-objets","children":[]},{"level":3,"title":"Les fonctions","slug":"les-fonctions","link":"#les-fonctions","children":[]}]},{"level":2,"title":"Quand mettre un point-virgule ?","slug":"quand-mettre-un-point-virgule","link":"#quand-mettre-un-point-virgule","children":[]},{"level":2,"title":"Le mot-cl√© this","slug":"le-mot-cle-this","link":"#le-mot-cle-this","children":[{"level":3,"title":"Contexte global","slug":"contexte-global","link":"#contexte-global","children":[]},{"level":3,"title":"Dans une fonction d'√©v√©nement","slug":"dans-une-fonction-d-evenement","link":"#dans-une-fonction-d-evenement","children":[]},{"level":3,"title":"Dans un objet","slug":"dans-un-objet","link":"#dans-un-objet","children":[]},{"level":3,"title":"Dans les fonctions fl√©ch√©es","slug":"dans-les-fonctions-flechees","link":"#dans-les-fonctions-flechees","children":[]},{"level":3,"title":"Utiliser .bind() pour changer la valeur de this","slug":"utiliser-bind-pour-changer-la-valeur-de-this","link":"#utiliser-bind-pour-changer-la-valeur-de-this","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"js/1-bases.md"}`);export{k as comp,b as data};
