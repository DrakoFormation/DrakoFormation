import{aj as c,ak as r,am as s,an as a,ao as e,al as l,ap as i,aq as u,ar as t}from"./app-BkblVdII.js";const d={},m={class:"table-of-contents"};function k(v,n){const p=i("router-link"),o=i("RouteLink");return u(),r("div",null,[n[5]||(n[5]=s("h1",{id:"easy-admin-bundle",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#easy-admin-bundle"},[s("span",null,"Easy Admin Bundle")])],-1)),s("nav",m,[s("ul",null,[s("li",null,[a(p,{to:"#installation-et-mise-en-place"},{default:e(()=>n[0]||(n[0]=[t("Installation et mise en place")])),_:1})]),s("li",null,[a(p,{to:"#personnalisation-des-cruds"},{default:e(()=>n[1]||(n[1]=[t("Personnalisation des CRUDs")])),_:1})]),s("li",null,[a(p,{to:"#event-listeners"},{default:e(()=>n[2]||(n[2]=[t("Event Listeners")])),_:1})])])]),n[6]||(n[6]=s("p",null,"En vid√©o :",-1)),n[7]||(n[7]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/df76d7c122b1497792b6feaf82900a62",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[8]||(n[8]=l(`<p>Le bundle <a href="https://symfony.com/bundles/EasyAdminBundle/current/index.html" target="_blank" rel="noopener noreferrer">EasyAdminBundle</a> vous permet de g√©n√©rer un espace d&#39;administration simplement √† partir de quelques fichiers (controllers). Il est tr√®s rapide √† prendre en main, tr√®s puissant et permet de cr√©er une interface tr√®s compl√®te, tout en vous permettant de la personnaliser.</p><p>La <a href="https://symfony.com/bundles/EasyAdminBundle/current/index.html" target="_blank" rel="noopener noreferrer">documentation du bundle</a> d√©taille √† peu pr√®s tout et je vais vous donner ici seulement les √©l√©ments qui permettent de d√©marrer rapidement.</p><h2 id="installation-et-mise-en-place" tabindex="-1"><a class="header-anchor" href="#installation-et-mise-en-place"><span>Installation et mise en place</span></a></h2><p>Dans un premier temps, installez le bundle avec :</p><p><code>composer require easycorp/easyadmin-bundle</code></p><p>Normalement, cela ne devrait pas cr√©er de probl√®mes üòâ . Vous pourrez alors cr√©er votre premier Dashboard (personnellement, j&#39;en ai toujours un seul) avec :</p><p><code>php bin/console make:admin:dashboard</code></p><p>Personnellement, je conserve les options propos√©es (nommer le controller <code>DashboardController</code> et les ranger dans <code>src/Controller/Admin</code>), mais c&#39;est √† vous de voir.</p><p>Le fichier g√©n√©r√©, avec quelques commentaires pour expliquer les diff√©rents √©l√©ments :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>Admin</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">EasyCorp<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>EasyAdminBundle<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>Dashboard</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">EasyCorp<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>EasyAdminBundle<span class="token punctuation">\\</span>Config<span class="token punctuation">\\</span>MenuItem</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">EasyCorp<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>EasyAdminBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractDashboardController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">DashboardController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDashboardController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Une route et une action, permettant d&#39;afficher le dashboard</span></span>
<span class="line">    <span class="token comment">// lors de l&#39;appel de l&#39;uri /admin</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/admin&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;admin&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// La vue de base donne un petit &quot;tuto&quot; sur ce que vous pouvez faire avec le dashboard</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Diff√©rentes configurations sont possibles,</span></span>
<span class="line">    <span class="token comment">// pour personnaliser l&#39;interface g√©n√©rale de votre admin</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">configureDashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Dashboard</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name static-context">Dashboard</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// C&#39;est ici que nous ajouterons des liens vers les diff√©rents CRUDs de notre admin</span></span>
<span class="line">    <span class="token comment">// Cette m√©thode g√®re les √©l√©ments √† afficher dans le menu de gauche de notre interface</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">configureMenuItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">iterable</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token class-name static-context">MenuItem</span><span class="token operator">::</span><span class="token function">linktoDashboard</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Dashboard&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;fa fa-home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// yield MenuItem::linkToCrud(&#39;Label&#39;, &#39;fas fa-list&#39;, Entity::class);</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Si vous essayez d&#39;acc√©der √† la route <code>/admin</code>, vous devriez avoir acc√®s au dashboard de base.</p><p>‚ö†Ô∏è Avant d&#39;aller plus loin, je vous conseille tr√®s fortement d&#39;<a href="https://symfony.com/doc/current/EasyAdminBundle/security.html" target="_blank" rel="noopener noreferrer">ajouter une contrainte pour que seuls les admins aient acc√®s au dashboard</a> (voir le fichier <code>config/packages/security.yaml</code> par exemple)</p><p>Nous pouvons alors g√©n√©rer nos CRUDs avec la commande <code>php bin/console make:admin:crud</code>, puis ajouter les liens dans notre <code>DashBoardController</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">configureMenuItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">iterable</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token class-name static-context">MenuItem</span><span class="token operator">::</span><span class="token function">linktoDashboard</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Dashboard&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;fa fa-home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token class-name static-context">MenuItem</span><span class="token operator">::</span><span class="token function">linkToCrud</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Un premier crud&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;fas fa-list&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Entity1</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token class-name static-context">MenuItem</span><span class="token operator">::</span><span class="token function">linkToCrud</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Un second crud&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;fas fa-list&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Entity2</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token class-name static-context">MenuItem</span><span class="token operator">::</span><span class="token function">linkToCrud</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Un troisi√®me crud&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;fas fa-list&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Entity3</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>‚ö†Ô∏è Les ic√¥nes comme <code>fa fa-home</code> ou <code>fas fa-list</code> viennent de <a href="https://fontawesome.com/v5.15/icons?d=gallery&amp;p=2&amp;m=free" target="_blank" rel="noopener noreferrer">font-awesome, librairie tr√®s utilis√©e d&#39;ic√¥nes</a> et vous pouvez bien s√ªr les remplacer par celles qui vous semblent plus pertinentes !</p><p>Pour personnaliser le dashboard, l&#39;affichage des liens, etc, je vous invite √† lire <a href="https://symfony.com/bundles/EasyAdminBundle/current/dashboards.html" target="_blank" rel="noopener noreferrer">la documentation sur le sujet</a>.</p><h2 id="personnalisation-des-cruds" tabindex="-1"><a class="header-anchor" href="#personnalisation-des-cruds"><span>Personnalisation des CRUDs</span></a></h2><p>Lors de la g√©n√©ration d&#39;un CRUD, vous obtenez une classe tr√®s vide, mais suffisante pour avoir un CRUD fonctionnel :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>Admin</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Entity<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">EasyCorp<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>EasyAdminBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractCrudController</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">EntityCrudController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCrudController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getEntityFqcn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name static-context">Entity</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Par contre, d√®s que notre projet devient un peu complexe, il devient n√©cessaire de modifier les √©l√©ments affich√©s ou modifiable dans les formulaires. Pour cela, nous allons surcharger la m√©thode <code>configureFields()</code>.</p><p>‚ö†Ô∏è Il faut garder en t√™te que les CRUD de EasyAdmin sont d√©compos√©s en 4 pages : <code>index</code>, <code>detail</code>, <code>edit</code> et <code>new</code>. On peut personnaliser quels champs apparaissent sur chacune de ces pages !</p><p>Voici un exemple comment√© de ce que l&#39;on peut trouver / faire :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">configureFields</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$pageName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">iterable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token comment">// On affiche la propri√©t√© id de notre entit√©, dans un champ IdField (sp√©cifique aux identifiants).</span></span>
<span class="line">        <span class="token class-name static-context">IdField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// Mais on ne permet pas de la modifier, ni l&#39;afficher dans les formulaires.</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">hideOnForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On aurait pu faire le contraire et utiliser la m√©thode.</span></span>
<span class="line">            <span class="token comment">// -&gt;onlyOnIndex() pour ne l&#39;afficher que sur la liste.</span></span>
<span class="line">        <span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Name est modifiable dans un champ textuel (widget input de type text).</span></span>
<span class="line">        <span class="token class-name static-context">TextField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Description est un texte que l&#39;on pourra mettre en forme, gr√¢ce au TextEditorField.</span></span>
<span class="line">        <span class="token comment">// Attention, la mise en forme se fait en HTML, et il faut le prendre en compte √† l&#39;affichage.</span></span>
<span class="line">        <span class="token comment">// Nous aurions aussi pu utiliser TextareaField, pour nosu passer des outils de mise en forme.</span></span>
<span class="line">        <span class="token class-name static-context">TextEditorField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;description&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// On affiche la description sur toutes les pages, sauf la liste</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">hideOnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Le BooleanField permet √©galement de changer la valeur depuis la liste.</span></span>
<span class="line">        <span class="token comment">// Si vous ne le souhaitez pas, appelez la m√©thode -&gt;renderAsSwitch(false).</span></span>
<span class="line">        <span class="token class-name static-context">BooleanField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;inMenu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name static-context">IntegerField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orderBy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Comme son nom l&#39;indique, ce champ AssociationField permet de g√©rer l&#39;association entre deux entit√©s.</span></span>
<span class="line">        <span class="token comment">// Dans les faits, un champ &lt;select&gt; sera affich√© pour choisir un ou plusieurs entit√©s √† associer.</span></span>
<span class="line">        <span class="token comment">// Pour que ce champ fonctionne, pensez √† impl√©menter la m√©thode __toString() dans les entit√©s √† associer.</span></span>
<span class="line">        <span class="token class-name static-context">AssociationField</span><span class="token operator">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;parent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Il y a, bien s√ªr, <a href="https://symfony.com/bundles/EasyAdminBundle/current/crud.html" target="_blank" rel="noopener noreferrer">de tr√®s nombreuses autres options, pr√©sent√©es dans la documentation sur les cruds</a> ou dans <a href="https://symfony.com/doc/current/EasyAdminBundle/fields.html" target="_blank" rel="noopener noreferrer">la documentation sur les champs</a>.</p><h2 id="event-listeners" tabindex="-1"><a class="header-anchor" href="#event-listeners"><span>Event Listeners</span></a></h2>`,25)),s("p",null,[n[4]||(n[4]=s("a",{href:"https://symfony.com/doc/current/EasyAdminBundle/events.html",target:"_blank",rel:"noopener noreferrer"},"La documentation sur les event listeners de EasyAdminBundle",-1)),a(o,{to:"/symfony/27-event-listeners.html"},{default:e(()=>n[3]||(n[3]=[t("La partie du cours sur les event listeners")])),_:1})]),n[9]||(n[9]=l('<p>Plusieurs √©v√©nements existent et permettent de compl√©ter le fonctionnement d&#39;EasyAdmin. Ils permettent de d√©clencher d&#39;autres actions avant ou apr√®s certaines actions (enregistrement d&#39;une entit√©, suppression d&#39;une entit√©, etc.) pour compl√©ter le fonctionnement &quot;simple&quot; du CRUD. C&#39;est pas exemple tr√®s utile pour hasher le mot de passe d&#39;un utilisateur avant de l&#39;enregistrer en <abbr title="Base de Donn√©es">BdD</abbr>.</p><p>Les deux √©v√©nements que j&#39;utilise le plus :</p><ul><li><code>BeforeEntityPersistedEvent</code> est d√©clench√© lorsqu&#39;une entit√© est cr√©√©e et permet d&#39;ajouter du fonctionnel <strong>avant</strong> qu&#39;elle ne soit enregistr√©e en <abbr title="Base de Donn√©es">BdD</abbr></li><li><code>BeforeEntityUpdatedEvent</code> est d√©clench√© lorsqu&#39;une entit√© est mise √† jour et permet d&#39;ajouter du fonctionnel <strong>avant</strong> qu&#39;elle ne soit enregistr√©e en <abbr title="Base de Donn√©es">BdD</abbr></li></ul>',3))])}const f=c(d,[["render",k],["__file","41-easy-admin.html.vue"]]),g=JSON.parse('{"path":"/symfony/41-easy-admin.html","title":"Easy Admin Bundle","lang":"fr-FR","frontmatter":{"date":"2021-12-01T00:00:00.000Z"},"headers":[{"level":2,"title":"Installation et mise en place","slug":"installation-et-mise-en-place","link":"#installation-et-mise-en-place","children":[]},{"level":2,"title":"Personnalisation des CRUDs","slug":"personnalisation-des-cruds","link":"#personnalisation-des-cruds","children":[]},{"level":2,"title":"Event Listeners","slug":"event-listeners","link":"#event-listeners","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/41-easy-admin.md"}');export{f as comp,g as data};
