import{aj as l,ak as a,am as r,an as t,ao as s,al as o,ap as u,aq as c,ar as i}from"./app-BkblVdII.js";const d="/cours/assets/rest_example-PghfokWY.png",p={},m={class:"table-of-contents"};function f(h,e){const n=u("router-link");return c(),a("div",null,[e[12]||(e[12]=r("h1",{id:"webservices-rest",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#webservices-rest"},[r("span",null,"Webservices REST")])],-1)),r("nav",m,[r("ul",null,[r("li",null,[t(n,{to:"#bon-a-savoir-avant-de-commencer"},{default:s(()=>e[0]||(e[0]=[i("Bon à savoir avant de commencer")])),_:1})]),r("li",null,[t(n,{to:"#definition-de-rest"},{default:s(()=>e[1]||(e[1]=[i("Définition de REST")])),_:1}),r("ul",null,[r("li",null,[t(n,{to:"#client-serveur"},{default:s(()=>e[2]||(e[2]=[i("Client-serveur")])),_:1})]),r("li",null,[t(n,{to:"#sans-etat"},{default:s(()=>e[3]||(e[3]=[i("Sans état")])),_:1})]),r("li",null,[t(n,{to:"#en-couche"},{default:s(()=>e[4]||(e[4]=[i("En couche")])),_:1})]),r("li",null,[t(n,{to:"#utilisation-du-cache"},{default:s(()=>e[5]||(e[5]=[i("Utilisation du cache")])),_:1})]),r("li",null,[t(n,{to:"#interface-uniforme"},{default:s(()=>e[6]||(e[6]=[i("Interface uniforme")])),_:1})])])]),r("li",null,[t(n,{to:"#creer-un-client-rest"},{default:s(()=>e[7]||(e[7]=[i("Créer un client REST")])),_:1}),r("ul",null,[r("li",null,[t(n,{to:"#le-cas-ajax"},{default:s(()=>e[8]||(e[8]=[i("Le cas AJAX")])),_:1})])])]),r("li",null,[t(n,{to:"#un-service-rest"},{default:s(()=>e[9]||(e[9]=[i("Un service REST")])),_:1}),r("ul",null,[r("li",null,[t(n,{to:"#format-des-urls-avec-rest"},{default:s(()=>e[10]||(e[10]=[i("Format des urls avec REST")])),_:1})]),r("li",null,[t(n,{to:"#aller-un-peu-plus-loin"},{default:s(()=>e[11]||(e[11]=[i("Aller un peu plus loin")])),_:1})])])])])]),e[13]||(e[13]=o('<h2 id="bon-a-savoir-avant-de-commencer" tabindex="-1"><a class="header-anchor" href="#bon-a-savoir-avant-de-commencer"><span>Bon à savoir avant de commencer</span></a></h2><ul><li>Un <a href="https://openclassrooms.com/fr/courses/6573181-adoptez-les-api-rest-pour-vos-projets-web" target="_blank" rel="noopener noreferrer">très bon tuto sur OpenClassroom</a></li><li>Une <a href="https://code-garage.fr/blog/qu-est-ce-qu-une-api-rest/" target="_blank" rel="noopener noreferrer">autre très bonne explication de ce qu&#39;est une API REST</a></li><li>XML</li><li>JSON</li><li>HTTP, les <a href="https://restfulapi.net/http-status-codes/" target="_blank" rel="noopener noreferrer">&quot;status codes&quot;</a></li></ul><h2 id="definition-de-rest" tabindex="-1"><a class="header-anchor" href="#definition-de-rest"><span>Définition de REST</span></a></h2><p>On parle d&#39;un système REST (en général, une API REST) pour désigner un système servant à cadrer les échanges entre plusieurs programmes / applications. En général une API REST sert de point central pour les données. D&#39;autres programmes lui envoient des données ou les récupèrent et les autres programmes n&#39;ont pas à se soucier du fonctionnement interne de l&#39;API.</p><p>Toute l&#39;organisation d&#39;une API REST est centrée sur les données. C&#39;est l&#39;une de ses principales caractéristiques :</p><ul><li>on récupère des listes d&#39;un type de données</li><li>ou on ajoute / modifie / crée une donnée d&#39;un type</li></ul><p>Par exemple, une API de gestion de films fournira une route (url) pour créer / ajouter / modifier un film, une autre pour lister les films. Si l&#39;on souhaite modifier les acteurs liés à un film, cela se passera sur une autre route.</p><p>Pour créer un système REST, il y a <strong>6 grands principes</strong> à respecter, définis ci-après.</p><h3 id="client-serveur" tabindex="-1"><a class="header-anchor" href="#client-serveur"><span>Client-serveur</span></a></h3><p>Un ou des clients vont <strong>consommer</strong> les données. Le système REST est un serveur (et peut en cacher plusieurs autres) pour <strong>stocker</strong> les données et <strong>traiter</strong> les requêtes.</p><h3 id="sans-etat" tabindex="-1"><a class="header-anchor" href="#sans-etat"><span>Sans état</span></a></h3><p>Le serveur ne gère pas la session, le client doit envoyer les informations de connexion à <strong>chaque requête</strong> (on parle souvent de token de connexion, de clé API ou de jeton de connexion).</p><h3 id="en-couche" tabindex="-1"><a class="header-anchor" href="#en-couche"><span>En couche</span></a></h3><p>Le client ne peut savoir s&#39;il est connecté au serveur final ou à un intermédiaire (pour répartir la charge, par exemple). Un système REST peut être composé d&#39;une multitude de serveurs, mais l&#39;architecture doit rester invisible aux clients.</p><h3 id="utilisation-du-cache" tabindex="-1"><a class="header-anchor" href="#utilisation-du-cache"><span>Utilisation du cache</span></a></h3><p>Clients comme serveurs peuvent mettre en cache les réponses, afin de réduire la quantité de requêtes et améliorer la sécurité (moins d&#39;informations qui transitent, par exemple).</p><h3 id="interface-uniforme" tabindex="-1"><a class="header-anchor" href="#interface-uniforme"><span>Interface uniforme</span></a></h3><p>Une interface uniforme est définie par :</p><ul><li>L&#39;identification claire des resources dans les requêtes (on ne récupère/modifie qu&#39;un objet par requête)</li><li>Une documentation complète pour chaque url (la resource envoyée ne représente pas forcément directement la donnée stockée)</li><li>Messages auto-descriptifs (l&#39;information fournie donne toutes les informations nécessaires à l&#39;interprétation de la donnée)</li><li>Des liens pour accéder aux autres représentations et découvrir les autres urls</li></ul><h2 id="creer-un-client-rest" tabindex="-1"><a class="header-anchor" href="#creer-un-client-rest"><span>Créer un client REST</span></a></h2><p>Pour créer un client REST, il faut :</p><ul><li>Pouvoir utiliser les différentes méthodes (verbes) HTTP (GET, POST, PUT, PATCH, DELETE)</li><li>Gérer les erreurs et les changements de l&#39;API</li><li>Utilisation de cUrl ou équivalent avec une librairie comme Guzzle, <a href="https://symfony.com/doc/current/http_client.html" target="_blank" rel="noopener noreferrer">Symfony HTTP Client</a> ou équivalent</li></ul><h3 id="le-cas-ajax" tabindex="-1"><a class="header-anchor" href="#le-cas-ajax"><span>Le cas AJAX</span></a></h3><p>Il est aisé de créer un client REST avec javascript, en utilisant AJAX (<code>fetch()</code> par exemple), pour récupérer des données JSON. En général, en AJAX, on peut aisément récupérer des données <em>via</em> n&#39;importe quel verbe (GET, POST, PUT, etc.) et traiter la réponse dans la foulée.</p><h2 id="un-service-rest" tabindex="-1"><a class="header-anchor" href="#un-service-rest"><span>Un service REST</span></a></h2><p>Pour créer un serveur (ou service) REST, il faut qu&#39;il :</p><ul><li>accepte des requêtes HTTP (et donc un ensemble d&#39;urls à définir), suivant un format standardisé</li><li>Une documentation (le plus <a href="https://symfony.com/doc/current/bundles/NelmioApiDocBundle/index.html" target="_blank" rel="noopener noreferrer">souvent générée automatiquement</a> grâce aux annotations)</li><li>Faire les traitements et envoyer une réponse cohérente (renvoyer l&#39;objet inséré, s&#39;assurer d&#39;avoir des liens internes cohérents, etc.)</li><li>Sécuriser les transactions (gérer l&#39;identification et les accès)</li></ul><h3 id="format-des-urls-avec-rest" tabindex="-1"><a class="header-anchor" href="#format-des-urls-avec-rest"><span>Format des urls avec REST</span></a></h3><p>Pour créer une API, on va utiliser un ensemble réduit d&#39;urls et la plupart des verbes HTTP (comme GET, POST, PUT, PATCH, UPDATE, etc.).</p><p><img src="'+d+'" alt="Exemple d&#39;un ensemble de routes REST, avec ApiPlatform (Swagger UI)"></p><p>Dans l&#39;image ci-dessus, remarquez que l&#39;on utilise 2 urls différentes, mais 5 verbes HTTP différents pour obtenir 6 routes différentes, avec des fonctionnements différents :</p><ul><li>GET <code>/api/recipes/</code> retourne une liste d&#39;objets <code>recipe</code></li><li>POST <code>/api/recipes/</code> permet de créer un nouvel objet <code>recipe</code></li></ul><p>Les urls prenant un identifiant permettent d&#39;agir sur un objet <code>recipe</code> précis :</p><ul><li>GET <code>/api/recipes/{id}</code> retourne un objet <code>recipe</code></li><li>PUT <code>/api/recipes/{id}</code> remplace un objet <code>recipe</code></li><li>DELETE <code>/api/recipes/{id}</code> supprime un objet <code>recipe</code></li><li>PATCH <code>/api/recipes/{id}</code> pour mettre à jour un objet <code>recipe</code></li></ul><h3 id="aller-un-peu-plus-loin" tabindex="-1"><a class="header-anchor" href="#aller-un-peu-plus-loin"><span>Aller un peu plus loin</span></a></h3><ul><li>Des outils pour faciliter la création d&#39;API REST (<a href="https://openclassrooms.com/fr/courses/4087036-construisez-une-api-rest-avec-symfony" target="_blank" rel="noopener noreferrer">des tutos avec Symfony</a>, des <a href="https://api-platform.com/" target="_blank" rel="noopener noreferrer">outils surpuissants</a> ou <a href="https://github.com/FriendsOfSymfony/FOSRestBundle" target="_blank" rel="noopener noreferrer">faciles à intégrer dans Symfony</a>)</li><li>Des outils de test : <em>via</em> le navigateur, <a href="https://www.postman.com/downloads/" target="_blank" rel="noopener noreferrer">Postman</a> ou PhpUnit (entre autre)</li></ul>',36))])}const g=l(p,[["render",f],["__file","50-rest.html.vue"]]),T=JSON.parse('{"path":"/php/50-rest.html","title":"Webservices REST","lang":"fr-FR","frontmatter":{"date":"2021-02-05T00:00:00.000Z"},"headers":[{"level":2,"title":"Bon à savoir avant de commencer","slug":"bon-a-savoir-avant-de-commencer","link":"#bon-a-savoir-avant-de-commencer","children":[]},{"level":2,"title":"Définition de REST","slug":"definition-de-rest","link":"#definition-de-rest","children":[{"level":3,"title":"Client-serveur","slug":"client-serveur","link":"#client-serveur","children":[]},{"level":3,"title":"Sans état","slug":"sans-etat","link":"#sans-etat","children":[]},{"level":3,"title":"En couche","slug":"en-couche","link":"#en-couche","children":[]},{"level":3,"title":"Utilisation du cache","slug":"utilisation-du-cache","link":"#utilisation-du-cache","children":[]},{"level":3,"title":"Interface uniforme","slug":"interface-uniforme","link":"#interface-uniforme","children":[]}]},{"level":2,"title":"Créer un client REST","slug":"creer-un-client-rest","link":"#creer-un-client-rest","children":[{"level":3,"title":"Le cas AJAX","slug":"le-cas-ajax","link":"#le-cas-ajax","children":[]}]},{"level":2,"title":"Un service REST","slug":"un-service-rest","link":"#un-service-rest","children":[{"level":3,"title":"Format des urls avec REST","slug":"format-des-urls-avec-rest","link":"#format-des-urls-avec-rest","children":[]},{"level":3,"title":"Aller un peu plus loin","slug":"aller-un-peu-plus-loin","link":"#aller-un-peu-plus-loin","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/50-rest.md"}');export{g as comp,T as data};
