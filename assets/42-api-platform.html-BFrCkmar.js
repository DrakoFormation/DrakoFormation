import{aj as c,ak as r,am as n,an as e,ao as t,ar as a,al as l,ap as o,aq as u}from"./app-BkblVdII.js";const d={},m={class:"table-of-contents"};function k(v,s){const p=o("router-link"),i=o("RouteLink");return u(),r("div",null,[s[9]||(s[9]=n("h1",{id:"api-platform",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#api-platform"},[n("span",null,"API Platform")])],-1)),n("nav",m,[n("ul",null,[n("li",null,[e(p,{to:"#en-resume"},{default:t(()=>s[0]||(s[0]=[a("En résumé")])),_:1})]),n("li",null,[e(p,{to:"#la-serialisation"},{default:t(()=>s[1]||(s[1]=[a("La sérialisation")])),_:1})]),n("li",null,[e(p,{to:"#mettre-en-place-une-api-avec-api-platform"},{default:t(()=>s[2]||(s[2]=[a("Mettre en place une API avec API Platform")])),_:1})]),n("li",null,[e(p,{to:"#aller-plus-loin"},{default:t(()=>s[3]||(s[3]=[a("Aller plus loin")])),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#personnaliser-les-proprietes-renvoyees"},{default:t(()=>s[4]||(s[4]=[a("Personnaliser les propriétés renvoyées")])),_:1})]),n("li",null,[e(p,{to:"#validation-des-donnees"},{default:t(()=>s[5]||(s[5]=[a("Validation des données")])),_:1})])])])])]),s[10]||(s[10]=n("p",null,[a("Cette partie concerne des "),n("strong",null,"bases"),a(" d'"),n("a",{href:"https://api-platform.com/",target:"_blank",rel:"noopener noreferrer"},"API Platform"),a(", nous n'allons pas évoquer de fonctionnalités avancées et resterons sur les notions de base, pour créer une API simple rapidement.")],-1)),s[11]||(s[11]=n("p",null,[n("a",{href:"https://api-platform.com/",target:"_blank",rel:"noopener noreferrer"},"La documentation officielle")],-1)),s[12]||(s[12]=n("p",null,[n("a",{href:"https://grafikart.fr/formations/api-plaform",target:"_blank",rel:"noopener noreferrer"},"Un tutoriel très complet sur API Platform (grandement recommandé)"),a(" sur lequel je me suis basé pour l'écriture de ce cours.")],-1)),s[13]||(s[13]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/605225f8ca7242f9930b0a626e74b603",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[14]||(s[14]=l('<h2 id="en-resume" tabindex="-1"><a class="header-anchor" href="#en-resume"><span>En résumé</span></a></h2><ul><li>Pour créer une API rapidement, on utilise API Platform (mais ça n&#39;est pas le seul moyen disponible)</li><li>On personnalise notre API <em>via</em> de la configuration (principalement annotations / attributs)</li><li>Une documentation est directement générée (peut être utilisée dans plusieurs formats : Swagger ou ReDoc)</li><li>On peut personnaliser les propriétés disponibles dans l&#39;API avec des annotations / attributs dans nos entités (on associe des groupes de sérialisation)</li><li>On peut valider les données entrées à l&#39;aide d&#39;annotations / d&#39;attributs</li></ul><h2 id="la-serialisation" tabindex="-1"><a class="header-anchor" href="#la-serialisation"><span>La sérialisation</span></a></h2>',3)),s[15]||(s[15]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/3d99a532f7134703b175c8eff3830d51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[16]||(s[16]=l('<p>Le processus de sérialisation est lié à Symfony et API Platform l&#39;exploite pour ses propres besoins. Commençons par quelques définitions :</p><ul><li>La sérialisation est la conversion d&#39;un objet PHP en un autre format, en général un format de communication (JSON, Xml, etc)</li><li>La dé-sérialisation est l&#39;opération inverse : on récupère une donnée JSON (ou équivalent) et on la convertit en objet(s) PHP</li></ul><p>Ces opérations de (dé)sérialisation sont composées d&#39;opérations intermédiaires :</p><ul><li>La normalisation est l&#39;opération de conversion d&#39;un objet PHP en tableau</li><li>La dé-normalisation est l&#39;opération de conversion d&#39;un tableau en objet PHP</li><li>L&#39;encodage est l&#39;opération de conversion d&#39;un tableau en un format de communication (JSON, Xml, etc)</li><li>Le décodage est l&#39;opération de conversion depuis un format de communication (JSON, Xml, etc) en un tableau PHP</li></ul><p>Schéma récapitulatif (venu de la <a href="https://api-platform.com/docs/core/serialization/" target="_blank" rel="noopener noreferrer">documentation d&#39;API Platform sur la sérialisation</a>) : <img src="https://api-platform.com/static/f5bf57af8c8a3275d8ba1c9ced6e890d/39a20/SerializerWorkflow.png" alt=""></p><h2 id="mettre-en-place-une-api-avec-api-platform" tabindex="-1"><a class="header-anchor" href="#mettre-en-place-une-api-avec-api-platform"><span>Mettre en place une API avec API Platform</span></a></h2>',6)),s[17]||(s[17]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/27c0fb72fb3643acb006410a35e0e902",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[18]||(s[18]=l(`<p>Nous partons du principe que nous allons initialiser une API dans une application Symfony existante (créée avec <code>symfony new --webapp</code> par exemple).</p><p>Dans un tel projet, il faut installer API Platform : <code>composer require api</code></p><p>Une fois cela fait, il faut préciser à API Platform quelles entités nous voulons utiliser dans notre API. Pour cela, il suffit d&#39;ajouter une annotation/un attribut <code>APIResource</code> dans votre entité :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token comment">// api/src/Entity/Test.php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Entity</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">APIResource</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$property</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Plus qu&#39;à vider le cache (<code>php bin/console cache:clear</code>) et aller sur la route <code>/api/doc</code> et il est possible de voir les routes fraîchement créées et les tester.</p><p>Répéter l&#39;opération sur différentes entités et une bonne base d&#39;API, suffisante pour les cas simples, est disponible.</p><h2 id="aller-plus-loin" tabindex="-1"><a class="header-anchor" href="#aller-plus-loin"><span>Aller plus loin</span></a></h2><p>Avec API Platform, il est aisé de personnaliser les opérations et les éléments à faire apparaitre.</p><h3 id="personnaliser-les-proprietes-renvoyees" tabindex="-1"><a class="header-anchor" href="#personnaliser-les-proprietes-renvoyees"><span>Personnaliser les propriétés renvoyées</span></a></h3><p>Grâce à des annotations / attributs, il est possible de préciser quelles propriétés (dé)sérialiser. On peut se greffer au système de normalisation ou de dé-normalisation de Symfony, grâce à des annotations et aux paramètres de l&#39;annotation <code>ApiResource</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token comment">// api/src/Entity/Test.php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Groups</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">ApiResource</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token attribute-class-name class-name">normalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;read&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token attribute-class-name class-name">denormalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Groups</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;read&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;write&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$property</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Groups</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;read&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$property2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans l&#39;exemple ci-dessus, la propriété <code>property</code> sera utilisable à la fois dans le contexte de normalisation (lecture avec <code>GET</code> d&#39;un élément ou d&#39;une collection) ou de dé-normalisation (écriture avec <code>PUT</code>, <code>POST</code> ou <code>PATCH</code>). La propriété <code>property2</code> ne sera utilisable <strong>que</strong> lors d&#39;une normalisation (lecture avec <code>GET</code> d&#39;un élément ou d&#39;une collection).</p><p>Vous pouvez également aller plus loin, en précisant les groupes de (dé)normalisation pour chaque opération (opération sur les items ou les collections, directement sur une opération <code>GET</code> d&#39;un item ou d&#39;une collection, etc.) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token comment">// api/src/Entity/Test.php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>Get</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>GetCollection</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Metadata<span class="token punctuation">\\</span>Put</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Groups</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">ApiResource</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token attribute-class-name class-name">normalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;read&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token attribute-class-name class-name">denormalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;write&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token attribute-class-name class-name">operations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token attribute-class-name class-name">new</span> <span class="token attribute-class-name class-name">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token attribute-class-name class-name">new</span> <span class="token attribute-class-name class-name">Put</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">denormalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token attribute-class-name class-name">new</span> <span class="token attribute-class-name class-name">GetCollection</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">normalizationContext</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;read:collection&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Groups</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;read&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;write&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;put&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$property</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Groups</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;read&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;read:collection&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$property2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dans cet exemple, on définit quelles opérations sont disponibles et quels groupes sont appelés pour (dé)normaliser. Seules les opérations <code>GET</code> et <code>PUT</code> (routes <code>GET /api/tests/{id}</code> et <code>PUT /api/tests/{id}</code>) pour les items sont disponibles et l&#39;opération <code>GET</code> (route <code>GET /api/tests</code>) sur les collections.</p><p>⚠️ Noter que :</p><ul><li>Les opérations sur les items et les collections sont séparées et peuvent être personnalisées / désactivées</li><li>Les groupes peuvent permettre de personnaliser finement les éléments utilisables dans les différentes routes</li><li>Il est important de définir un nommage cohérent pour les groupes, pour éviter des soucis (⚠️ dans l&#39;exemple ci-dessus, le nommage des groupes est à re-penser !)</li></ul><p>Une idée de nommage (venue des <a href="https://grafikart.fr/tutoriels/api-platform-serialisation-1904" target="_blank" rel="noopener noreferrer">vidéos de Grafikart</a>) serait de nommer les groupes sous la forme <code>opération:Objet:type</code> où :</p><ul><li><code>opération</code> est le nom de l&#39;opération liée au groupe : <code>read</code>, <code>write</code>, <code>get</code>, <code>put</code>, etc.</li><li><code>Objet</code> est le nom court de la classe (dans mon exemple <code>Test</code>)</li><li><code>type</code> est le type d&#39;opération : <code>item</code> ou <code>collection</code></li></ul><h3 id="validation-des-donnees" tabindex="-1"><a class="header-anchor" href="#validation-des-donnees"><span>Validation des données</span></a></h3><p>Lors de l&#39;insertion ou la modification de nos données, il est courant de confirmer leur validité. Le faire dans une API ne change pas cette règle et plusieurs outils sont à notre disposition pour cela.</p>`,21)),n("p",null,[s[7]||(s[7]=a("Nous pouvons déjà ")),e(i,{to:"/symfony/25-formulaires.html#validation"},{default:t(()=>s[6]||(s[6]=[a("utiliser la validation de Symfony")])),_:1}),s[8]||(s[8]=a(" sur les différentes propriétés. API Platform pourra alors utiliser cette validation pour afficher les messages d'erreur, le cas échéant."))]),s[19]||(s[19]=n("p",null,[a("Cependant, il est possible d'aller plus loin et de "),n("a",{href:"https://api-platform.com/docs/core/validation/#using-validation-groups",target:"_blank",rel:"noopener noreferrer"},"définir des groupes de validation"),a(" pour l'api, ou même "),n("a",{href:"https://api-platform.com/docs/core/validation/#using-validation-groups-on-operations",target:"_blank",rel:"noopener noreferrer"},"définir des groupes de validation par opération"),a(" !")],-1)),s[20]||(s[20]=n("p",null,"Comme nous resterons à des bases dans ce cours, je vous laisserai voir les documentations ci-dessus pour des exemples plus détaillés.",-1))])}const g=c(d,[["render",k],["__file","42-api-platform.html.vue"]]),f=JSON.parse('{"path":"/symfony/42-api-platform.html","title":"API Platform","lang":"fr-FR","frontmatter":{"date":"2021-05-21T00:00:00.000Z"},"headers":[{"level":2,"title":"En résumé","slug":"en-resume","link":"#en-resume","children":[]},{"level":2,"title":"La sérialisation","slug":"la-serialisation","link":"#la-serialisation","children":[]},{"level":2,"title":"Mettre en place une API avec API Platform","slug":"mettre-en-place-une-api-avec-api-platform","link":"#mettre-en-place-une-api-avec-api-platform","children":[]},{"level":2,"title":"Aller plus loin","slug":"aller-plus-loin","link":"#aller-plus-loin","children":[{"level":3,"title":"Personnaliser les propriétés renvoyées","slug":"personnaliser-les-proprietes-renvoyees","link":"#personnaliser-les-proprietes-renvoyees","children":[]},{"level":3,"title":"Validation des données","slug":"validation-des-donnees","link":"#validation-des-donnees","children":[]}]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/42-api-platform.md"}');export{g as comp,f as data};
