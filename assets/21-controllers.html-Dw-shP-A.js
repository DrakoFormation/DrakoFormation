import{aj as o,ak as p,am as s,an as a,ao as t,al as i,ap as c,aq as r,ar as l}from"./app-BkblVdII.js";const u={},d={class:"table-of-contents"};function m(k,n){const e=c("router-link");return r(),p("div",null,[n[6]||(n[6]=s("h1",{id:"les-controllers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#les-controllers"},[s("span",null,"Les controllers")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[a(e,{to:"#pour-resumer"},{default:t(()=>n[0]||(n[0]=[l("Pour résumer")])),_:1})]),s("li",null,[a(e,{to:"#definition-et-premier-exemple"},{default:t(()=>n[1]||(n[1]=[l("Définition et premier exemple")])),_:1})]),s("li",null,[a(e,{to:"#utiliser-les-routes"},{default:t(()=>n[2]||(n[2]=[l("Utiliser les routes")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#rendre-une-vue-twig"},{default:t(()=>n[3]||(n[3]=[l("Rendre une vue Twig")])),_:1})])])]),s("li",null,[a(e,{to:"#de-buguer"},{default:t(()=>n[4]||(n[4]=[l("Dé-buguer")])),_:1})]),s("li",null,[a(e,{to:"#exercices"},{default:t(()=>n[5]||(n[5]=[l("Exercices")])),_:1})])])]),n[7]||(n[7]=s("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[s("iframe",{src:"https://www.loom.com/embed/12a92f13e0354bfcbfc291f50222ca51",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),n[8]||(n[8]=i(`<h2 id="pour-resumer" tabindex="-1"><a class="header-anchor" href="#pour-resumer"><span>Pour résumer</span></a></h2><ul><li>Le controller est un service, chargé de transformer une requête HTTP (<code>Request</code>) en une réponse HTTP (<code>Response</code>) à renvoyer à l&#39;utilisateur</li><li>Il fait appel à différents services (<code>Twig</code>, <code>Doctrine</code>, etc.) pour cela</li><li>Chacune de ses méthodes (appelées actions), est liée à un chemin grâce à une route (voir chapitre précédent)</li><li>On peut injecter des services (<code>Request</code>, <code>Repository</code>, <code>EntityManagerInterface</code>, etc.) soit dans son contructeur, soit en paramètre des actions</li><li><code>php bin/console make:controller</code> permet de générer un controller, avec une action et une vue associée (rendue avec Twig)</li><li>Utiliser <code>dump()</code> et <code>dd()</code> (dump and die) pour afficher les informations sur vos variables</li></ul><h2 id="definition-et-premier-exemple" tabindex="-1"><a class="header-anchor" href="#definition-et-premier-exemple"><span>Définition et premier exemple</span></a></h2><p>On appelle Controller (ou contrôleur en français) une fonction traitant les données de la requête HTTP et renvoyant une réponse au navigateur (la plupart du temps, une page web). Contrairement à cette définition (globale à PHP et d&#39;autres langages), avec Symfony, on parle de controller pour désigner la classe contenant des actions (au sens strict, ce sont ces actions que l&#39;on devrait appeler controllers).</p><p>Dans la pratique, une classe Controller va contenir plusieurs méthodes (actions), qui vont correspondre à des routes (urls, comme nous l&#39;avons vu plus haut). Ces actions vont recevoir toutes les informations de la requête (objet <code>Request</code> de Symfony) et envoyer une réponse (objet <code>Response</code> de Symfony, ou l&#39;un de ses enfants).</p><p>Commande utile pour générer un Controller : <code>php bin/console make:controller</code></p><p>Décomposons et complétons notre exemple précédent (⚠️ on utilise généralement Twig pour générer du HTML, voir plus bas) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// src/Controller/BlogController.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">host</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog.example.com&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">requirements</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;_locale&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;en|es|fr&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;blog_&quot;</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">BlogController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span> <span class="token comment">// Notre controller hérite du AbstractController de Symfony, ce qui nous permet d&#39;avoir plusieurs méthodes très utiles. Ca n&#39;est toutefois pas obligatoire, nous pourrions tout à fait définir des controllers qui n&#39;étendent pas AbstractController.</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/{_locale}&quot;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;list&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Disons que nous avons une liste d&#39;articles de blog</span></span>
<span class="line">        <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token comment">// Des articles</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// On prépare le html à afficher à l&#39;utilisateur</span></span>
<span class="line">        <span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&lt;html&gt;&lt;body&gt;Articles : &#39;</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token variable">$posts</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// On prépare un objet Response qui va non seulement contenir notre html, mais également toutes les informations HTTP nécessaires (headers par exemple)</span></span>
<span class="line">        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// On renvoie la réponse destinée au navigateur</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="utiliser-les-routes" tabindex="-1"><a class="header-anchor" href="#utiliser-les-routes"><span>Utiliser les routes</span></a></h2><p>Dans les controllers, nous n&#39;utilisons les routes que par leur nom (ce qui évite également d&#39;avoir à se rappeler des informations autres, comme l&#39;URi correspondante). Pour récupérer l&#39;url vers une route, le <code>AbstractController</code> nous fournit la méthode <code>generateUrl()</code> :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$englishUrl</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">generateUrl</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog_list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;_locale&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;en&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$frenchUrl</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">generateUrl</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog_list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;_locale&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;fr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Il existe également plusieurs méthodes pour rediriger l&#39;utilisateur vers une autre page (on renvoie alors l&#39;un des enfants de l&#39;objet <code>Response</code> : <code>RedirectResponse</code>) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>RedirectResponse</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">RedirectResponse</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Redirige vers la route &quot;homepage&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirectToRoute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;homepage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// redirectToRoute est un raccourci pour :</span></span>
<span class="line">    <span class="token comment">// return new RedirectResponse($this-&gt;generateUrl(&#39;homepage&#39;));</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Redirige de manière permanente vers la route &quot;homepage&quot; (Voir le statut HTTP 301)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirectToRoute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;homepage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Redirige vers une route avec un paramètre</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirectToRoute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog_index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;page&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Redirige vers une route avec tous les paramètres $_GET présents</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirectToRoute</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog_index&#39;</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token property">query</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Redirige vers une page externe au site</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://symfony.com/doc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rendre-une-vue-twig" tabindex="-1"><a class="header-anchor" href="#rendre-une-vue-twig"><span>Rendre une vue Twig</span></a></h3><p>La classe <code>AbstractController</code> fournit une méthode <code>render()</code> qui nous permet de générer une <code>Response</code> à partir d&#39;un fichier Twig (et donc de compiler ce dernier).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Ici, on va récupérer notre template dans \`templates/blog/index.html.twig\`</span></span>
<span class="line"><span class="token comment">// Il est compilé (transformé, à l&#39;aide de nos paramètres, en HTML) et renvoyé dans un objet Response</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;blog/index.html.twig&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;page&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour <a href="">plus d&#39;informations sur le fonctionnement de Twig, voir la partie dédiée</a>.</p><h2 id="de-buguer" tabindex="-1"><a class="header-anchor" href="#de-buguer"><span>Dé-buguer</span></a></h2><p>Avec Symfony, vous pouvez dé-buguer vos programmes de plusieurs manières :</p><ul><li>Utiliser <code>exit</code>/<code>die</code> et <code>var_dump</code> comme nous l&#39;avons fait jusqu&#39;à présent (déconseillé si xDebug n&#39;est pas installé et utilisable par la ligne de commande Symfony)</li><li>Utiliser <code>dump()</code> et <code>dd()</code> (dump and die) pour afficher les informations sur vos variables</li></ul><p>Ces fonctions <code>dump()</code> et <code>dd()</code> sont disponibles dans n&#39;importe quel fichier PHP de votre projet. La fonction <code>dump</code> ne va pas interrompre l&#39;affichage ni le modifier, mais afficher un dump des variables demandées dans le <code>Profiler</code> de Symfony (la barre grise en bas de l&#39;écran, quand vous chargez une page)</p><h2 id="exercices" tabindex="-1"><a class="header-anchor" href="#exercices"><span>Exercices</span></a></h2><p>Dans un premier temps, nous allons définir nos différents contrôleurs et les routes associées. Même si ça n&#39;est pas une manière de fonctionner optimale dans un projet, nous allons ainsi pouvoir pratiquer les contrôleurs et les routes.</p><p>Voici une liste des pages que nous allons créer :</p><ul><li>Une page d&#39;accueil <ul><li>chemin <code>/</code></li></ul></li><li>Une page listant les articles <ul><li>chemin <code>/articles</code></li></ul></li><li>Une page pour afficher un article <ul><li>chemin <code>/articles/identifiantDeLarticle</code> où <code>identifiantDeLarticle</code> doit être un nombre</li><li>dans le corps de l&#39;action : <ul><li>Si <code>identifiantDeLarticle</code> est supérieur à <code>42</code>, rediriger vers la liste des articles</li></ul></li></ul></li><li>Une page pour créer un article <ul><li>chemin <code>/articles/nouveau</code></li></ul></li><li>Une page pour modifier un article <ul><li>chemin <code>/articles/identifiantDeLarticle/modifier</code> où <code>identifiantDeLarticle</code> doit être un nombre</li><li>dans le corps de l&#39;action : <ul><li>Si <code>identifiantDeLarticle</code> est inférieur ou égale à <code>0</code>, rediriger vers la création d&#39;un article</li></ul></li></ul></li></ul>`,25))])}const g=o(u,[["render",m],["__file","21-controllers.html.vue"]]),b=JSON.parse('{"path":"/symfony/21-controllers.html","title":"Les controllers","lang":"fr-FR","frontmatter":{"date":"2021-02-22T00:00:00.000Z"},"headers":[{"level":2,"title":"Pour résumer","slug":"pour-resumer","link":"#pour-resumer","children":[]},{"level":2,"title":"Définition et premier exemple","slug":"definition-et-premier-exemple","link":"#definition-et-premier-exemple","children":[]},{"level":2,"title":"Utiliser les routes","slug":"utiliser-les-routes","link":"#utiliser-les-routes","children":[{"level":3,"title":"Rendre une vue Twig","slug":"rendre-une-vue-twig","link":"#rendre-une-vue-twig","children":[]}]},{"level":2,"title":"Dé-buguer","slug":"de-buguer","link":"#de-buguer","children":[]},{"level":2,"title":"Exercices","slug":"exercices","link":"#exercices","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/21-controllers.md"}');export{g as comp,b as data};
