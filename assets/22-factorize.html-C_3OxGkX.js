import{aj as i,ak as o,am as n,an as e,ao as t,al as l,ap as c,aq as r,ar as p}from"./app-BkblVdII.js";const d={},u={class:"table-of-contents"};function m(k,s){const a=c("router-link");return r(),o("div",null,[s[6]||(s[6]=n("h1",{id:"factorisation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#factorisation"},[n("span",null,"Factorisation")])],-1)),n("nav",u,[n("ul",null,[n("li",null,[e(a,{to:"#classes-et-methodes-abstraites"},{default:t(()=>s[0]||(s[0]=[p("Classes et méthodes abstraites")])),_:1})]),n("li",null,[e(a,{to:"#interface"},{default:t(()=>s[1]||(s[1]=[p("Interface")])),_:1})]),n("li",null,[e(a,{to:"#instanceof"},{default:t(()=>s[2]||(s[2]=[p("instanceof")])),_:1})]),n("li",null,[e(a,{to:"#traits"},{default:t(()=>s[3]||(s[3]=[p("Traits")])),_:1})]),n("li",null,[e(a,{to:"#espaces-de-nom"},{default:t(()=>s[4]||(s[4]=[p("Espaces de nom")])),_:1})]),n("li",null,[e(a,{to:"#exceptions-et-try-catch"},{default:t(()=>s[5]||(s[5]=[p("Exceptions et try/catch")])),_:1})])])]),s[7]||(s[7]=n("h2",{id:"classes-et-methodes-abstraites",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#classes-et-methodes-abstraites"},[n("span",null,"Classes et méthodes abstraites")])],-1)),s[8]||(s[8]=n("p",null,[n("a",{href:"https://www.php.net/manual/fr/language.oop5.abstract.php",target:"_blank",rel:"noopener noreferrer"},"La documentation")],-1)),s[9]||(s[9]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/593e1d83b8774b1a9eac0f7392b68942",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[10]||(s[10]=l(`<p>Une classe abstraite sert à définir un ensemble de propriétés et de méthodes, qui seront utilisables dans les classes filles. Cette classe ne peut être instanciée (on ne peut pas faire un <code>new</code>).</p><p>L&#39;intérêt est de regrouper des propriétés et méthodes communes, sans permettre d&#39;instancier la classe. On ne peut par exemple pas faire un <code>new Animal</code> dans l&#39;exemple ci-dessous. Il faut instancier les classes filles à la place.</p><p>Une méthode abstraite peut être définie dans une classe abstraite. On écrit le mot-clé <code>abstract</code> suivi de la signature de la fonction. Son but est de forcer l&#39;implémentation de la méthode dans les classes filles (qui devront donner un corps à la méthode).</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Animal</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Pour étendre Animal, Dog DOIT avoir une méthode call() définie</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Waf&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>Interface</span></a></h2><p><a href="https://www.php.net/manual/fr/language.oop5.interfaces.php" target="_blank" rel="noopener noreferrer">La documentation</a></p>`,6)),s[11]||(s[11]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/103e62866bfc4beb871e10e79d16b00d",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[12]||(s[12]=l(`<p>Une interface permet de forcer l&#39;implémentation de certaines méthodes dans un objet. C&#39;est un contrat, permettant d&#39;assurer que certaines méthodes sont définies et implémentées dans une ou plusieurs classes.</p><p>⚠️ Une classe peut implémenter plusieurs interfaces.</p><p>⚠️ Une interface peut étendre une ou plusieurs interfaces.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Test</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span><span class="token punctuation">,</span> Test2<span class="token punctuation">,</span> Test3</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Pour implémenter Test, Foo DOIT avoir une méthode getTest() définie</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;ok&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h2>`,5)),s[13]||(s[13]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/bb19555096894924b4dd51d4e4af0564",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[14]||(s[14]=l(`<p>Le mot-clé <code>ìnstanceof</code> permet de vérifier si une variable est une instance d&#39;une classe, d&#39;une interface ou d&#39;une de ses filles.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// Bar.php</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Bar</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Foo.php</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token keyword">implements</span> <span class="token class-name">TestInterface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Baz.php</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Baz</span> <span class="token keyword">implements</span> <span class="token class-name">TestInterface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// index.php</span></span>
<span class="line"><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$baz</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$foo</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (true)</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bar</span> <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (true)</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$foo</span> <span class="token keyword">instanceof</span> <span class="token class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (false)</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$baz</span> <span class="token keyword">instanceof</span> <span class="token class-name">TestInterface</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (true)</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bar</span> <span class="token keyword">instanceof</span> <span class="token class-name">TestInterface</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (false)</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$foo</span> <span class="token keyword">instanceof</span> <span class="token class-name">TestInterface</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bool (true)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="traits" tabindex="-1"><a class="header-anchor" href="#traits"><span>Traits</span></a></h2><p><a href="https://www.php.net/manual/fr/language.oop5.traits.php" target="_blank" rel="noopener noreferrer">La documentation</a></p>`,4)),s[15]||(s[15]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/4b9cd3e24b604c799d6e7ec10d40de06",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[16]||(s[16]=l(`<p>Un trait fonctionne comme une classe et permet de regrouper des propriétés et des méthodes qui vont ête utilisées dans d&#39;autres classes. Un trait ne peut pas être instancié. Il s&#39;utilise avec <code>use</code> (oui, encore !) pour <strong>inclure</strong> le code du trait dans une classe.</p><p>Pensez l&#39;utilisation d&#39;un trait comme un copier-coller dans une classe : vous prenez tout le contenu du trait et le collez là où l&#39;appel est fait.</p><p>Un exemple de déclaration de trait, où on déclare une propriété et un getter :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">trait</span> <span class="token class-name-definition class-name">TestTrait</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$test</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un exemple d&#39;utilisation de ce trait dans une classe :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">TestTrait</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">TestTrait2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Ici, on peut utiliser $this-&gt;test et $this-&gt;getTest(),</span></span>
<span class="line">    <span class="token comment">// meme s&#39;ils sont privés ! </span></span>
<span class="line">    <span class="token comment">// Comme les éléments sont inclus, $this-&gt;test</span></span>
<span class="line">    <span class="token comment">// est déclaré privé dans la classe Test</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="espaces-de-nom" tabindex="-1"><a class="header-anchor" href="#espaces-de-nom"><span>Espaces de nom</span></a></h2>`,7)),s[17]||(s[17]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/3f3b43f9369b42cfba40d956e9aedaa4",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[18]||(s[18]=l(`<p>Le nommage d&#39;une classe (on parle de nom complet ou <abbr title="Fully Qualified Class Name">FQCN</abbr>) ne se limite pas au seul nom de la classe. Le <abbr title="Fully Qualified Class Name">FQCN</abbr> contient également l&#39;espace de nom de la classe, c’est-à-dire un éventuel préfixe et le dossier où la classe se trouve. Ce <abbr title="Fully Qualified Class Name">FQCN</abbr> se base sur un dossier (dans notre exemple <code>classes</code>).</p><p>Imaginons l&#39;organisation suivante :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">classes/</span>
<span class="line">| - Traits/</span>
<span class="line">    | - Truc/</span>
<span class="line">        | - TestTrait2.php</span>
<span class="line">    | - TestTrait.php</span>
<span class="line">| - Foo.php</span>
<span class="line">| - Bar.php</span>
<span class="line">| - Baz.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Si <code>classes</code> est le dossier servant de base à nos classes PHP, les différentes classes auront (ou non) un namespace (espace de nom). Par exemple, <code>Foo</code>, <code>Bar</code>, <code>Baz</code> n&#39;auront pas de namespace (ils sont à la racine de nos classes), alors que <code>TestTrait</code> et <code>TestTrait2</code> auront un namespace, pour indiquer le dossier où il se trouve :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">// classes/Traits/TestTrait.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Traits</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">trait</span> <span class="token class-name-definition class-name">TestTrait</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// classes/Traits/Truc/TestTrait2.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">Traits<span class="token punctuation">\\</span>Truc</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">trait</span> <span class="token class-name-definition class-name">TestTrait2</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ La séparation des dossiers s&#39;écrit avec un <code>\\</code> dans les namespaces</p><h2 id="exceptions-et-try-catch" tabindex="-1"><a class="header-anchor" href="#exceptions-et-try-catch"><span>Exceptions et try/catch</span></a></h2>`,7)),s[19]||(s[19]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/de998293df9c484ab5a2eac6faf885a0",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[20]||(s[20]=l(`<p>En Php, et dans de nombreux autres langages orientés objet, une mécanique permet de gérer les erreurs : les exceptions. Il faut les comprendre comme &quot;des cas non prévus&quot; du programme et, lorsqu&#39;une exception est levée (qu&#39;une erreur se produit), le programme peut réagir en fonction.</p><p>Cela permet par exemple d&#39;utiliser une connexion de secours si une première BdD ne répond pas, ou de réagir à n&#39;importe quelle erreur <strong>prévue</strong> dans notre programme. Php propose déjà un objet <code>Exception</code>, vous permettant d&#39;en créer une et vous pouvez la lever avec le mot-clé <code>throw</code>.</p><p>Une exception peut être attrapée, pour la traiter ou afficher le message d&#39;erreur, avec le bloc try/catch :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function-definition function">throwException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Pour lever une exception, on utilise le mot-clé throw</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Ceci est une exception&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On peut &quot;tester&quot; des instructions dans un bloc try</span></span>
<span class="line"><span class="token comment">// Si une exception est levée dans ces instructions,</span></span>
<span class="line"><span class="token comment">// on peut les attraper dans un ou des blocs catch</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">throwException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])}const b=i(d,[["render",m],["__file","22-factorize.html.vue"]]),f=JSON.parse('{"path":"/php/22-factorize.html","title":"Factorisation","lang":"fr-FR","frontmatter":{"date":"2023-01-11T00:00:00.000Z"},"headers":[{"level":2,"title":"Classes et méthodes abstraites","slug":"classes-et-methodes-abstraites","link":"#classes-et-methodes-abstraites","children":[]},{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":2,"title":"Traits","slug":"traits","link":"#traits","children":[]},{"level":2,"title":"Espaces de nom","slug":"espaces-de-nom","link":"#espaces-de-nom","children":[]},{"level":2,"title":"Exceptions et try/catch","slug":"exceptions-et-try-catch","link":"#exceptions-et-try-catch","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/22-factorize.md"}');export{b as comp,f as data};
