import{aj as c,ak as r,am as n,an as e,ao as p,ar as a,al as l,ap as i,aq as u}from"./app-BkblVdII.js";const d={},m={class:"table-of-contents"};function k(v,s){const t=i("router-link"),o=i("Mermaid");return u(),r("div",null,[s[2]||(s[2]=n("h1",{id:"heritage-et-objets",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#heritage-et-objets"},[n("span",null,"Héritage et objets")])],-1)),n("nav",m,[n("ul",null,[n("li",null,[e(t,{to:"#visibilite"},{default:p(()=>s[0]||(s[0]=[a("Visibilité")])),_:1})]),n("li",null,[e(t,{to:"#fqcn-et-get-class"},{default:p(()=>s[1]||(s[1]=[a("FQCN et get_class()")])),_:1})])])]),s[3]||(s[3]=n("p",null,"En vidéo :",-1)),s[4]||(s[4]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/aab9a13a3af34b149c43515814fe8820",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[5]||(s[5]=n("p",null,[a("On parle d'héritage quand une classe hérite d'une autre. C'est-à-dire qu'elle en récupère l'ensemble des propriétés et méthodes, à conditions qu'elles aient une visibilité "),n("code",null,"public"),a(" ou "),n("code",null,"protected"),a(".")],-1)),s[6]||(s[6]=n("p",null,"⚠️ En Php, une classe ne peut héritée que d'une classe.",-1)),s[7]||(s[7]=n("p",null,"Prenons le schéma suivant et voyons son implémentation en PHP :",-1)),e(o,{id:"mermaid-19",code:"eJxljU0OgjAUhPc9RTdNNYYLEDf+sDQh8QQv8oSGUpr+rLB3Fysg2Fm8xcyb+RgbhBIupwN3DXbIc8orMC0PgTHykGDtVUBtoCN0VDToGUEJpEO0Psq06bUR6DCn1hmh6iU61OjKOd3tf75d+0v/+xDIilaAeUrQKdQrXBZS7pje0DV9hYUqpbcTO8Q7jR1fWbbdX4PvrZfyAvqPefLORPCGme7OdfIGGI5pJg=="}),s[8]||(s[8]=l(`<p><a href="https://blog.delusionmfg.com/12-types-of-beanies-you-have-to-check-out" target="_blank" rel="noopener noreferrer">Des types de bonnets sous-côtés</a></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">EarflapBeanie</span> <span class="token keyword">extends</span> <span class="token class-name">Beanie</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// À accès aux propriétés et aux méthodes de Beanie, mais uniquement si public ou protected </span></span>
<span class="line">    <span class="token comment">// Cette propriété n&#39;existe que pour les objets EarflapBeanie</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword type-declaration">bool</span> <span class="token variable">$unePropriete</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// On peut également surcharger le constructeur (ou toute autre méthode de l&#39;objet parent)</span></span>
<span class="line">    <span class="token comment">// pour ajouter des comportements</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On peut appeler le constructeur du parent (pour en garder le fonctionnement)</span></span>
<span class="line">        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// En général, on veut ajouter des comportements spécifiques après l&#39;appel du constructeur parent</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unePropriete</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">uneMethodeEnPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Cette méthode n&#39;est pas utilisable sur un objet Beanie, mais uniquement par les objets EarflapBeanie</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SkullCap</span> <span class="token keyword">extends</span> <span class="token class-name">Beanie</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$uneAutreProp</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="visibilite" tabindex="-1"><a class="header-anchor" href="#visibilite"><span>Visibilité</span></a></h2><p>En vidéo :</p>`,4)),s[9]||(s[9]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/23844c48057e457f88e355fdfe15dd41",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[10]||(s[10]=l(`<ul><li><code>public</code> : la propriété / méthode est utilisable en dehors de l&#39;objet</li><li><code>private</code> : la propriété / méthode <strong>n&#39;est pas</strong> utilisable en dehors de l&#39;objet</li><li><code>protected</code> : la propriété / méthode n&#39;est utilisable <strong>que</strong> par les classes enfants (voir section sur l&#39;héritage)</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Beanie</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword type-declaration">bool</span> <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">EarflapBeanie</span> <span class="token keyword">extends</span> <span class="token class-name">Beanie</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// On peut utiliser / surcharger $this-&gt;name et $this-&gt;$description</span></span>
<span class="line">    <span class="token comment">// mais pas $this-&gt;test qui n&#39;est disponible QUE dans les objets Beanie et pas leurs enfants</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fqcn-et-get-class" tabindex="-1"><a class="header-anchor" href="#fqcn-et-get-class"><span>FQCN et <code>get_class()</code></span></a></h2>`,3)),s[11]||(s[11]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/33d964336c744c62a63b5d30bec3a3e7",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[12]||(s[12]=l(`<p>Il arrive qu&#39;on ait besoin de récupérer le nom complet de notre classe (avec son <em>namespace</em> complet), qu&#39;on appelle aussi <abbr title="Fully Qualified Class Name">FQCN (Fully Qualified Class Name)</abbr>. Pour cela, nous avons 2 moyens :</p><ul><li>la fonction <code>get_class()</code> qui retourne : <ul><li>le nom complet de l&#39;objet en cours, si utilisé dans une classe, sans paramètre (appel : <code>get_class()</code>)</li><li>le nom complet de l&#39;objet passé en paramètre (appel : <code>get_class(new DateTime())</code> ou <code>get_class($foo)</code>)</li></ul></li><li><code>NomDeLaClasse::class</code> qui nous permet de récupérer le <abbr title="Fully Qualified Class Name">FQCN</abbr> directement à partir du nom de la classe</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Bar</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// On récupère l&#39;objet réellement en cours</span></span>
<span class="line">        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// On récupère l&#39;objet où la déclaration est faite</span></span>
<span class="line">        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token class-name static-context">Foo</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Renvoie la même chose que get_class($foo)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const f=c(d,[["render",k],["__file","21-heritage.html.vue"]]),h=JSON.parse('{"path":"/php/21-heritage.html","title":"Héritage et objets","lang":"fr-FR","frontmatter":{"date":"2023-01-11T00:00:00.000Z"},"headers":[{"level":2,"title":"Visibilité","slug":"visibilite","link":"#visibilite","children":[]},{"level":2,"title":"FQCN et get_class()","slug":"fqcn-et-get-class","link":"#fqcn-et-get-class","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"php/21-heritage.md"}');export{f as comp,h as data};
