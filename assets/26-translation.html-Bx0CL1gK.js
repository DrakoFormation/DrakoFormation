import{aj as i,ak as p,am as n,an as t,ao as l,ar as a,al as o,ap as r,aq as c}from"./app-BkblVdII.js";const u={},d={class:"table-of-contents"};function m(k,s){const e=r("router-link");return c(),p("div",null,[s[13]||(s[13]=n("h1",{id:"les-traductions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#les-traductions"},[n("span",null,"Les traductions")])],-1)),n("nav",d,[n("ul",null,[n("li",null,[t(e,{to:"#en-resume"},{default:l(()=>s[0]||(s[0]=[a("En résumé")])),_:1})]),n("li",null,[t(e,{to:"#configuration"},{default:l(()=>s[1]||(s[1]=[a("Configuration")])),_:1})]),n("li",null,[t(e,{to:"#utilisation"},{default:l(()=>s[2]||(s[2]=[a("Utilisation")])),_:1})]),n("li",null,[t(e,{to:"#les-domaines"},{default:l(()=>s[3]||(s[3]=[a("Les domaines")])),_:1})]),n("li",null,[t(e,{to:"#les-parametres"},{default:l(()=>s[4]||(s[4]=[a("Les paramètres")])),_:1}),n("ul",null,[n("li",null,[t(e,{to:"#format-icu"},{default:l(()=>s[5]||(s[5]=[a("Format ICU")])),_:1})]),n("li",null,[t(e,{to:"#format-classique"},{default:l(()=>s[6]||(s[6]=[a('Format "classique"')])),_:1})])])]),n("li",null,[t(e,{to:"#gestion-des-pluriels-et-autres-conditions"},{default:l(()=>s[7]||(s[7]=[a("Gestion des pluriels (et autres conditions)")])),_:1})]),n("li",null,[t(e,{to:"#dans-les-formulaires"},{default:l(()=>s[8]||(s[8]=[a("Dans les formulaires")])),_:1})]),n("li",null,[t(e,{to:"#traduire-les-textes-en-bdd"},{default:l(()=>s[9]||(s[9]=[a("Traduire les textes en BdD")])),_:1})]),n("li",null,[t(e,{to:"#des-urls-et-des-langues"},{default:l(()=>s[10]||(s[10]=[a("Des urls et des langues")])),_:1})]),n("li",null,[t(e,{to:"#recuperer-les-textes-sans-traductions"},{default:l(()=>s[11]||(s[11]=[a("Récupérer les textes sans traductions")])),_:1})]),n("li",null,[t(e,{to:"#de-buguer"},{default:l(()=>s[12]||(s[12]=[a("Dé-buguer")])),_:1})])])]),s[14]||(s[14]=n("p",null,[a("La "),n("a",{href:"https://symfony.com/doc/current/translation.html",target:"_blank",rel:"noopener noreferrer"},"documentation officielle sur les traductions"),a(" et "),n("a",{href:"https://symfony.com/doc/current/the-fast-track/en/28-intl.html",target:"_blank",rel:"noopener noreferrer"},"la Fast-Track de Symfony"),a(" Nous allons directement utiliser "),n("a",{href:"https://symfony.com/doc/current/translation/message_format.html",target:"_blank",rel:"noopener noreferrer"},"le format ICU pour gérer les paramètres et les pluriels"),a(", dans nos traductions.")],-1)),s[15]||(s[15]=n("div",{style:{position:"relative","padding-bottom":"56.25%",height:"0"}},[n("iframe",{src:"https://www.loom.com/embed/9c40d518fead4ceab470b37c718f80f7",frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:"",style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}})],-1)),s[16]||(s[16]=o(`<p>Pour utiliser un site en plusieurs langues, il va falloir gérer les traductions de notre site. Même si notre site n&#39;a qu&#39;une seule langue, il est fortement conseillé de toujours utiliser des fichiers de traduction pour gérer les textes, afin d&#39;en permettre l&#39;évolution bien plus facilement.</p><h2 id="en-resume" tabindex="-1"><a class="header-anchor" href="#en-resume"><span>En résumé</span></a></h2><ul><li>Les traductions se trouvent dans le dossier <code>translations</code> du projet</li><li>Les fichiers <code>Yaml</code> portent des noms comme <code>front.fr.yaml</code> où <code>front</code> est appelé un domaine et où <code>fr</code> peut être remplacé par une autre langue</li><li>On peut traduire une chaine de caractères de différentes façons : <ul><li>en appelant la méthode <code>trans(&#39;unTexteOuUneChaine&#39;, [], &#39;unDomaine&#39;)</code> du service <code>Symfony\\Contracts\\Translation\\TranslatorInterface</code></li><li>en appelant le filtre <code>&#39;unTexteOuUneChaine&#39;|trans({}, &#39;unDomaine&#39;)</code> dans une vue Twig</li></ul></li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>La configuration de base (dans <code>config/packages/translation.yaml</code>)</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">framework</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">default_locale</span><span class="token punctuation">:</span> <span class="token string">&#39;fr&#39;</span> <span class="token comment"># Défini la langue par défaut du site (ici en français)</span></span>
<span class="line">    <span class="token key atrule">translator</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">default_path</span><span class="token punctuation">:</span> <span class="token string">&#39;%kernel.project_dir%/translations&#39;</span> <span class="token comment"># Défini où se trouve les traductions</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="utilisation" tabindex="-1"><a class="header-anchor" href="#utilisation"><span>Utilisation</span></a></h2><p>Un exemple dans un controller (on récupère le service de traduction et on lui demande de traduire un texte) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Translation<span class="token punctuation">\\</span>TranslatorInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On injecte le service de traduction</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TranslatorInterface</span> <span class="token variable">$translator</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// On lui demande de récupérer la traduction du texte text.test.</span></span>
<span class="line">    <span class="token comment">// Par défaut, il va la chercher dans le fichier messages.fr.yaml.</span></span>
<span class="line">    <span class="token comment">// Noter le nom étrange et revenons-y dans un instant</span></span>
<span class="line">    <span class="token variable">$translated</span> <span class="token operator">=</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;text.test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un exemple d&#39;appel de la même traduction dans un fichier <code>twig</code> :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>text.test<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>trans <span class="token delimiter punctuation">}}</span></span> <span class="token twig language-twig"><span class="token comment">{# Ici, c&#39;est le filtre trans qui fait le travail d&#39;appeler le translator et d&#39;aller chercher la traduction #}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Regardons le contenu de <code>translations/messages.fr.yaml</code> (ou <code>translations/messages+intl-icu.fr.yaml</code> si vous utilisez le format ICU) :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">text</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">test</span><span class="token punctuation">:</span> Ceci est un texte de test.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Regardons le contenu de <code>translations/messages.en.yaml</code> (ou <code>translations/messages+intl-icu.en.yaml</code> si vous utilisez le format ICU) :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">text</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">test</span><span class="token punctuation">:</span> This is a test text.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ce que fait le translator ici :</p><ul><li>Il récupère la langue de l&#39;utilisateur (qui est dans la requête http / la session)</li><li>Il ouvre le fichier de traduction correspondant</li><li>Il trouve la traduction</li></ul><p>Dans cet exemple, j&#39;utilise une clé de traduction, afin de ranger / organiser mes traductions. J&#39;aurais aussi pu utiliser un texte quelconque à traduire, mais je préfère ces formats plus condensés et qui me permettent de grouper mes traductions.</p><h2 id="les-domaines" tabindex="-1"><a class="header-anchor" href="#les-domaines"><span>Les domaines</span></a></h2><p>Pour l&#39;instant, toutes les traductions que vous entrez doivent se trouver dans le fichier <code>messages.*.yaml</code>. Idéalement, surtout si votre site prend de l&#39;ampleur et que vous commencez à avoir beaucoup de textes, il est fortement recommandé d&#39;utiliser plusieurs fichiers, selon les fonctionnalités (un fichier pour l&#39;administration, un pour la validation des formulaires, etc.). Le découpage est à votre discrétion.</p><p>Ce que l&#39;on appelle un domaine de traduction est en fait un fichier (comme <code>messages</code>) pour chacune des langues.</p><p>Pour gérer cela (imaginons que nous ayons un fichier <code>text.fr.yaml</code>) et appeler un fichier / domaine précis :</p><p>Un exemple dans un controller (on récupère le service de traduction et on lui demande de traduire un texte) :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Translation<span class="token punctuation">\\</span>TranslatorInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// On injecte le service de traduction</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TranslatorInterface</span> <span class="token variable">$translator</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$translated</span> <span class="token operator">=</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;text.test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Un exemple d&#39;appel de la même traduction dans un fichier <code>twig</code> :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>text.test<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>trans<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string"><span class="token punctuation">&#39;</span>text<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="les-parametres" tabindex="-1"><a class="header-anchor" href="#les-parametres"><span>Les paramètres</span></a></h2><h3 id="format-icu" tabindex="-1"><a class="header-anchor" href="#format-icu"><span>Format ICU</span></a></h3><p>Ce format a été intégré à Symfony relativement récemment et tous les projets ne l&#39;utilisent pas forcément.</p><p>Imaginons que dans un texte, je veuille passer un paramètre (la date du jour par exemple). Dans mon fichier <code>translations/messages+intl-icu.fr.yaml</code> j&#39;aurais :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">text</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">test</span><span class="token punctuation">:</span> Nous sommes le <span class="token punctuation">{</span>date<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Et dans l&#39;appel de ma traduction (en Twig) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>text.test<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>trans<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string"><span class="token punctuation">&#39;</span>date<span class="token punctuation">&#39;</span></span><span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>now<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>date<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>d/m/Y<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="format-classique" tabindex="-1"><a class="header-anchor" href="#format-classique"><span>Format &quot;classique&quot;</span></a></h3><p><code>translations/messages.fr.yaml</code> :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">text</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">test</span><span class="token punctuation">:</span> Nous sommes le %date%</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Et dans l&#39;appel de ma traduction (en Twig) :</p><div class="language-twig line-numbers-mode" data-highlighter="prismjs" data-ext="twig" data-title="twig"><pre><code><span class="line"><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> <span class="token string"><span class="token punctuation">&#39;</span>text.test<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>trans<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string"><span class="token punctuation">&#39;</span>%date%<span class="token punctuation">&#39;</span></span><span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>now<span class="token punctuation">&#39;</span></span><span class="token operator">|</span>date<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>d/m/Y<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gestion-des-pluriels-et-autres-conditions" tabindex="-1"><a class="header-anchor" href="#gestion-des-pluriels-et-autres-conditions"><span>Gestion des pluriels (et autres conditions)</span></a></h2><p>Je ne vais parler ici que de la méthode avec ICU, plus pratique et plus lisible, même si sa syntaxe est assez particulière. L&#39;avantage de cette syntaxe est qu&#39;elle se rapproche d&#39;un <code>switch</code> en PHP, prenant une variable et en regardant la valeur pour définir la traduction à choisir.</p><p>Prenons un exemple avec des pluriels :</p><p>Dans <code>translations/messages+intl-icu.fr.yaml</code></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">num_of_apples</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token punctuation">-</span></span>
<span class="line">    <span class="token punctuation">{</span>apples<span class="token punctuation">,</span> plural<span class="token punctuation">,</span></span>
<span class="line">        =0    <span class="token punctuation">{</span>Il n&#39;y a pas de pommes<span class="token punctuation">}</span></span>
<span class="line">        one   <span class="token punctuation">{</span>Il y a une pomme<span class="token punctuation">...</span><span class="token punctuation">}</span></span>
<span class="line">        other <span class="token punctuation">{</span>Il y a <span class="token comment"># pommes !}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>apples, plural</code> définissent qu&#39;on utilise le paramètre <code>apples</code> et que l&#39;on va utiliser la fonction <code>plural</code> (qu&#39;on gère des pluriels, en somme 😉 )</li><li><code>=0 {Il n&#39;y a pas de pommes}</code> dit que si <code>apples</code> est égale à 0, on appelle le texte dans les accolades</li><li><code>one {Il y a une pomme...}</code> dit que si <code>apples</code> est égale à 1, on appelle le texte dans les accolades</li><li><code>other {Il y a # pommes !}</code> si les deux conditions précédentes ne sont pas vraies, on appelle le texte dans les accolades. Le <code>#</code> dans les accolades sera remplacé par la valeur de <code>apples</code>.</li></ul><p>Un appel de cette traduction :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">echo</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;num_of_apples&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;apples&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Il y a 23 pommes !</span></span>
<span class="line"><span class="token keyword">echo</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;num_of_apples&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;apples&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Il y a une pomme...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Cette notation peut également servir pour utiliser des conditions. Prenons cet exemple :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">echo</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;text.test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;style&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Rock&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;like&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;yes&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">echo</span> <span class="token variable">$translator</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;text.test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;style&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Jazz&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;like&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;not_applicable&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">text</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token punctuation">-</span></span>
<span class="line">        <span class="token punctuation">{</span>like<span class="token punctuation">,</span> select<span class="token punctuation">,</span></span>
<span class="line">            yes   <span class="token punctuation">{</span>J&#39;aime le <span class="token punctuation">{</span>style<span class="token punctuation">}</span> <span class="token tag">!</span><span class="token punctuation">}</span></span>
<span class="line">            no    <span class="token punctuation">{</span>Je n&#39;aime pas spécialement le <span class="token punctuation">{</span>style<span class="token punctuation">}</span> <span class="token tag">!</span><span class="token punctuation">}</span></span>
<span class="line">            other <span class="token punctuation">{</span>Pas d&#39;avis sur le <span class="token punctuation">{</span>style<span class="token punctuation">}</span> <span class="token tag">!</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>like, select,</code> : <code>like</code> va utiliser le paramètre <code>like</code> passé par le PHP et <code>select</code>est la fonction utilisée (on va regarder directement la correspondance / l&#39;égalité entre <code>like</code> et les valeurs en dessous)</li><li><code>yes</code> : si <code>like</code> vaut <code>yes</code>, alors on affiche notre amour pour un style musical (passé en paramètre)</li><li><code>no</code> : si <code>like</code> vaut <code>no</code>, alors on affiche notre désamour pour un style musical (passé en paramètre)</li><li><code>other</code> : si <code>like</code> vaut <code>no</code>, alors on affiche notre manque d&#39;avis pour un style musical (passé en paramètre)</li></ul><h2 id="dans-les-formulaires" tabindex="-1"><a class="header-anchor" href="#dans-les-formulaires"><span>Dans les formulaires</span></a></h2><p>Dans la configuration des formulaires, les labels sont directement traduits et vous pouvez configurer quelques éléments supplémentaires :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestType</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractType</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildForm</span><span class="token punctuation">(</span><span class="token class-name type-declaration">FormBuilderInterface</span> <span class="token variable">$builder</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$builder</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">TextType</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token comment">// On peut donner une clé de traduction pour le label</span></span>
<span class="line">                <span class="token string single-quoted-string">&#39;label&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;user.form.password&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">configureOptions</span><span class="token punctuation">(</span><span class="token class-name type-declaration">OptionsResolver</span> <span class="token variable">$resolver</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$resolver</span><span class="token operator">-&gt;</span><span class="token function">setDefaults</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token comment">// on définit le fichier de traduction à utiliser</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;translation_domain&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;front&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="traduire-les-textes-en-bdd" tabindex="-1"><a class="header-anchor" href="#traduire-les-textes-en-bdd"><span>Traduire les textes en BdD</span></a></h2><p>Pour simplifier le travail de traduction des données en <abbr title="Base de Données">BdD</abbr>, plusieurs bundles sont disponibles :</p><ul><li><a href="https://symfony.com/bundles/StofDoctrineExtensionsBundle/current/index.html" target="_blank" rel="noopener noreferrer">StofDoctrineExtensionsBundle</a> permet d&#39;<a href="https://github.com/doctrine-extensions/DoctrineExtensions/blob/main/doc/translatable.md#setup-and-autoloading" target="_blank" rel="noopener noreferrer">ajouter un comportement <code>Translatable</code></a> pour ajouter les champs à traduire dans vos entités</li><li><a href="https://github.com/a2lix/TranslationFormBundle" target="_blank" rel="noopener noreferrer">A2lixTranslationFormBundle</a> pour gérer vos traductions dans les formulaires de modifications de vos entités</li></ul><h2 id="des-urls-et-des-langues" tabindex="-1"><a class="header-anchor" href="#des-urls-et-des-langues"><span>Des urls et des langues</span></a></h2><p>Vous pouvez également gérer <a href="https://symfony.com/doc/current/routing.html#localized-routes-i18n" target="_blank" rel="noopener noreferrer">les traductions de vos routes</a>, directement dans l&#39;annotation de route, pour définir l&#39;url dans les différentes langues.</p><p>Il est également possible (et bien utile) de définir des préfixes en fonction des langues, pour <strong>toutes</strong> vos routes d&#39;un coup.</p><p>Dans <code>config/routes/annotations.yaml</code>, vous pouvez écrire :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">controllers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">resource</span><span class="token punctuation">:</span> ../../src/Controller/</span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> annotation</span>
<span class="line">    <span class="token key atrule">prefix</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">fr</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment"># Les routes sans un préfixe de langue seront en français</span></span>
<span class="line">        <span class="token key atrule">en</span><span class="token punctuation">:</span> <span class="token string">&#39;/en&#39;</span> <span class="token comment"># les routes avec /en au début seront en anglais</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recuperer-les-textes-sans-traductions" tabindex="-1"><a class="header-anchor" href="#recuperer-les-textes-sans-traductions"><span>Récupérer les textes sans traductions</span></a></h2><p>Pendant le développement, on n&#39;a pas toujours les textes définitifs dans toutes les langues directement. Il faut parfois revenir sur le projet plus tard et refaire des fichiers de traduction (classiquement, lorsqu&#39;on ajoute une nouvelle langue). Une commande Symfony est prévue pour récupérer les traductions manquantes : <code>translation:update</code>. Cette commande va chercher les appels aux traductions dans les fichiers Twig dans <code>templates</code> (où les dossiers où vous avez dit avoir des templates) et dans les services appelant le <code>Translator</code>.</p><p>Quelques exemples d&#39;utilisation :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Affiche dans la console les traductions manquantes pour le français</span></span>
<span class="line">php bin/console translation:update --dump-messages fr</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Crée les entrées manquantes dans les fichiers pour le français</span></span>
<span class="line">php bin/console translation:update <span class="token parameter variable">--force</span> fr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="de-buguer" tabindex="-1"><a class="header-anchor" href="#de-buguer"><span>Dé-buguer</span></a></h2><p>Quand vous ajoutez un fichier de traduction, les traductions ne sont pas forcément prises en compte directement. Pour corriger ce problème, lancer la commande <code>php bin/console cache:clear</code>.</p><p>Il existe également une commande <code>php bin/console debug:translation</code> qui peut vous rendre de grands services :</p><ul><li><code>php bin/console debug:translation fr</code> permet de voir toutes les traductions disponibles pour le français et montre l&#39;état (si la traduction est manquante dans la langue, par exemple)</li><li><code>php bin/console debug:translation fr --domain=messages</code> permet de voir toutes les traductions disponibles dans le domaine (fichier) messages, pour le français et montre l&#39;état (si la traduction est manquante dans la langue, par exemple)</li><li><code>php bin/console debug:translation fr --only-unused</code> permet de voir toutes les traductions non utilisées (ni dans le PHP, ni dans les Twig, mais définies dans les fichiers de traduction)</li><li><code>php bin/console debug:translation fr --only-missing</code> permet de voir toutes les traductions présentes dans le PHP ou les Twig, mais pas présentes dans les fichiers de traduction</li></ul>`,69))])}const g=i(u,[["render",m],["__file","26-translation.html.vue"]]),b=JSON.parse('{"path":"/symfony/26-translation.html","title":"Les traductions","lang":"fr-FR","frontmatter":{"date":"2021-03-08T00:00:00.000Z"},"headers":[{"level":2,"title":"En résumé","slug":"en-resume","link":"#en-resume","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Utilisation","slug":"utilisation","link":"#utilisation","children":[]},{"level":2,"title":"Les domaines","slug":"les-domaines","link":"#les-domaines","children":[]},{"level":2,"title":"Les paramètres","slug":"les-parametres","link":"#les-parametres","children":[{"level":3,"title":"Format ICU","slug":"format-icu","link":"#format-icu","children":[]},{"level":3,"title":"Format \\"classique\\"","slug":"format-classique","link":"#format-classique","children":[]}]},{"level":2,"title":"Gestion des pluriels (et autres conditions)","slug":"gestion-des-pluriels-et-autres-conditions","link":"#gestion-des-pluriels-et-autres-conditions","children":[]},{"level":2,"title":"Dans les formulaires","slug":"dans-les-formulaires","link":"#dans-les-formulaires","children":[]},{"level":2,"title":"Traduire les textes en BdD","slug":"traduire-les-textes-en-bdd","link":"#traduire-les-textes-en-bdd","children":[]},{"level":2,"title":"Des urls et des langues","slug":"des-urls-et-des-langues","link":"#des-urls-et-des-langues","children":[]},{"level":2,"title":"Récupérer les textes sans traductions","slug":"recuperer-les-textes-sans-traductions","link":"#recuperer-les-textes-sans-traductions","children":[]},{"level":2,"title":"Dé-buguer","slug":"de-buguer","link":"#de-buguer","children":[]}],"git":{"updatedTime":1736283917000},"filePathRelative":"symfony/26-translation.md"}');export{g as comp,b as data};
